
demoprog_stm32f303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08002000  08002000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b04  0800218c  0800218c  0000218c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003c90  08003c90  00003c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cec  08003cec  0001000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003cec  08003cec  0001000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cec  08003cec  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cec  08003cec  00003cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cf0  08003cf0  00003cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003cf4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  08003d00  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003d00  00010124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c2c  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a33  00000000  00000000  00019c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007b0  00000000  00000000  0001b6a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000748  00000000  00000000  0001be50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ebe  00000000  00000000  0001c598  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a4f  00000000  00000000  00033456  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080939  00000000  00000000  0003aea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bb7de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011e8  00000000  00000000  000bb85c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00003a6b  00000000  00000000  000bca44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800218c <__do_global_dtors_aux>:
 800218c:	b510      	push	{r4, lr}
 800218e:	4c05      	ldr	r4, [pc, #20]	; (80021a4 <__do_global_dtors_aux+0x18>)
 8002190:	7823      	ldrb	r3, [r4, #0]
 8002192:	b933      	cbnz	r3, 80021a2 <__do_global_dtors_aux+0x16>
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <__do_global_dtors_aux+0x1c>)
 8002196:	b113      	cbz	r3, 800219e <__do_global_dtors_aux+0x12>
 8002198:	4804      	ldr	r0, [pc, #16]	; (80021ac <__do_global_dtors_aux+0x20>)
 800219a:	f3af 8000 	nop.w
 800219e:	2301      	movs	r3, #1
 80021a0:	7023      	strb	r3, [r4, #0]
 80021a2:	bd10      	pop	{r4, pc}
 80021a4:	2000000c 	.word	0x2000000c
 80021a8:	00000000 	.word	0x00000000
 80021ac:	08003c78 	.word	0x08003c78

080021b0 <frame_dummy>:
 80021b0:	b508      	push	{r3, lr}
 80021b2:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <frame_dummy+0x10>)
 80021b4:	b11b      	cbz	r3, 80021be <frame_dummy+0xe>
 80021b6:	4903      	ldr	r1, [pc, #12]	; (80021c4 <frame_dummy+0x14>)
 80021b8:	4803      	ldr	r0, [pc, #12]	; (80021c8 <frame_dummy+0x18>)
 80021ba:	f3af 8000 	nop.w
 80021be:	bd08      	pop	{r3, pc}
 80021c0:	00000000 	.word	0x00000000
 80021c4:	20000010 	.word	0x20000010
 80021c8:	08003c78 	.word	0x08003c78

080021cc <AppInit>:
**            software program initialization.
** \return    none.
**
****************************************************************************************/
void AppInit(void)
{
 80021cc:	b508      	push	{r3, lr}
  /* Initialize the timer driver. */
  TimerInit();
 80021ce:	f000 f96f 	bl	80024b0 <TimerInit>
  /* Initialize the led driver. */
  LedInit();
 80021d2:	f000 f93d 	bl	8002450 <LedInit>
  /* initialize the bootloader interface */
  BootComInit();
 80021d6:	f000 f8b1 	bl	800233c <BootComInit>
} /*** end of AppInit ***/
 80021da:	bd08      	pop	{r3, pc}

080021dc <AppTask>:
**            continuously in the program loop.
** \return    none.
**
****************************************************************************************/
void AppTask(void)
{
 80021dc:	b508      	push	{r3, lr}
  /* Toggle LED with a fixed frequency. */
  LedToggle();
 80021de:	f000 f941 	bl	8002464 <LedToggle>
  /* check for bootloader activation request */
  BootComCheckActivationRequest();
 80021e2:	f000 f92f 	bl	8002444 <BootComCheckActivationRequest>
} /*** end of AppTask ***/
 80021e6:	bd08      	pop	{r3, pc}

080021e8 <BootComRs232Init>:
** \brief     Initializes the UART communication interface.
** \return    none.
**
****************************************************************************************/
static void BootComRs232Init(void)
{
 80021e8:	b508      	push	{r3, lr}
  /* Configure UART peripheral. */
  rs232Handle.Instance        = USART2;
 80021ea:	4809      	ldr	r0, [pc, #36]	; (8002210 <BootComRs232Init+0x28>)
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <BootComRs232Init+0x2c>)
 80021ee:	6003      	str	r3, [r0, #0]
  rs232Handle.Init.BaudRate   = BOOT_COM_RS232_BAUDRATE;
 80021f0:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80021f4:	6043      	str	r3, [r0, #4]
  rs232Handle.Init.WordLength = UART_WORDLENGTH_8B;
 80021f6:	2300      	movs	r3, #0
 80021f8:	6083      	str	r3, [r0, #8]
  rs232Handle.Init.StopBits = UART_STOPBITS_1;
 80021fa:	60c3      	str	r3, [r0, #12]
  rs232Handle.Init.Parity = UART_PARITY_NONE;
 80021fc:	6103      	str	r3, [r0, #16]
  rs232Handle.Init.Mode = UART_MODE_TX_RX;
 80021fe:	220c      	movs	r2, #12
 8002200:	6142      	str	r2, [r0, #20]
  rs232Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002202:	6183      	str	r3, [r0, #24]
  rs232Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 8002204:	61c3      	str	r3, [r0, #28]
  rs232Handle.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002206:	6203      	str	r3, [r0, #32]
  rs232Handle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002208:	6243      	str	r3, [r0, #36]	; 0x24
  /* Initialize the UART peripheral. */
  HAL_UART_Init(&rs232Handle);
 800220a:	f001 fcd8 	bl	8003bbe <HAL_UART_Init>
} /*** end of BootComRs232Init ***/
 800220e:	bd08      	pop	{r3, pc}
 8002210:	20000050 	.word	0x20000050
 8002214:	40004400 	.word	0x40004400

08002218 <CanGetSpeedConfig>:
** \return    1 if the CAN bustiming register values were found, 0 otherwise.
**
****************************************************************************************/
static unsigned char CanGetSpeedConfig(unsigned short baud, unsigned short *prescaler,
                                       unsigned char *tseg1, unsigned char *tseg2)
{
 8002218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800221c:	4604      	mov	r4, r0
 800221e:	460d      	mov	r5, r1
 8002220:	4617      	mov	r7, r2
 8002222:	4698      	mov	r8, r3
  unsigned char cnt;
  unsigned long canClockFreqkHz;

  /* store CAN peripheral clock speed in kHz */
  canClockFreqkHz = HAL_RCC_GetPCLK1Freq() / 1000u;
 8002224:	f001 fa3c 	bl	80036a0 <HAL_RCC_GetPCLK1Freq>
 8002228:	4b15      	ldr	r3, [pc, #84]	; (8002280 <CanGetSpeedConfig+0x68>)
 800222a:	fba3 3000 	umull	r3, r0, r3, r0
 800222e:	0980      	lsrs	r0, r0, #6

  /* loop through all possible time quanta configurations to find a match */
  for (cnt=0; cnt < sizeof(canTiming)/sizeof(canTiming[0]); cnt++)
 8002230:	2200      	movs	r2, #0
 8002232:	e001      	b.n	8002238 <CanGetSpeedConfig+0x20>
 8002234:	3201      	adds	r2, #1
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	2a11      	cmp	r2, #17
 800223a:	d81d      	bhi.n	8002278 <CanGetSpeedConfig+0x60>
  {
    if ((canClockFreqkHz % (baud*(canTiming[cnt].tseg1+canTiming[cnt].tseg2+1))) == 0)
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <CanGetSpeedConfig+0x6c>)
 800223e:	f813 1012 	ldrb.w	r1, [r3, r2, lsl #1]
 8002242:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002246:	f893 c001 	ldrb.w	ip, [r3, #1]
 800224a:	eb01 030c 	add.w	r3, r1, ip
 800224e:	fb03 4304 	mla	r3, r3, r4, r4
 8002252:	fbb0 fef3 	udiv	lr, r0, r3
 8002256:	fb03 061e 	mls	r6, r3, lr, r0
 800225a:	2e00      	cmp	r6, #0
 800225c:	d1ea      	bne.n	8002234 <CanGetSpeedConfig+0x1c>
    {
      /* compute the prescaler that goes with this TQ configuration */
      *prescaler = canClockFreqkHz/(baud*(canTiming[cnt].tseg1+canTiming[cnt].tseg2+1));
 800225e:	fa1f f38e 	uxth.w	r3, lr
 8002262:	802b      	strh	r3, [r5, #0]

      /* make sure the prescaler is valid */
      if ( (*prescaler > 0) && (*prescaler <= 1024) )
 8002264:	3b01      	subs	r3, #1
 8002266:	b29b      	uxth	r3, r3
 8002268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800226c:	d2e2      	bcs.n	8002234 <CanGetSpeedConfig+0x1c>
      {
        /* store the bustiming configuration */
        *tseg1 = canTiming[cnt].tseg1;
 800226e:	7039      	strb	r1, [r7, #0]
        *tseg2 = canTiming[cnt].tseg2;
 8002270:	f888 c000 	strb.w	ip, [r8]
        /* found a good bus timing configuration */
        return 1;
 8002274:	2001      	movs	r0, #1
 8002276:	e000      	b.n	800227a <CanGetSpeedConfig+0x62>
      }
    }
  }
  /* could not find a good bus timing configuration */
  return 0;
 8002278:	2000      	movs	r0, #0
} /*** end of CanGetSpeedConfig ***/
 800227a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800227e:	bf00      	nop
 8002280:	10624dd3 	.word	0x10624dd3
 8002284:	08003c90 	.word	0x08003c90

08002288 <BootComCanInit>:
** \brief     Initializes the CAN communication interface.
** \return    none.
**
****************************************************************************************/
static void BootComCanInit(void)
{
 8002288:	b570      	push	{r4, r5, r6, lr}
 800228a:	b08c      	sub	sp, #48	; 0x30
  unsigned short prescaler = 0;
 800228c:	2500      	movs	r5, #0
 800228e:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
  unsigned char tseg1 = 0, tseg2 = 0;
 8002292:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 8002296:	ab0c      	add	r3, sp, #48	; 0x30
 8002298:	f803 5d04 	strb.w	r5, [r3, #-4]!
  CAN_FilterTypeDef filterConfig;
  unsigned long rxMsgId = BOOT_COM_CAN_RX_MSG_ID;
  unsigned long rxFilterId, rxFilterMask;

  /* obtain bittiming configuration information. */
  CanGetSpeedConfig(BOOT_COM_CAN_BAUDRATE/1000, &prescaler, &tseg1, &tseg2);
 800229c:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 80022a0:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 80022a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022a8:	f7ff ffb6 	bl	8002218 <CanGetSpeedConfig>

  /* set the CAN controller configuration. */
  canHandle.Instance = CAN;
 80022ac:	4c1a      	ldr	r4, [pc, #104]	; (8002318 <BootComCanInit+0x90>)
 80022ae:	4b1b      	ldr	r3, [pc, #108]	; (800231c <BootComCanInit+0x94>)
 80022b0:	6023      	str	r3, [r4, #0]
  canHandle.Init.TimeTriggeredMode = DISABLE;
 80022b2:	7625      	strb	r5, [r4, #24]
  canHandle.Init.AutoBusOff = DISABLE;
 80022b4:	7665      	strb	r5, [r4, #25]
  canHandle.Init.AutoWakeUp = DISABLE;
 80022b6:	76a5      	strb	r5, [r4, #26]
  canHandle.Init.AutoRetransmission = ENABLE;
 80022b8:	2601      	movs	r6, #1
 80022ba:	76e6      	strb	r6, [r4, #27]
  canHandle.Init.ReceiveFifoLocked = DISABLE;
 80022bc:	7725      	strb	r5, [r4, #28]
  canHandle.Init.TransmitFifoPriority = DISABLE;
 80022be:	7765      	strb	r5, [r4, #29]
  canHandle.Init.Mode = CAN_MODE_NORMAL;
 80022c0:	60a5      	str	r5, [r4, #8]
  canHandle.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80022c2:	60e5      	str	r5, [r4, #12]
  canHandle.Init.TimeSeg1 = ((unsigned long)tseg1 - 1) << CAN_BTR_TS1_Pos;
 80022c4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80022c8:	3b01      	subs	r3, #1
 80022ca:	041b      	lsls	r3, r3, #16
 80022cc:	6123      	str	r3, [r4, #16]
  canHandle.Init.TimeSeg2 = ((unsigned long)tseg2 - 1) << CAN_BTR_TS2_Pos;
 80022ce:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80022d2:	3b01      	subs	r3, #1
 80022d4:	051b      	lsls	r3, r3, #20
 80022d6:	6163      	str	r3, [r4, #20]
  canHandle.Init.Prescaler = prescaler;
 80022d8:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80022dc:	6063      	str	r3, [r4, #4]
  /* initialize the CAN controller. this only fails if the CAN controller hardware is
   * faulty. no need to evaluate the return value as there is nothing we can do about
   * a faulty CAN controller.
   */
  (void)HAL_CAN_Init(&canHandle);
 80022de:	4620      	mov	r0, r4
 80022e0:	f000 fa9a 	bl	8002818 <HAL_CAN_Init>
    rxFilterMask = (CAN_RI0R_EXID_Msk) | CAN_RI0R_IDE;
  }
  /* configure the reception filter. note that the implementation of this function
   * always returns HAL_OK, so no need to evaluate the return value.
   */
  filterConfig.FilterBank = 0;
 80022e4:	9506      	str	r5, [sp, #24]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80022e6:	9507      	str	r5, [sp, #28]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80022e8:	9608      	str	r6, [sp, #32]
  filterConfig.FilterIdHigh = (rxFilterId >> 16) & 0x0000FFFFu;
 80022ea:	f64c 43e0 	movw	r3, #52448	; 0xcce0
 80022ee:	9301      	str	r3, [sp, #4]
  filterConfig.FilterIdLow = rxFilterId & 0x0000FFFFu;
 80022f0:	9502      	str	r5, [sp, #8]
  filterConfig.FilterMaskIdHigh = (rxFilterMask >> 16) & 0x0000FFFFu;
 80022f2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80022f6:	9303      	str	r3, [sp, #12]
  filterConfig.FilterMaskIdLow = rxFilterMask & 0x0000FFFFu;
 80022f8:	2304      	movs	r3, #4
 80022fa:	9304      	str	r3, [sp, #16]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80022fc:	9505      	str	r5, [sp, #20]
  filterConfig.FilterActivation = ENABLE;
 80022fe:	9609      	str	r6, [sp, #36]	; 0x24
  filterConfig.SlaveStartFilterBank = 14;
 8002300:	230e      	movs	r3, #14
 8002302:	930a      	str	r3, [sp, #40]	; 0x28
  (void)HAL_CAN_ConfigFilter(&canHandle, &filterConfig);
 8002304:	a901      	add	r1, sp, #4
 8002306:	4620      	mov	r0, r4
 8002308:	f000 fb2c 	bl	8002964 <HAL_CAN_ConfigFilter>
  /* start the CAN peripheral. no need to evaluate the return value as there is nothing
   * we can do about a faulty CAN controller. */
  (void)HAL_CAN_Start(&canHandle);
 800230c:	4620      	mov	r0, r4
 800230e:	f000 fba7 	bl	8002a60 <HAL_CAN_Start>
} /*** end of BootComCanInit ***/
 8002312:	b00c      	add	sp, #48	; 0x30
 8002314:	bd70      	pop	{r4, r5, r6, pc}
 8002316:	bf00      	nop
 8002318:	20000028 	.word	0x20000028
 800231c:	40006400 	.word	0x40006400

08002320 <Rs232ReceiveByte>:
{
 8002320:	b508      	push	{r3, lr}
  result = HAL_UART_Receive(&rs232Handle, data, 1, 0);
 8002322:	2300      	movs	r3, #0
 8002324:	2201      	movs	r2, #1
 8002326:	4601      	mov	r1, r0
 8002328:	4803      	ldr	r0, [pc, #12]	; (8002338 <Rs232ReceiveByte+0x18>)
 800232a:	f001 fb84 	bl	8003a36 <HAL_UART_Receive>
  if (result == HAL_OK)
 800232e:	b108      	cbz	r0, 8002334 <Rs232ReceiveByte+0x14>
  return 0;
 8002330:	2000      	movs	r0, #0
} /*** end of Rs232ReceiveByte ***/
 8002332:	bd08      	pop	{r3, pc}
    return 1;
 8002334:	2001      	movs	r0, #1
 8002336:	e7fc      	b.n	8002332 <Rs232ReceiveByte+0x12>
 8002338:	20000050 	.word	0x20000050

0800233c <BootComInit>:
{
 800233c:	b508      	push	{r3, lr}
  BootComRs232Init();
 800233e:	f7ff ff53 	bl	80021e8 <BootComRs232Init>
  BootComCanInit();
 8002342:	f7ff ffa1 	bl	8002288 <BootComCanInit>
} /*** end of BootComInit ***/
 8002346:	bd08      	pop	{r3, pc}

08002348 <BootActivate>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002348:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800234c:	4905      	ldr	r1, [pc, #20]	; (8002364 <BootActivate+0x1c>)
 800234e:	68ca      	ldr	r2, [r1, #12]
 8002350:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <BootActivate+0x20>)
 8002356:	4313      	orrs	r3, r2
 8002358:	60cb      	str	r3, [r1, #12]
 800235a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800235e:	bf00      	nop
 8002360:	e7fd      	b.n	800235e <BootActivate+0x16>
 8002362:	bf00      	nop
 8002364:	e000ed00 	.word	0xe000ed00
 8002368:	05fa0004 	.word	0x05fa0004

0800236c <BootComRs232CheckActivationRequest>:
{
 800236c:	b508      	push	{r3, lr}
  if (xcpCtoRxInProgress == 0)
 800236e:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <BootComRs232CheckActivationRequest+0x88>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	b9b3      	cbnz	r3, 80023a2 <BootComRs232CheckActivationRequest+0x36>
    if (Rs232ReceiveByte(&xcpCtoReqPacket[0]) == 1)
 8002374:	4820      	ldr	r0, [pc, #128]	; (80023f8 <BootComRs232CheckActivationRequest+0x8c>)
 8002376:	f7ff ffd3 	bl	8002320 <Rs232ReceiveByte>
 800237a:	2801      	cmp	r0, #1
 800237c:	d000      	beq.n	8002380 <BootComRs232CheckActivationRequest+0x14>
} /*** end of BootComRs232CheckActivationRequest ***/
 800237e:	bd08      	pop	{r3, pc}
      if ( (xcpCtoReqPacket[0] > 0) &&
 8002380:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <BootComRs232CheckActivationRequest+0x8c>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3b01      	subs	r3, #1
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b3f      	cmp	r3, #63	; 0x3f
 800238a:	d8f8      	bhi.n	800237e <BootComRs232CheckActivationRequest+0x12>
        xcpCtoRxStartTime = TimerGet();
 800238c:	f000 f891 	bl	80024b2 <TimerGet>
 8002390:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <BootComRs232CheckActivationRequest+0x90>)
 8002392:	6018      	str	r0, [r3, #0]
        xcpCtoRxInProgress = 1;
 8002394:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <BootComRs232CheckActivationRequest+0x88>)
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
        xcpCtoRxLength = 0;
 800239a:	4b19      	ldr	r3, [pc, #100]	; (8002400 <BootComRs232CheckActivationRequest+0x94>)
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
 80023a0:	e7ed      	b.n	800237e <BootComRs232CheckActivationRequest+0x12>
    if (Rs232ReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == 1)
 80023a2:	4b17      	ldr	r3, [pc, #92]	; (8002400 <BootComRs232CheckActivationRequest+0x94>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	3301      	adds	r3, #1
 80023a8:	4813      	ldr	r0, [pc, #76]	; (80023f8 <BootComRs232CheckActivationRequest+0x8c>)
 80023aa:	4418      	add	r0, r3
 80023ac:	f7ff ffb8 	bl	8002320 <Rs232ReceiveByte>
 80023b0:	2801      	cmp	r0, #1
 80023b2:	d113      	bne.n	80023dc <BootComRs232CheckActivationRequest+0x70>
      xcpCtoRxLength++;
 80023b4:	4a12      	ldr	r2, [pc, #72]	; (8002400 <BootComRs232CheckActivationRequest+0x94>)
 80023b6:	7813      	ldrb	r3, [r2, #0]
 80023b8:	3301      	adds	r3, #1
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	7013      	strb	r3, [r2, #0]
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 80023be:	4a0e      	ldr	r2, [pc, #56]	; (80023f8 <BootComRs232CheckActivationRequest+0x8c>)
 80023c0:	7812      	ldrb	r2, [r2, #0]
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d1db      	bne.n	800237e <BootComRs232CheckActivationRequest+0x12>
        xcpCtoRxInProgress = 0;
 80023c6:	4a0b      	ldr	r2, [pc, #44]	; (80023f4 <BootComRs232CheckActivationRequest+0x88>)
 80023c8:	2100      	movs	r1, #0
 80023ca:	7011      	strb	r1, [r2, #0]
        if ((xcpCtoReqPacket[1] == 0xff) && (xcpCtoRxLength == 2))
 80023cc:	4a0a      	ldr	r2, [pc, #40]	; (80023f8 <BootComRs232CheckActivationRequest+0x8c>)
 80023ce:	7852      	ldrb	r2, [r2, #1]
 80023d0:	2aff      	cmp	r2, #255	; 0xff
 80023d2:	d1d4      	bne.n	800237e <BootComRs232CheckActivationRequest+0x12>
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d1d2      	bne.n	800237e <BootComRs232CheckActivationRequest+0x12>
          BootActivate();
 80023d8:	f7ff ffb6 	bl	8002348 <BootActivate>
      if (TimerGet() > (xcpCtoRxStartTime + RS232_CTO_RX_PACKET_TIMEOUT_MS))
 80023dc:	f000 f869 	bl	80024b2 <TimerGet>
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <BootComRs232CheckActivationRequest+0x90>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	3364      	adds	r3, #100	; 0x64
 80023e6:	4298      	cmp	r0, r3
 80023e8:	d9c9      	bls.n	800237e <BootComRs232CheckActivationRequest+0x12>
        xcpCtoRxInProgress = 0;
 80023ea:	4b02      	ldr	r3, [pc, #8]	; (80023f4 <BootComRs232CheckActivationRequest+0x88>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
} /*** end of BootComRs232CheckActivationRequest ***/
 80023f0:	e7c5      	b.n	800237e <BootComRs232CheckActivationRequest+0x12>
 80023f2:	bf00      	nop
 80023f4:	20000111 	.word	0x20000111
 80023f8:	200000d0 	.word	0x200000d0
 80023fc:	20000114 	.word	0x20000114
 8002400:	20000112 	.word	0x20000112

08002404 <BootComCanCheckActivationRequest>:
**            bootloader should be activated and, if so, activates it.
** \return    none.
**
****************************************************************************************/
static void BootComCanCheckActivationRequest(void)
{
 8002404:	b500      	push	{lr}
 8002406:	b08b      	sub	sp, #44	; 0x2c
  unsigned char packetIdMatches = 0;
  CAN_RxHeaderTypeDef rxMsgHeader;
  unsigned char rxMsgData[8];

  /* poll for received CAN messages that await processing. */
  if (HAL_CAN_GetRxMessage(&canHandle, CAN_RX_FIFO0, &rxMsgHeader, rxMsgData) == HAL_OK)
 8002408:	ab01      	add	r3, sp, #4
 800240a:	aa03      	add	r2, sp, #12
 800240c:	2100      	movs	r1, #0
 800240e:	480c      	ldr	r0, [pc, #48]	; (8002440 <BootComCanCheckActivationRequest+0x3c>)
 8002410:	f000 fb54 	bl	8002abc <HAL_CAN_GetRxMessage>
 8002414:	b920      	cbnz	r0, 8002420 <BootComCanCheckActivationRequest+0x1c>
  {
    /* check if this message has the configured CAN packet identifier. */
    if ((rxMsgId & 0x80000000) == 0)
    {
      /* was an 11-bit CAN message received that matches? */
      if ( (rxMsgHeader.StdId == rxMsgId) &&
 8002416:	9a03      	ldr	r2, [sp, #12]
 8002418:	f240 6367 	movw	r3, #1639	; 0x667
 800241c:	429a      	cmp	r2, r3
 800241e:	d002      	beq.n	8002426 <BootComCanCheckActivationRequest+0x22>
        /* connection request received so start the bootloader */
        BootActivate();
      }
    }
  }
} /*** end of BootComCanCheckActivationRequest ***/
 8002420:	b00b      	add	sp, #44	; 0x2c
 8002422:	f85d fb04 	ldr.w	pc, [sp], #4
           (rxMsgHeader.IDE == CAN_ID_STD) )
 8002426:	9b05      	ldr	r3, [sp, #20]
      if ( (rxMsgHeader.StdId == rxMsgId) &&
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f9      	bne.n	8002420 <BootComCanCheckActivationRequest+0x1c>
      if ((rxMsgData[0] == 0xff) && (rxMsgHeader.DLC == 2))
 800242c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002430:	2bff      	cmp	r3, #255	; 0xff
 8002432:	d1f5      	bne.n	8002420 <BootComCanCheckActivationRequest+0x1c>
 8002434:	9b07      	ldr	r3, [sp, #28]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d1f2      	bne.n	8002420 <BootComCanCheckActivationRequest+0x1c>
        BootActivate();
 800243a:	f7ff ff85 	bl	8002348 <BootActivate>
 800243e:	bf00      	nop
 8002440:	20000028 	.word	0x20000028

08002444 <BootComCheckActivationRequest>:
{
 8002444:	b508      	push	{r3, lr}
  BootComRs232CheckActivationRequest();
 8002446:	f7ff ff91 	bl	800236c <BootComRs232CheckActivationRequest>
  BootComCanCheckActivationRequest();
 800244a:	f7ff ffdb 	bl	8002404 <BootComCanCheckActivationRequest>
} /*** end of BootComCheckActivationRequest ***/
 800244e:	bd08      	pop	{r3, pc}

08002450 <LedInit>:
** \brief     Initializes the LED. 
** \return    none.
**
****************************************************************************************/
void LedInit(void)
{
 8002450:	b508      	push	{r3, lr}
  /* Note that the initialization of the LED GPIO pin is done in HAL_MspInit(). All that
   * is left to do here is to make sure the LED is turned off after initialization.
   */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002452:	2200      	movs	r2, #0
 8002454:	2108      	movs	r1, #8
 8002456:	4802      	ldr	r0, [pc, #8]	; (8002460 <LedInit+0x10>)
 8002458:	f000 fcea 	bl	8002e30 <HAL_GPIO_WritePin>
} /*** end of LedInit ***/
 800245c:	bd08      	pop	{r3, pc}
 800245e:	bf00      	nop
 8002460:	48000400 	.word	0x48000400

08002464 <LedToggle>:
** \brief     Toggles the LED at a fixed time interval.
** \return    none.
**
****************************************************************************************/
void LedToggle(void)
{
 8002464:	b510      	push	{r4, lr}
  static unsigned char led_toggle_state = 0;
  static unsigned long timer_counter_last = 0;
  unsigned long timer_counter_now;

  /* check if toggle interval time passed */
  timer_counter_now = TimerGet();
 8002466:	f000 f824 	bl	80024b2 <TimerGet>
  if ( (timer_counter_now - timer_counter_last) < LED_TOGGLE_MS)
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <LedToggle+0x40>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	1ac3      	subs	r3, r0, r3
 8002470:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002474:	d30c      	bcc.n	8002490 <LedToggle+0x2c>
 8002476:	4604      	mov	r4, r0
    /* not yet time to toggle */
    return;
  }

  /* determine toggle action */
  if (led_toggle_state == 0)
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <LedToggle+0x44>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	b94b      	cbnz	r3, 8002492 <LedToggle+0x2e>
  {
    led_toggle_state = 1;
 800247e:	2201      	movs	r2, #1
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <LedToggle+0x44>)
 8002482:	701a      	strb	r2, [r3, #0]
    /* turn the LED on */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002484:	2108      	movs	r1, #8
 8002486:	4809      	ldr	r0, [pc, #36]	; (80024ac <LedToggle+0x48>)
 8002488:	f000 fcd2 	bl	8002e30 <HAL_GPIO_WritePin>
    /* turn the LED off */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
  }

  /* store toggle time to determine next toggle interval */
  timer_counter_last = timer_counter_now;
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <LedToggle+0x40>)
 800248e:	601c      	str	r4, [r3, #0]
} /*** end of LedToggle ***/
 8002490:	bd10      	pop	{r4, pc}
    led_toggle_state = 0;
 8002492:	2200      	movs	r2, #0
 8002494:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <LedToggle+0x44>)
 8002496:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002498:	2108      	movs	r1, #8
 800249a:	4804      	ldr	r0, [pc, #16]	; (80024ac <LedToggle+0x48>)
 800249c:	f000 fcc8 	bl	8002e30 <HAL_GPIO_WritePin>
 80024a0:	e7f4      	b.n	800248c <LedToggle+0x28>
 80024a2:	bf00      	nop
 80024a4:	2000011c 	.word	0x2000011c
 80024a8:	20000118 	.word	0x20000118
 80024ac:	48000400 	.word	0x48000400

080024b0 <TimerInit>:
void TimerInit(void)
{
  /* The HAL initialization already configured the Systick interrupt to generate an
   * interrupt every 1 millisecond. Nothing more needs to be done here.
   */
} /*** end of TimerInit ***/
 80024b0:	4770      	bx	lr

080024b2 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
unsigned long TimerGet(void)
{
 80024b2:	b508      	push	{r3, lr}
  /* Read and return the tick counter value. */
  return HAL_GetTick();
 80024b4:	f000 f996 	bl	80027e4 <HAL_GetTick>
} /*** end of TimerGet ***/
 80024b8:	bd08      	pop	{r3, pc}
	...

080024bc <VectorBase_Config>:
   * c-startup code.
   */
  extern const unsigned long g_pfnVectors[];

  /* Remap the vector table to where the vector table is located for this program. */
  SCB->VTOR = (unsigned long)&g_pfnVectors[0];
 80024bc:	4a01      	ldr	r2, [pc, #4]	; (80024c4 <VectorBase_Config+0x8>)
 80024be:	4b02      	ldr	r3, [pc, #8]	; (80024c8 <VectorBase_Config+0xc>)
 80024c0:	609a      	str	r2, [r3, #8]
}
 80024c2:	4770      	bx	lr
 80024c4:	08002000 	.word	0x08002000
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024cc:	b530      	push	{r4, r5, lr}
 80024ce:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	2400      	movs	r4, #0
 80024d2:	9403      	str	r4, [sp, #12]
 80024d4:	9404      	str	r4, [sp, #16]
 80024d6:	9405      	str	r4, [sp, #20]
 80024d8:	9406      	str	r4, [sp, #24]
 80024da:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024dc:	4b16      	ldr	r3, [pc, #88]	; (8002538 <MX_GPIO_Init+0x6c>)
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80024e4:	615a      	str	r2, [r3, #20]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80024ec:	9200      	str	r2, [sp, #0]
 80024ee:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80024f6:	615a      	str	r2, [r3, #20]
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80024fe:	9201      	str	r2, [sp, #4]
 8002500:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002508:	615a      	str	r2, [r3, #20]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002510:	9302      	str	r3, [sp, #8]
 8002512:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002514:	4d09      	ldr	r5, [pc, #36]	; (800253c <MX_GPIO_Init+0x70>)
 8002516:	4622      	mov	r2, r4
 8002518:	2108      	movs	r1, #8
 800251a:	4628      	mov	r0, r5
 800251c:	f000 fc88 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002520:	2308      	movs	r3, #8
 8002522:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002524:	2301      	movs	r3, #1
 8002526:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252c:	a903      	add	r1, sp, #12
 800252e:	4628      	mov	r0, r5
 8002530:	f000 fbba 	bl	8002ca8 <HAL_GPIO_Init>

}
 8002534:	b009      	add	sp, #36	; 0x24
 8002536:	bd30      	pop	{r4, r5, pc}
 8002538:	40021000 	.word	0x40021000
 800253c:	48000400 	.word	0x48000400

08002540 <SystemClock_Config>:
{
 8002540:	b530      	push	{r4, r5, lr}
 8002542:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002544:	2220      	movs	r2, #32
 8002546:	2100      	movs	r1, #0
 8002548:	a807      	add	r0, sp, #28
 800254a:	f001 fb8d 	bl	8003c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800254e:	2400      	movs	r4, #0
 8002550:	9401      	str	r4, [sp, #4]
 8002552:	9402      	str	r4, [sp, #8]
 8002554:	9403      	str	r4, [sp, #12]
 8002556:	9404      	str	r4, [sp, #16]
 8002558:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800255a:	2502      	movs	r5, #2
 800255c:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800255e:	2301      	movs	r3, #1
 8002560:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002562:	2310      	movs	r3, #16
 8002564:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002566:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002568:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800256c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800256e:	a806      	add	r0, sp, #24
 8002570:	f000 fc64 	bl	8002e3c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002574:	230f      	movs	r3, #15
 8002576:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002578:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800257a:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800257c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002580:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002582:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002584:	4629      	mov	r1, r5
 8002586:	a801      	add	r0, sp, #4
 8002588:	f000 ffb2 	bl	80034f0 <HAL_RCC_ClockConfig>
}
 800258c:	b011      	add	sp, #68	; 0x44
 800258e:	bd30      	pop	{r4, r5, pc}

08002590 <main>:
{
 8002590:	b508      	push	{r3, lr}
  VectorBase_Config();
 8002592:	f7ff ff93 	bl	80024bc <VectorBase_Config>
  HAL_Init();
 8002596:	f000 f907 	bl	80027a8 <HAL_Init>
  SystemClock_Config();
 800259a:	f7ff ffd1 	bl	8002540 <SystemClock_Config>
  MX_GPIO_Init();
 800259e:	f7ff ff95 	bl	80024cc <MX_GPIO_Init>
  AppInit();
 80025a2:	f7ff fe13 	bl	80021cc <AppInit>
    AppTask();
 80025a6:	f7ff fe19 	bl	80021dc <AppTask>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80025aa:	4c09      	ldr	r4, [pc, #36]	; (80025d0 <main+0x40>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	2108      	movs	r1, #8
 80025b0:	4620      	mov	r0, r4
 80025b2:	f000 fc3d 	bl	8002e30 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80025b6:	2064      	movs	r0, #100	; 0x64
 80025b8:	f000 f91a 	bl	80027f0 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80025bc:	2200      	movs	r2, #0
 80025be:	2108      	movs	r1, #8
 80025c0:	4620      	mov	r0, r4
 80025c2:	f000 fc35 	bl	8002e30 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80025c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025ca:	f000 f911 	bl	80027f0 <HAL_Delay>
 80025ce:	e7ea      	b.n	80025a6 <main+0x16>
 80025d0:	48000400 	.word	0x48000400

080025d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <HAL_MspInit+0x2c>)
 80025d8:	699a      	ldr	r2, [r3, #24]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	619a      	str	r2, [r3, #24]
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	f002 0201 	and.w	r2, r2, #1
 80025e6:	9200      	str	r2, [sp, #0]
 80025e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ea:	69da      	ldr	r2, [r3, #28]
 80025ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025f0:	61da      	str	r2, [r3, #28]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f8:	9301      	str	r3, [sp, #4]
 80025fa:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025fc:	b002      	add	sp, #8
 80025fe:	4770      	bx	lr
 8002600:	40021000 	.word	0x40021000

08002604 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002604:	b500      	push	{lr}
 8002606:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002608:	2300      	movs	r3, #0
 800260a:	9303      	str	r3, [sp, #12]
 800260c:	9304      	str	r3, [sp, #16]
 800260e:	9305      	str	r3, [sp, #20]
 8002610:	9306      	str	r3, [sp, #24]
 8002612:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN)
 8002614:	6802      	ldr	r2, [r0, #0]
 8002616:	4b14      	ldr	r3, [pc, #80]	; (8002668 <HAL_CAN_MspInit+0x64>)
 8002618:	429a      	cmp	r2, r3
 800261a:	d002      	beq.n	8002622 <HAL_CAN_MspInit+0x1e>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800261c:	b009      	add	sp, #36	; 0x24
 800261e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002622:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8002626:	69da      	ldr	r2, [r3, #28]
 8002628:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800262c:	61da      	str	r2, [r3, #28]
 800262e:	69da      	ldr	r2, [r3, #28]
 8002630:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002634:	9201      	str	r2, [sp, #4]
 8002636:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002638:	695a      	ldr	r2, [r3, #20]
 800263a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800263e:	615a      	str	r2, [r3, #20]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	9302      	str	r3, [sp, #8]
 8002648:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800264a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800264e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002650:	2302      	movs	r3, #2
 8002652:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002654:	2303      	movs	r3, #3
 8002656:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8002658:	2309      	movs	r3, #9
 800265a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265c:	a903      	add	r1, sp, #12
 800265e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002662:	f000 fb21 	bl	8002ca8 <HAL_GPIO_Init>
}
 8002666:	e7d9      	b.n	800261c <HAL_CAN_MspInit+0x18>
 8002668:	40006400 	.word	0x40006400

0800266c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800266c:	b500      	push	{lr}
 800266e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	2300      	movs	r3, #0
 8002672:	9303      	str	r3, [sp, #12]
 8002674:	9304      	str	r3, [sp, #16]
 8002676:	9305      	str	r3, [sp, #20]
 8002678:	9306      	str	r3, [sp, #24]
 800267a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 800267c:	6802      	ldr	r2, [r0, #0]
 800267e:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <HAL_UART_MspInit+0x64>)
 8002680:	429a      	cmp	r2, r3
 8002682:	d002      	beq.n	800268a <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002684:	b009      	add	sp, #36	; 0x24
 8002686:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800268a:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800268e:	69da      	ldr	r2, [r3, #28]
 8002690:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002694:	61da      	str	r2, [r3, #28]
 8002696:	69da      	ldr	r2, [r3, #28]
 8002698:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800269c:	9201      	str	r2, [sp, #4]
 800269e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80026a6:	615a      	str	r2, [r3, #20]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	9302      	str	r3, [sp, #8]
 80026b0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80026b2:	f248 0304 	movw	r3, #32772	; 0x8004
 80026b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026bc:	2303      	movs	r3, #3
 80026be:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026c0:	2307      	movs	r3, #7
 80026c2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c4:	a903      	add	r1, sp, #12
 80026c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ca:	f000 faed 	bl	8002ca8 <HAL_GPIO_Init>
}
 80026ce:	e7d9      	b.n	8002684 <HAL_UART_MspInit+0x18>
 80026d0:	40004400 	.word	0x40004400

080026d4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026d4:	4770      	bx	lr

080026d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026d6:	e7fe      	b.n	80026d6 <HardFault_Handler>

080026d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026d8:	e7fe      	b.n	80026d8 <MemManage_Handler>

080026da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026da:	e7fe      	b.n	80026da <BusFault_Handler>

080026dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026dc:	e7fe      	b.n	80026dc <UsageFault_Handler>

080026de <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026de:	4770      	bx	lr

080026e0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026e0:	4770      	bx	lr

080026e2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026e2:	4770      	bx	lr

080026e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026e6:	f000 f871 	bl	80027cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026ea:	bd08      	pop	{r3, pc}

080026ec <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <SystemInit+0x18>)
 80026ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80026f2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80026f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026fe:	609a      	str	r2, [r3, #8]
#endif
}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002740 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800270c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800270e:	e003      	b.n	8002718 <LoopCopyDataInit>

08002710 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002712:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002714:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002716:	3104      	adds	r1, #4

08002718 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002718:	480b      	ldr	r0, [pc, #44]	; (8002748 <LoopForever+0xa>)
	ldr	r3, =_edata
 800271a:	4b0c      	ldr	r3, [pc, #48]	; (800274c <LoopForever+0xe>)
	adds	r2, r0, r1
 800271c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800271e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002720:	d3f6      	bcc.n	8002710 <CopyDataInit>
	ldr	r2, =_sbss
 8002722:	4a0b      	ldr	r2, [pc, #44]	; (8002750 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002724:	e002      	b.n	800272c <LoopFillZerobss>

08002726 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002726:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002728:	f842 3b04 	str.w	r3, [r2], #4

0800272c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <LoopForever+0x16>)
	cmp	r2, r3
 800272e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002730:	d3f9      	bcc.n	8002726 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002732:	f7ff ffdb 	bl	80026ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002736:	f001 fa73 	bl	8003c20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800273a:	f7ff ff29 	bl	8002590 <main>

0800273e <LoopForever>:

LoopForever:
    b LoopForever
 800273e:	e7fe      	b.n	800273e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002740:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002744:	08003cf4 	.word	0x08003cf4
	ldr	r0, =_sdata
 8002748:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800274c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8002750:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8002754:	20000124 	.word	0x20000124

08002758 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002758:	e7fe      	b.n	8002758 <ADC1_2_IRQHandler>
	...

0800275c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800275c:	b510      	push	{r4, lr}
 800275e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002760:	4b0e      	ldr	r3, [pc, #56]	; (800279c <HAL_InitTick+0x40>)
 8002762:	7818      	ldrb	r0, [r3, #0]
 8002764:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002768:	fbb3 f3f0 	udiv	r3, r3, r0
 800276c:	4a0c      	ldr	r2, [pc, #48]	; (80027a0 <HAL_InitTick+0x44>)
 800276e:	6810      	ldr	r0, [r2, #0]
 8002770:	fbb0 f0f3 	udiv	r0, r0, r3
 8002774:	f000 fa82 	bl	8002c7c <HAL_SYSTICK_Config>
 8002778:	b968      	cbnz	r0, 8002796 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800277a:	2c0f      	cmp	r4, #15
 800277c:	d901      	bls.n	8002782 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800277e:	2001      	movs	r0, #1
 8002780:	e00a      	b.n	8002798 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002782:	2200      	movs	r2, #0
 8002784:	4621      	mov	r1, r4
 8002786:	f04f 30ff 	mov.w	r0, #4294967295
 800278a:	f000 fa43 	bl	8002c14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800278e:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <HAL_InitTick+0x48>)
 8002790:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 8002792:	2000      	movs	r0, #0
 8002794:	e000      	b.n	8002798 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002796:	2001      	movs	r0, #1
}
 8002798:	bd10      	pop	{r4, pc}
 800279a:	bf00      	nop
 800279c:	20000004 	.word	0x20000004
 80027a0:	20000000 	.word	0x20000000
 80027a4:	20000008 	.word	0x20000008

080027a8 <HAL_Init>:
{
 80027a8:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027aa:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <HAL_Init+0x20>)
 80027ac:	6813      	ldr	r3, [r2, #0]
 80027ae:	f043 0310 	orr.w	r3, r3, #16
 80027b2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b4:	2003      	movs	r0, #3
 80027b6:	f000 fa1b 	bl	8002bf0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ba:	2000      	movs	r0, #0
 80027bc:	f7ff ffce 	bl	800275c <HAL_InitTick>
  HAL_MspInit();
 80027c0:	f7ff ff08 	bl	80025d4 <HAL_MspInit>
}
 80027c4:	2000      	movs	r0, #0
 80027c6:	bd08      	pop	{r3, pc}
 80027c8:	40022000 	.word	0x40022000

080027cc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80027cc:	4a03      	ldr	r2, [pc, #12]	; (80027dc <HAL_IncTick+0x10>)
 80027ce:	6811      	ldr	r1, [r2, #0]
 80027d0:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <HAL_IncTick+0x14>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	440b      	add	r3, r1
 80027d6:	6013      	str	r3, [r2, #0]
}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000120 	.word	0x20000120
 80027e0:	20000004 	.word	0x20000004

080027e4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80027e4:	4b01      	ldr	r3, [pc, #4]	; (80027ec <HAL_GetTick+0x8>)
 80027e6:	6818      	ldr	r0, [r3, #0]
}
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	20000120 	.word	0x20000120

080027f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027f0:	b538      	push	{r3, r4, r5, lr}
 80027f2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80027f4:	f7ff fff6 	bl	80027e4 <HAL_GetTick>
 80027f8:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027fa:	f1b4 3fff 	cmp.w	r4, #4294967295
 80027fe:	d002      	beq.n	8002806 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002800:	4b04      	ldr	r3, [pc, #16]	; (8002814 <HAL_Delay+0x24>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002806:	f7ff ffed 	bl	80027e4 <HAL_GetTick>
 800280a:	1b40      	subs	r0, r0, r5
 800280c:	42a0      	cmp	r0, r4
 800280e:	d3fa      	bcc.n	8002806 <HAL_Delay+0x16>
  {
  }
}
 8002810:	bd38      	pop	{r3, r4, r5, pc}
 8002812:	bf00      	nop
 8002814:	20000004 	.word	0x20000004

08002818 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002818:	2800      	cmp	r0, #0
 800281a:	f000 80a1 	beq.w	8002960 <HAL_CAN_Init+0x148>
{
 800281e:	b538      	push	{r3, r4, r5, lr}
 8002820:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002822:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002826:	b1d3      	cbz	r3, 800285e <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002828:	6822      	ldr	r2, [r4, #0]
 800282a:	6813      	ldr	r3, [r2, #0]
 800282c:	f023 0302 	bic.w	r3, r3, #2
 8002830:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002832:	f7ff ffd7 	bl	80027e4 <HAL_GetTick>
 8002836:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002838:	6823      	ldr	r3, [r4, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	f012 0f02 	tst.w	r2, #2
 8002840:	d010      	beq.n	8002864 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002842:	f7ff ffcf 	bl	80027e4 <HAL_GetTick>
 8002846:	1b40      	subs	r0, r0, r5
 8002848:	280a      	cmp	r0, #10
 800284a:	d9f5      	bls.n	8002838 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800284c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800284e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002852:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002854:	2305      	movs	r3, #5
 8002856:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 800285a:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800285c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800285e:	f7ff fed1 	bl	8002604 <HAL_CAN_MspInit>
 8002862:	e7e1      	b.n	8002828 <HAL_CAN_Init+0x10>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800286c:	f7ff ffba 	bl	80027e4 <HAL_GetTick>
 8002870:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002872:	6823      	ldr	r3, [r4, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	f012 0f01 	tst.w	r2, #1
 800287a:	d10d      	bne.n	8002898 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800287c:	f7ff ffb2 	bl	80027e4 <HAL_GetTick>
 8002880:	1b40      	subs	r0, r0, r5
 8002882:	280a      	cmp	r0, #10
 8002884:	d9f5      	bls.n	8002872 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800288c:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800288e:	2305      	movs	r3, #5
 8002890:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8002894:	2001      	movs	r0, #1
 8002896:	e7e1      	b.n	800285c <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002898:	7e22      	ldrb	r2, [r4, #24]
 800289a:	2a01      	cmp	r2, #1
 800289c:	d03d      	beq.n	800291a <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028a4:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80028a6:	7e63      	ldrb	r3, [r4, #25]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d03b      	beq.n	8002924 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028ac:	6822      	ldr	r2, [r4, #0]
 80028ae:	6813      	ldr	r3, [r2, #0]
 80028b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028b4:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80028b6:	7ea3      	ldrb	r3, [r4, #26]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d039      	beq.n	8002930 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028bc:	6822      	ldr	r2, [r4, #0]
 80028be:	6813      	ldr	r3, [r2, #0]
 80028c0:	f023 0320 	bic.w	r3, r3, #32
 80028c4:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80028c6:	7ee3      	ldrb	r3, [r4, #27]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d037      	beq.n	800293c <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028cc:	6822      	ldr	r2, [r4, #0]
 80028ce:	6813      	ldr	r3, [r2, #0]
 80028d0:	f043 0310 	orr.w	r3, r3, #16
 80028d4:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80028d6:	7f23      	ldrb	r3, [r4, #28]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d035      	beq.n	8002948 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80028dc:	6822      	ldr	r2, [r4, #0]
 80028de:	6813      	ldr	r3, [r2, #0]
 80028e0:	f023 0308 	bic.w	r3, r3, #8
 80028e4:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80028e6:	7f63      	ldrb	r3, [r4, #29]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d033      	beq.n	8002954 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028ec:	6822      	ldr	r2, [r4, #0]
 80028ee:	6813      	ldr	r3, [r2, #0]
 80028f0:	f023 0304 	bic.w	r3, r3, #4
 80028f4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80028f6:	68a3      	ldr	r3, [r4, #8]
 80028f8:	68e2      	ldr	r2, [r4, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	6922      	ldr	r2, [r4, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	6962      	ldr	r2, [r4, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	6862      	ldr	r2, [r4, #4]
 8002906:	3a01      	subs	r2, #1
 8002908:	6821      	ldr	r1, [r4, #0]
 800290a:	4313      	orrs	r3, r2
 800290c:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800290e:	2000      	movs	r0, #0
 8002910:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8002912:	2301      	movs	r3, #1
 8002914:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8002918:	e7a0      	b.n	800285c <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e7c0      	b.n	80028a6 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002924:	6822      	ldr	r2, [r4, #0]
 8002926:	6813      	ldr	r3, [r2, #0]
 8002928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e7c2      	b.n	80028b6 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002930:	6822      	ldr	r2, [r4, #0]
 8002932:	6813      	ldr	r3, [r2, #0]
 8002934:	f043 0320 	orr.w	r3, r3, #32
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	e7c4      	b.n	80028c6 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800293c:	6822      	ldr	r2, [r4, #0]
 800293e:	6813      	ldr	r3, [r2, #0]
 8002940:	f023 0310 	bic.w	r3, r3, #16
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	e7c6      	b.n	80028d6 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002948:	6822      	ldr	r2, [r4, #0]
 800294a:	6813      	ldr	r3, [r2, #0]
 800294c:	f043 0308 	orr.w	r3, r3, #8
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e7c8      	b.n	80028e6 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002954:	6822      	ldr	r2, [r4, #0]
 8002956:	6813      	ldr	r3, [r2, #0]
 8002958:	f043 0304 	orr.w	r3, r3, #4
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	e7ca      	b.n	80028f6 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 8002960:	2001      	movs	r0, #1
}
 8002962:	4770      	bx	lr

08002964 <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002964:	6803      	ldr	r3, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002966:	f890 2020 	ldrb.w	r2, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 800296a:	3a01      	subs	r2, #1
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	2a01      	cmp	r2, #1
 8002970:	d905      	bls.n	800297e <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002972:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002978:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800297a:	2001      	movs	r0, #1
  }
}
 800297c:	4770      	bx	lr
{
 800297e:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002980:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002984:	f042 0201 	orr.w	r2, r2, #1
 8002988:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800298c:	694a      	ldr	r2, [r1, #20]
 800298e:	f002 021f 	and.w	r2, r2, #31
 8002992:	2001      	movs	r0, #1
 8002994:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002998:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 800299c:	43d0      	mvns	r0, r2
 800299e:	4004      	ands	r4, r0
 80029a0:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80029a4:	69cc      	ldr	r4, [r1, #28]
 80029a6:	b9ac      	cbnz	r4, 80029d4 <HAL_CAN_ConfigFilter+0x70>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80029a8:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 80029ac:	4004      	ands	r4, r0
 80029ae:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80029b2:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80029b4:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029b6:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80029b8:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029bc:	3448      	adds	r4, #72	; 0x48
 80029be:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029c2:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80029c4:	880d      	ldrh	r5, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029c6:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029c8:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029cc:	3448      	adds	r4, #72	; 0x48
 80029ce:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80029d2:	6065      	str	r5, [r4, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80029d4:	69cc      	ldr	r4, [r1, #28]
 80029d6:	2c01      	cmp	r4, #1
 80029d8:	d019      	beq.n	8002a0e <HAL_CAN_ConfigFilter+0xaa>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80029da:	698c      	ldr	r4, [r1, #24]
 80029dc:	bb74      	cbnz	r4, 8002a3c <HAL_CAN_ConfigFilter+0xd8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80029de:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80029e2:	4004      	ands	r4, r0
 80029e4:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80029e8:	690c      	ldr	r4, [r1, #16]
 80029ea:	bb6c      	cbnz	r4, 8002a48 <HAL_CAN_ConfigFilter+0xe4>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80029ec:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
 80029f0:	4020      	ands	r0, r4
 80029f2:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80029f6:	6a09      	ldr	r1, [r1, #32]
 80029f8:	2901      	cmp	r1, #1
 80029fa:	d02b      	beq.n	8002a54 <HAL_CAN_ConfigFilter+0xf0>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 8002a08:	2000      	movs	r0, #0
}
 8002a0a:	bc70      	pop	{r4, r5, r6}
 8002a0c:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002a0e:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 8002a12:	4314      	orrs	r4, r2
 8002a14:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a18:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a1a:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a1c:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a1e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a22:	3448      	adds	r4, #72	; 0x48
 8002a24:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a28:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002a2a:	898d      	ldrh	r5, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a2c:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a2e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a32:	3448      	adds	r4, #72	; 0x48
 8002a34:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8002a38:	6065      	str	r5, [r4, #4]
 8002a3a:	e7ce      	b.n	80029da <HAL_CAN_ConfigFilter+0x76>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002a3c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002a40:	4314      	orrs	r4, r2
 8002a42:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
 8002a46:	e7cf      	b.n	80029e8 <HAL_CAN_ConfigFilter+0x84>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a48:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8002a4c:	4310      	orrs	r0, r2
 8002a4e:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 8002a52:	e7d0      	b.n	80029f6 <HAL_CAN_ConfigFilter+0x92>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002a54:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8002a5e:	e7cd      	b.n	80029fc <HAL_CAN_ConfigFilter+0x98>

08002a60 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002a60:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002a62:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d005      	beq.n	8002a78 <HAL_CAN_Start+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a72:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002a74:	2001      	movs	r0, #1
  }
}
 8002a76:	bd38      	pop	{r3, r4, r5, pc}
 8002a78:	4604      	mov	r4, r0
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a80:	6802      	ldr	r2, [r0, #0]
 8002a82:	6813      	ldr	r3, [r2, #0]
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002a8a:	f7ff feab 	bl	80027e4 <HAL_GetTick>
 8002a8e:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f013 0f01 	tst.w	r3, #1
 8002a98:	d00d      	beq.n	8002ab6 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a9a:	f7ff fea3 	bl	80027e4 <HAL_GetTick>
 8002a9e:	1b40      	subs	r0, r0, r5
 8002aa0:	280a      	cmp	r0, #10
 8002aa2:	d9f5      	bls.n	8002a90 <HAL_CAN_Start+0x30>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002aa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aaa:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8002aac:	2305      	movs	r3, #5
 8002aae:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	e7df      	b.n	8002a76 <HAL_CAN_Start+0x16>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	6260      	str	r0, [r4, #36]	; 0x24
    return HAL_OK;
 8002aba:	e7dc      	b.n	8002a76 <HAL_CAN_Start+0x16>

08002abc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002abc:	b430      	push	{r4, r5}
  HAL_CAN_StateTypeDef state = hcan->State;
 8002abe:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ac2:	3c01      	subs	r4, #1
 8002ac4:	b2e4      	uxtb	r4, r4
 8002ac6:	2c01      	cmp	r4, #1
 8002ac8:	d906      	bls.n	8002ad8 <HAL_CAN_GetRxMessage+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002aca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad0:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002ad2:	2001      	movs	r0, #1
  }
}
 8002ad4:	bc30      	pop	{r4, r5}
 8002ad6:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ad8:	2900      	cmp	r1, #0
 8002ada:	d16f      	bne.n	8002bbc <HAL_CAN_GetRxMessage+0x100>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002adc:	6804      	ldr	r4, [r0, #0]
 8002ade:	68e4      	ldr	r4, [r4, #12]
 8002ae0:	f014 0f03 	tst.w	r4, #3
 8002ae4:	d064      	beq.n	8002bb0 <HAL_CAN_GetRxMessage+0xf4>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002ae6:	6805      	ldr	r5, [r0, #0]
 8002ae8:	f101 041b 	add.w	r4, r1, #27
 8002aec:	0124      	lsls	r4, r4, #4
 8002aee:	592c      	ldr	r4, [r5, r4]
 8002af0:	f004 0404 	and.w	r4, r4, #4
 8002af4:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002af6:	2c00      	cmp	r4, #0
 8002af8:	d16b      	bne.n	8002bd2 <HAL_CAN_GetRxMessage+0x116>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002afa:	6805      	ldr	r5, [r0, #0]
 8002afc:	f101 041b 	add.w	r4, r1, #27
 8002b00:	0124      	lsls	r4, r4, #4
 8002b02:	592c      	ldr	r4, [r5, r4]
 8002b04:	0d64      	lsrs	r4, r4, #21
 8002b06:	6014      	str	r4, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b08:	6805      	ldr	r5, [r0, #0]
 8002b0a:	f101 041b 	add.w	r4, r1, #27
 8002b0e:	0124      	lsls	r4, r4, #4
 8002b10:	592d      	ldr	r5, [r5, r4]
 8002b12:	f005 0502 	and.w	r5, r5, #2
 8002b16:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b18:	6805      	ldr	r5, [r0, #0]
 8002b1a:	4425      	add	r5, r4
 8002b1c:	686d      	ldr	r5, [r5, #4]
 8002b1e:	f005 050f 	and.w	r5, r5, #15
 8002b22:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002b24:	6805      	ldr	r5, [r0, #0]
 8002b26:	4425      	add	r5, r4
 8002b28:	686d      	ldr	r5, [r5, #4]
 8002b2a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8002b2e:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002b30:	6805      	ldr	r5, [r0, #0]
 8002b32:	442c      	add	r4, r5
 8002b34:	6864      	ldr	r4, [r4, #4]
 8002b36:	0c24      	lsrs	r4, r4, #16
 8002b38:	6154      	str	r4, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002b3a:	6804      	ldr	r4, [r0, #0]
 8002b3c:	010a      	lsls	r2, r1, #4
 8002b3e:	4414      	add	r4, r2
 8002b40:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8002b44:	701c      	strb	r4, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002b46:	6804      	ldr	r4, [r0, #0]
 8002b48:	4414      	add	r4, r2
 8002b4a:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8002b4e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8002b52:	705c      	strb	r4, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002b54:	6804      	ldr	r4, [r0, #0]
 8002b56:	4414      	add	r4, r2
 8002b58:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8002b5c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8002b60:	709c      	strb	r4, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002b62:	6804      	ldr	r4, [r0, #0]
 8002b64:	4414      	add	r4, r2
 8002b66:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8002b6a:	0e24      	lsrs	r4, r4, #24
 8002b6c:	70dc      	strb	r4, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002b6e:	6804      	ldr	r4, [r0, #0]
 8002b70:	4414      	add	r4, r2
 8002b72:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8002b76:	711c      	strb	r4, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002b78:	6804      	ldr	r4, [r0, #0]
 8002b7a:	4414      	add	r4, r2
 8002b7c:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8002b80:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8002b84:	715c      	strb	r4, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002b86:	6804      	ldr	r4, [r0, #0]
 8002b88:	4414      	add	r4, r2
 8002b8a:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8002b8e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8002b92:	719c      	strb	r4, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002b94:	6804      	ldr	r4, [r0, #0]
 8002b96:	4422      	add	r2, r4
 8002b98:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8002b9c:	0e12      	lsrs	r2, r2, #24
 8002b9e:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ba0:	b9f9      	cbnz	r1, 8002be2 <HAL_CAN_GetRxMessage+0x126>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002ba2:	6802      	ldr	r2, [r0, #0]
 8002ba4:	68d3      	ldr	r3, [r2, #12]
 8002ba6:	f043 0320 	orr.w	r3, r3, #32
 8002baa:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8002bac:	2000      	movs	r0, #0
 8002bae:	e791      	b.n	8002ad4 <HAL_CAN_GetRxMessage+0x18>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002bb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bb6:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8002bb8:	2001      	movs	r0, #1
 8002bba:	e78b      	b.n	8002ad4 <HAL_CAN_GetRxMessage+0x18>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002bbc:	6804      	ldr	r4, [r0, #0]
 8002bbe:	6924      	ldr	r4, [r4, #16]
 8002bc0:	f014 0f03 	tst.w	r4, #3
 8002bc4:	d18f      	bne.n	8002ae6 <HAL_CAN_GetRxMessage+0x2a>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bc6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002bc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bcc:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8002bce:	2001      	movs	r0, #1
 8002bd0:	e780      	b.n	8002ad4 <HAL_CAN_GetRxMessage+0x18>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002bd2:	6805      	ldr	r5, [r0, #0]
 8002bd4:	f101 041b 	add.w	r4, r1, #27
 8002bd8:	0124      	lsls	r4, r4, #4
 8002bda:	592c      	ldr	r4, [r5, r4]
 8002bdc:	08e4      	lsrs	r4, r4, #3
 8002bde:	6054      	str	r4, [r2, #4]
 8002be0:	e792      	b.n	8002b08 <HAL_CAN_GetRxMessage+0x4c>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002be2:	6802      	ldr	r2, [r0, #0]
 8002be4:	6913      	ldr	r3, [r2, #16]
 8002be6:	f043 0320 	orr.w	r3, r3, #32
 8002bea:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 8002bec:	2000      	movs	r0, #0
 8002bee:	e771      	b.n	8002ad4 <HAL_CAN_GetRxMessage+0x18>

08002bf0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf0:	4a07      	ldr	r2, [pc, #28]	; (8002c10 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002bf2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bf4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bf8:	041b      	lsls	r3, r3, #16
 8002bfa:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bfc:	0200      	lsls	r0, r0, #8
 8002bfe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c02:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8002c04:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8002c08:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002c0c:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002c0e:	4770      	bx	lr
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c14:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c16:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <HAL_NVIC_SetPriority+0x60>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c1e:	f1c3 0407 	rsb	r4, r3, #7
 8002c22:	2c04      	cmp	r4, #4
 8002c24:	bf28      	it	cs
 8002c26:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c28:	1d1d      	adds	r5, r3, #4
 8002c2a:	2d06      	cmp	r5, #6
 8002c2c:	d918      	bls.n	8002c60 <HAL_NVIC_SetPriority+0x4c>
 8002c2e:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c30:	f04f 35ff 	mov.w	r5, #4294967295
 8002c34:	fa05 f404 	lsl.w	r4, r5, r4
 8002c38:	ea21 0104 	bic.w	r1, r1, r4
 8002c3c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c3e:	fa05 f303 	lsl.w	r3, r5, r3
 8002c42:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c46:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	db0b      	blt.n	8002c64 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4c:	0109      	lsls	r1, r1, #4
 8002c4e:	b2c9      	uxtb	r1, r1
 8002c50:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002c54:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002c58:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002c5c:	bc30      	pop	{r4, r5}
 8002c5e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c60:	2300      	movs	r3, #0
 8002c62:	e7e5      	b.n	8002c30 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c64:	f000 000f 	and.w	r0, r0, #15
 8002c68:	0109      	lsls	r1, r1, #4
 8002c6a:	b2c9      	uxtb	r1, r1
 8002c6c:	4b02      	ldr	r3, [pc, #8]	; (8002c78 <HAL_NVIC_SetPriority+0x64>)
 8002c6e:	5419      	strb	r1, [r3, r0]
 8002c70:	e7f4      	b.n	8002c5c <HAL_NVIC_SetPriority+0x48>
 8002c72:	bf00      	nop
 8002c74:	e000ed00 	.word	0xe000ed00
 8002c78:	e000ed14 	.word	0xe000ed14

08002c7c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c7c:	3801      	subs	r0, #1
 8002c7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002c82:	d20a      	bcs.n	8002c9a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c84:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_SYSTICK_Config+0x24>)
 8002c86:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c88:	4a06      	ldr	r2, [pc, #24]	; (8002ca4 <HAL_SYSTICK_Config+0x28>)
 8002c8a:	21f0      	movs	r1, #240	; 0xf0
 8002c8c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c90:	2000      	movs	r0, #0
 8002c92:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c94:	2207      	movs	r2, #7
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002c9a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	e000e010 	.word	0xe000e010
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002caa:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8002cac:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cae:	e036      	b.n	8002d1e <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cb0:	2403      	movs	r4, #3
 8002cb2:	e000      	b.n	8002cb6 <HAL_GPIO_Init+0xe>
 8002cb4:	2400      	movs	r4, #0
 8002cb6:	40b4      	lsls	r4, r6
 8002cb8:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cba:	3502      	adds	r5, #2
 8002cbc:	4e58      	ldr	r6, [pc, #352]	; (8002e20 <HAL_GPIO_Init+0x178>)
 8002cbe:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cc2:	4c58      	ldr	r4, [pc, #352]	; (8002e24 <HAL_GPIO_Init+0x17c>)
 8002cc4:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002cc6:	43d4      	mvns	r4, r2
 8002cc8:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ccc:	684f      	ldr	r7, [r1, #4]
 8002cce:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002cd2:	d001      	beq.n	8002cd8 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8002cd4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8002cd8:	4d52      	ldr	r5, [pc, #328]	; (8002e24 <HAL_GPIO_Init+0x17c>)
 8002cda:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8002cdc:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002cde:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ce2:	684f      	ldr	r7, [r1, #4]
 8002ce4:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002ce8:	d001      	beq.n	8002cee <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8002cea:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8002cee:	4d4d      	ldr	r5, [pc, #308]	; (8002e24 <HAL_GPIO_Init+0x17c>)
 8002cf0:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cf2:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8002cf4:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cf8:	684f      	ldr	r7, [r1, #4]
 8002cfa:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002cfe:	d001      	beq.n	8002d04 <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 8002d00:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8002d04:	4d47      	ldr	r5, [pc, #284]	; (8002e24 <HAL_GPIO_Init+0x17c>)
 8002d06:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8002d08:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8002d0a:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d0c:	684e      	ldr	r6, [r1, #4]
 8002d0e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002d12:	d001      	beq.n	8002d18 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8002d14:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8002d18:	4a42      	ldr	r2, [pc, #264]	; (8002e24 <HAL_GPIO_Init+0x17c>)
 8002d1a:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8002d1c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d1e:	680a      	ldr	r2, [r1, #0]
 8002d20:	fa32 f403 	lsrs.w	r4, r2, r3
 8002d24:	d079      	beq.n	8002e1a <HAL_GPIO_Init+0x172>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d26:	2401      	movs	r4, #1
 8002d28:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8002d2a:	4022      	ands	r2, r4
 8002d2c:	d0f6      	beq.n	8002d1c <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d2e:	684d      	ldr	r5, [r1, #4]
 8002d30:	1e6e      	subs	r6, r5, #1
 8002d32:	2e01      	cmp	r6, #1
 8002d34:	d903      	bls.n	8002d3e <HAL_GPIO_Init+0x96>
 8002d36:	2d11      	cmp	r5, #17
 8002d38:	d001      	beq.n	8002d3e <HAL_GPIO_Init+0x96>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d3a:	2d12      	cmp	r5, #18
 8002d3c:	d112      	bne.n	8002d64 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR;
 8002d3e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d40:	005f      	lsls	r7, r3, #1
 8002d42:	2503      	movs	r5, #3
 8002d44:	40bd      	lsls	r5, r7
 8002d46:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d4a:	68cd      	ldr	r5, [r1, #12]
 8002d4c:	40bd      	lsls	r5, r7
 8002d4e:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8002d50:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8002d52:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d54:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002d58:	684d      	ldr	r5, [r1, #4]
 8002d5a:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8002d5e:	409c      	lsls	r4, r3
 8002d60:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8002d62:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8002d64:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d66:	005f      	lsls	r7, r3, #1
 8002d68:	2403      	movs	r4, #3
 8002d6a:	40bc      	lsls	r4, r7
 8002d6c:	43e4      	mvns	r4, r4
 8002d6e:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d70:	688e      	ldr	r6, [r1, #8]
 8002d72:	40be      	lsls	r6, r7
 8002d74:	432e      	orrs	r6, r5
      GPIOx->PUPDR = temp;
 8002d76:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d78:	684d      	ldr	r5, [r1, #4]
 8002d7a:	2d02      	cmp	r5, #2
 8002d7c:	d001      	beq.n	8002d82 <HAL_GPIO_Init+0xda>
 8002d7e:	2d12      	cmp	r5, #18
 8002d80:	d113      	bne.n	8002daa <HAL_GPIO_Init+0x102>
        temp = GPIOx->AFR[position >> 3u];
 8002d82:	08de      	lsrs	r6, r3, #3
 8002d84:	3608      	adds	r6, #8
 8002d86:	f850 e026 	ldr.w	lr, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d8a:	f003 0507 	and.w	r5, r3, #7
 8002d8e:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8002d92:	250f      	movs	r5, #15
 8002d94:	fa05 f50c 	lsl.w	r5, r5, ip
 8002d98:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d9c:	690d      	ldr	r5, [r1, #16]
 8002d9e:	fa05 f50c 	lsl.w	r5, r5, ip
 8002da2:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 8002da6:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8002daa:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002dac:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dae:	684d      	ldr	r5, [r1, #4]
 8002db0:	f005 0503 	and.w	r5, r5, #3
 8002db4:	40bd      	lsls	r5, r7
 8002db6:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8002db8:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dba:	684c      	ldr	r4, [r1, #4]
 8002dbc:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002dc0:	d0ac      	beq.n	8002d1c <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc2:	4c19      	ldr	r4, [pc, #100]	; (8002e28 <HAL_GPIO_Init+0x180>)
 8002dc4:	69a5      	ldr	r5, [r4, #24]
 8002dc6:	f045 0501 	orr.w	r5, r5, #1
 8002dca:	61a5      	str	r5, [r4, #24]
 8002dcc:	69a4      	ldr	r4, [r4, #24]
 8002dce:	f004 0401 	and.w	r4, r4, #1
 8002dd2:	9401      	str	r4, [sp, #4]
 8002dd4:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002dd6:	089d      	lsrs	r5, r3, #2
 8002dd8:	1cae      	adds	r6, r5, #2
 8002dda:	4c11      	ldr	r4, [pc, #68]	; (8002e20 <HAL_GPIO_Init+0x178>)
 8002ddc:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002de0:	f003 0403 	and.w	r4, r3, #3
 8002de4:	00a6      	lsls	r6, r4, #2
 8002de6:	240f      	movs	r4, #15
 8002de8:	40b4      	lsls	r4, r6
 8002dea:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002dee:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002df2:	f43f af5f 	beq.w	8002cb4 <HAL_GPIO_Init+0xc>
 8002df6:	4c0d      	ldr	r4, [pc, #52]	; (8002e2c <HAL_GPIO_Init+0x184>)
 8002df8:	42a0      	cmp	r0, r4
 8002dfa:	d00a      	beq.n	8002e12 <HAL_GPIO_Init+0x16a>
 8002dfc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e00:	42a0      	cmp	r0, r4
 8002e02:	d008      	beq.n	8002e16 <HAL_GPIO_Init+0x16e>
 8002e04:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002e08:	42a0      	cmp	r0, r4
 8002e0a:	f43f af51 	beq.w	8002cb0 <HAL_GPIO_Init+0x8>
 8002e0e:	2405      	movs	r4, #5
 8002e10:	e751      	b.n	8002cb6 <HAL_GPIO_Init+0xe>
 8002e12:	2401      	movs	r4, #1
 8002e14:	e74f      	b.n	8002cb6 <HAL_GPIO_Init+0xe>
 8002e16:	2402      	movs	r4, #2
 8002e18:	e74d      	b.n	8002cb6 <HAL_GPIO_Init+0xe>
  }
}
 8002e1a:	b003      	add	sp, #12
 8002e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40010000 	.word	0x40010000
 8002e24:	40010400 	.word	0x40010400
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	48000400 	.word	0x48000400

08002e30 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e30:	b90a      	cbnz	r2, 8002e36 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e32:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002e34:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e36:	6181      	str	r1, [r0, #24]
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e3c:	2800      	cmp	r0, #0
 8002e3e:	f000 830d 	beq.w	800345c <HAL_RCC_OscConfig+0x620>
{
 8002e42:	b570      	push	{r4, r5, r6, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e48:	6803      	ldr	r3, [r0, #0]
 8002e4a:	f013 0f01 	tst.w	r3, #1
 8002e4e:	d03b      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e50:	4bb5      	ldr	r3, [pc, #724]	; (8003128 <HAL_RCC_OscConfig+0x2ec>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 030c 	and.w	r3, r3, #12
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d01e      	beq.n	8002e9a <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e5c:	4bb2      	ldr	r3, [pc, #712]	; (8003128 <HAL_RCC_OscConfig+0x2ec>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 030c 	and.w	r3, r3, #12
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d013      	beq.n	8002e90 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e68:	6863      	ldr	r3, [r4, #4]
 8002e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6e:	d068      	beq.n	8002f42 <HAL_RCC_OscConfig+0x106>
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f040 8092 	bne.w	8002f9a <HAL_RCC_OscConfig+0x15e>
 8002e76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e7a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	e05d      	b.n	8002f4c <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e90:	4ba5      	ldr	r3, [pc, #660]	; (8003128 <HAL_RCC_OscConfig+0x2ec>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002e98:	d0e6      	beq.n	8002e68 <HAL_RCC_OscConfig+0x2c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e9e:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea2:	4ba1      	ldr	r3, [pc, #644]	; (8003128 <HAL_RCC_OscConfig+0x2ec>)
 8002ea4:	6819      	ldr	r1, [r3, #0]
 8002ea6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	420b      	tst	r3, r1
 8002ebe:	d003      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x8c>
 8002ec0:	6863      	ldr	r3, [r4, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 82cc 	beq.w	8003460 <HAL_RCC_OscConfig+0x624>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	f013 0f02 	tst.w	r3, #2
 8002ece:	f000 80c6 	beq.w	800305e <HAL_RCC_OscConfig+0x222>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ed2:	4b95      	ldr	r3, [pc, #596]	; (8003128 <HAL_RCC_OscConfig+0x2ec>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f013 0f0c 	tst.w	r3, #12
 8002eda:	f000 809c 	beq.w	8003016 <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ede:	4b92      	ldr	r3, [pc, #584]	; (8003128 <HAL_RCC_OscConfig+0x2ec>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	f000 808f 	beq.w	800300a <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eec:	6923      	ldr	r3, [r4, #16]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 80f3 	beq.w	80030da <HAL_RCC_OscConfig+0x29e>
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0a:	f7ff fc6b 	bl	80027e4 <HAL_GetTick>
 8002f0e:	4605      	mov	r5, r0
 8002f10:	2302      	movs	r3, #2
 8002f12:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f16:	4b84      	ldr	r3, [pc, #528]	; (8003128 <HAL_RCC_OscConfig+0x2ec>)
 8002f18:	6819      	ldr	r1, [r3, #0]
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	fa93 f3a3 	rbit	r3, r3
 8002f20:	fab3 f383 	clz	r3, r3
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	2201      	movs	r2, #1
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	420b      	tst	r3, r1
 8002f30:	f040 80c4 	bne.w	80030bc <HAL_RCC_OscConfig+0x280>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f34:	f7ff fc56 	bl	80027e4 <HAL_GetTick>
 8002f38:	1b40      	subs	r0, r0, r5
 8002f3a:	2802      	cmp	r0, #2
 8002f3c:	d9e8      	bls.n	8002f10 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8002f3e:	2003      	movs	r0, #3
 8002f40:	e295      	b.n	800346e <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f42:	4a79      	ldr	r2, [pc, #484]	; (8003128 <HAL_RCC_OscConfig+0x2ec>)
 8002f44:	6813      	ldr	r3, [r2, #0]
 8002f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4a:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f4c:	4a76      	ldr	r2, [pc, #472]	; (8003128 <HAL_RCC_OscConfig+0x2ec>)
 8002f4e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002f50:	f023 030f 	bic.w	r3, r3, #15
 8002f54:	68a1      	ldr	r1, [r4, #8]
 8002f56:	430b      	orrs	r3, r1
 8002f58:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f5a:	6863      	ldr	r3, [r4, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d036      	beq.n	8002fce <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8002f60:	f7ff fc40 	bl	80027e4 <HAL_GetTick>
 8002f64:	4605      	mov	r5, r0
 8002f66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f6a:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	4b6e      	ldr	r3, [pc, #440]	; (8003128 <HAL_RCC_OscConfig+0x2ec>)
 8002f70:	6819      	ldr	r1, [r3, #0]
 8002f72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	fab3 f383 	clz	r3, r3
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	2201      	movs	r2, #1
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	420b      	tst	r3, r1
 8002f8a:	d19d      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7ff fc2a 	bl	80027e4 <HAL_GetTick>
 8002f90:	1b40      	subs	r0, r0, r5
 8002f92:	2864      	cmp	r0, #100	; 0x64
 8002f94:	d9e7      	bls.n	8002f66 <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8002f96:	2003      	movs	r0, #3
 8002f98:	e269      	b.n	800346e <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f9e:	d009      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x178>
 8002fa0:	4b61      	ldr	r3, [pc, #388]	; (8003128 <HAL_RCC_OscConfig+0x2ec>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	e7cb      	b.n	8002f4c <HAL_RCC_OscConfig+0x110>
 8002fb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fb8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	e7be      	b.n	8002f4c <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8002fce:	f7ff fc09 	bl	80027e4 <HAL_GetTick>
 8002fd2:	4605      	mov	r5, r0
 8002fd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fd8:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fdc:	4b52      	ldr	r3, [pc, #328]	; (8003128 <HAL_RCC_OscConfig+0x2ec>)
 8002fde:	6819      	ldr	r1, [r3, #0]
 8002fe0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fe4:	fa93 f3a3 	rbit	r3, r3
 8002fe8:	fab3 f383 	clz	r3, r3
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	420b      	tst	r3, r1
 8002ff8:	f43f af66 	beq.w	8002ec8 <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ffc:	f7ff fbf2 	bl	80027e4 <HAL_GetTick>
 8003000:	1b40      	subs	r0, r0, r5
 8003002:	2864      	cmp	r0, #100	; 0x64
 8003004:	d9e6      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8003006:	2003      	movs	r0, #3
 8003008:	e231      	b.n	800346e <HAL_RCC_OscConfig+0x632>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800300a:	4b47      	ldr	r3, [pc, #284]	; (8003128 <HAL_RCC_OscConfig+0x2ec>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003012:	f47f af6b 	bne.w	8002eec <HAL_RCC_OscConfig+0xb0>
 8003016:	2302      	movs	r3, #2
 8003018:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301c:	4b42      	ldr	r3, [pc, #264]	; (8003128 <HAL_RCC_OscConfig+0x2ec>)
 800301e:	6819      	ldr	r1, [r3, #0]
 8003020:	2302      	movs	r3, #2
 8003022:	fa93 f3a3 	rbit	r3, r3
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	2201      	movs	r2, #1
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	420b      	tst	r3, r1
 8003036:	d004      	beq.n	8003042 <HAL_RCC_OscConfig+0x206>
 8003038:	6923      	ldr	r3, [r4, #16]
 800303a:	4293      	cmp	r3, r2
 800303c:	d001      	beq.n	8003042 <HAL_RCC_OscConfig+0x206>
        return HAL_ERROR;
 800303e:	2001      	movs	r0, #1
 8003040:	e215      	b.n	800346e <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003042:	4839      	ldr	r0, [pc, #228]	; (8003128 <HAL_RCC_OscConfig+0x2ec>)
 8003044:	6803      	ldr	r3, [r0, #0]
 8003046:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800304a:	6961      	ldr	r1, [r4, #20]
 800304c:	22f8      	movs	r2, #248	; 0xf8
 800304e:	fa92 f2a2 	rbit	r2, r2
 8003052:	fab2 f282 	clz	r2, r2
 8003056:	fa01 f202 	lsl.w	r2, r1, r2
 800305a:	4313      	orrs	r3, r2
 800305c:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	f013 0f08 	tst.w	r3, #8
 8003064:	f000 808c 	beq.w	8003180 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003068:	69a3      	ldr	r3, [r4, #24]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d060      	beq.n	8003130 <HAL_RCC_OscConfig+0x2f4>
 800306e:	2101      	movs	r1, #1
 8003070:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003074:	fab2 f282 	clz	r2, r2
 8003078:	4b2c      	ldr	r3, [pc, #176]	; (800312c <HAL_RCC_OscConfig+0x2f0>)
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003080:	f7ff fbb0 	bl	80027e4 <HAL_GetTick>
 8003084:	4605      	mov	r5, r0
 8003086:	2302      	movs	r3, #2
 8003088:	fa93 f2a3 	rbit	r2, r3
 800308c:	fa93 f2a3 	rbit	r2, r3
 8003090:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003094:	4a24      	ldr	r2, [pc, #144]	; (8003128 <HAL_RCC_OscConfig+0x2ec>)
 8003096:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	fab3 f383 	clz	r3, r3
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	2201      	movs	r2, #1
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	420b      	tst	r3, r1
 80030ac:	d168      	bne.n	8003180 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ae:	f7ff fb99 	bl	80027e4 <HAL_GetTick>
 80030b2:	1b40      	subs	r0, r0, r5
 80030b4:	2802      	cmp	r0, #2
 80030b6:	d9e6      	bls.n	8003086 <HAL_RCC_OscConfig+0x24a>
        {
          return HAL_TIMEOUT;
 80030b8:	2003      	movs	r0, #3
 80030ba:	e1d8      	b.n	800346e <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030bc:	481a      	ldr	r0, [pc, #104]	; (8003128 <HAL_RCC_OscConfig+0x2ec>)
 80030be:	6803      	ldr	r3, [r0, #0]
 80030c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80030c4:	6961      	ldr	r1, [r4, #20]
 80030c6:	22f8      	movs	r2, #248	; 0xf8
 80030c8:	fa92 f2a2 	rbit	r2, r2
 80030cc:	fab2 f282 	clz	r2, r2
 80030d0:	fa01 f202 	lsl.w	r2, r1, r2
 80030d4:	4313      	orrs	r3, r2
 80030d6:	6003      	str	r3, [r0, #0]
 80030d8:	e7c1      	b.n	800305e <HAL_RCC_OscConfig+0x222>
 80030da:	2301      	movs	r3, #1
 80030dc:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 80030e0:	fab3 f383 	clz	r3, r3
 80030e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80030f2:	f7ff fb77 	bl	80027e4 <HAL_GetTick>
 80030f6:	4605      	mov	r5, r0
 80030f8:	2302      	movs	r3, #2
 80030fa:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fe:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <HAL_RCC_OscConfig+0x2ec>)
 8003100:	6819      	ldr	r1, [r3, #0]
 8003102:	2302      	movs	r3, #2
 8003104:	fa93 f3a3 	rbit	r3, r3
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	f003 031f 	and.w	r3, r3, #31
 8003110:	2201      	movs	r2, #1
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	420b      	tst	r3, r1
 8003118:	d0a1      	beq.n	800305e <HAL_RCC_OscConfig+0x222>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800311a:	f7ff fb63 	bl	80027e4 <HAL_GetTick>
 800311e:	1b40      	subs	r0, r0, r5
 8003120:	2802      	cmp	r0, #2
 8003122:	d9e9      	bls.n	80030f8 <HAL_RCC_OscConfig+0x2bc>
            return HAL_TIMEOUT;
 8003124:	2003      	movs	r0, #3
 8003126:	e1a2      	b.n	800346e <HAL_RCC_OscConfig+0x632>
 8003128:	40021000 	.word	0x40021000
 800312c:	10908120 	.word	0x10908120
 8003130:	2201      	movs	r2, #1
 8003132:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003136:	fab2 f282 	clz	r2, r2
 800313a:	4bbc      	ldr	r3, [pc, #752]	; (800342c <HAL_RCC_OscConfig+0x5f0>)
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003144:	f7ff fb4e 	bl	80027e4 <HAL_GetTick>
 8003148:	4605      	mov	r5, r0
 800314a:	2302      	movs	r3, #2
 800314c:	fa93 f2a3 	rbit	r2, r3
 8003150:	fa93 f2a3 	rbit	r2, r3
 8003154:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003158:	4ab5      	ldr	r2, [pc, #724]	; (8003430 <HAL_RCC_OscConfig+0x5f4>)
 800315a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	fab3 f383 	clz	r3, r3
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	2201      	movs	r2, #1
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	420b      	tst	r3, r1
 8003170:	d006      	beq.n	8003180 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003172:	f7ff fb37 	bl	80027e4 <HAL_GetTick>
 8003176:	1b40      	subs	r0, r0, r5
 8003178:	2802      	cmp	r0, #2
 800317a:	d9e6      	bls.n	800314a <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 800317c:	2003      	movs	r0, #3
 800317e:	e176      	b.n	800346e <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	f013 0f04 	tst.w	r3, #4
 8003186:	f000 80b3 	beq.w	80032f0 <HAL_RCC_OscConfig+0x4b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800318a:	4ba9      	ldr	r3, [pc, #676]	; (8003430 <HAL_RCC_OscConfig+0x5f4>)
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003192:	d120      	bne.n	80031d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003194:	4ba6      	ldr	r3, [pc, #664]	; (8003430 <HAL_RCC_OscConfig+0x5f4>)
 8003196:	69da      	ldr	r2, [r3, #28]
 8003198:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800319c:	61da      	str	r2, [r3, #28]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a4:	9301      	str	r3, [sp, #4]
 80031a6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80031a8:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031aa:	4ba2      	ldr	r3, [pc, #648]	; (8003434 <HAL_RCC_OscConfig+0x5f8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f413 7f80 	tst.w	r3, #256	; 0x100
 80031b2:	d012      	beq.n	80031da <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b4:	68e3      	ldr	r3, [r4, #12]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d023      	beq.n	8003202 <HAL_RCC_OscConfig+0x3c6>
 80031ba:	bb73      	cbnz	r3, 800321a <HAL_RCC_OscConfig+0x3de>
 80031bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031c0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80031c4:	6a1a      	ldr	r2, [r3, #32]
 80031c6:	f022 0201 	bic.w	r2, r2, #1
 80031ca:	621a      	str	r2, [r3, #32]
 80031cc:	6a1a      	ldr	r2, [r3, #32]
 80031ce:	f022 0204 	bic.w	r2, r2, #4
 80031d2:	621a      	str	r2, [r3, #32]
 80031d4:	e01a      	b.n	800320c <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 80031d6:	2500      	movs	r5, #0
 80031d8:	e7e7      	b.n	80031aa <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031da:	4a96      	ldr	r2, [pc, #600]	; (8003434 <HAL_RCC_OscConfig+0x5f8>)
 80031dc:	6813      	ldr	r3, [r2, #0]
 80031de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80031e4:	f7ff fafe 	bl	80027e4 <HAL_GetTick>
 80031e8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ea:	4b92      	ldr	r3, [pc, #584]	; (8003434 <HAL_RCC_OscConfig+0x5f8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f413 7f80 	tst.w	r3, #256	; 0x100
 80031f2:	d1df      	bne.n	80031b4 <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f4:	f7ff faf6 	bl	80027e4 <HAL_GetTick>
 80031f8:	1b80      	subs	r0, r0, r6
 80031fa:	2864      	cmp	r0, #100	; 0x64
 80031fc:	d9f5      	bls.n	80031ea <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 80031fe:	2003      	movs	r0, #3
 8003200:	e135      	b.n	800346e <HAL_RCC_OscConfig+0x632>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003202:	4a8b      	ldr	r2, [pc, #556]	; (8003430 <HAL_RCC_OscConfig+0x5f4>)
 8003204:	6a13      	ldr	r3, [r2, #32]
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800320c:	68e3      	ldr	r3, [r4, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d041      	beq.n	8003296 <HAL_RCC_OscConfig+0x45a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003212:	f7ff fae7 	bl	80027e4 <HAL_GetTick>
 8003216:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003218:	e02b      	b.n	8003272 <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800321a:	2b05      	cmp	r3, #5
 800321c:	d009      	beq.n	8003232 <HAL_RCC_OscConfig+0x3f6>
 800321e:	4b84      	ldr	r3, [pc, #528]	; (8003430 <HAL_RCC_OscConfig+0x5f4>)
 8003220:	6a1a      	ldr	r2, [r3, #32]
 8003222:	f022 0201 	bic.w	r2, r2, #1
 8003226:	621a      	str	r2, [r3, #32]
 8003228:	6a1a      	ldr	r2, [r3, #32]
 800322a:	f022 0204 	bic.w	r2, r2, #4
 800322e:	621a      	str	r2, [r3, #32]
 8003230:	e7ec      	b.n	800320c <HAL_RCC_OscConfig+0x3d0>
 8003232:	4b7f      	ldr	r3, [pc, #508]	; (8003430 <HAL_RCC_OscConfig+0x5f4>)
 8003234:	6a1a      	ldr	r2, [r3, #32]
 8003236:	f042 0204 	orr.w	r2, r2, #4
 800323a:	621a      	str	r2, [r3, #32]
 800323c:	6a1a      	ldr	r2, [r3, #32]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	621a      	str	r2, [r3, #32]
 8003244:	e7e2      	b.n	800320c <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003246:	4b7a      	ldr	r3, [pc, #488]	; (8003430 <HAL_RCC_OscConfig+0x5f4>)
 8003248:	6a19      	ldr	r1, [r3, #32]
 800324a:	2302      	movs	r3, #2
 800324c:	fa93 f3a3 	rbit	r3, r3
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	2201      	movs	r2, #1
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	4219      	tst	r1, r3
 8003260:	d145      	bne.n	80032ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003262:	f7ff fabf 	bl	80027e4 <HAL_GetTick>
 8003266:	1b80      	subs	r0, r0, r6
 8003268:	f241 3388 	movw	r3, #5000	; 0x1388
 800326c:	4298      	cmp	r0, r3
 800326e:	f200 80f9 	bhi.w	8003464 <HAL_RCC_OscConfig+0x628>
 8003272:	2302      	movs	r3, #2
 8003274:	fa93 f2a3 	rbit	r2, r3
 8003278:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327c:	fab3 f383 	clz	r3, r3
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	f043 0302 	orr.w	r3, r3, #2
 8003286:	2b02      	cmp	r3, #2
 8003288:	d0dd      	beq.n	8003246 <HAL_RCC_OscConfig+0x40a>
 800328a:	2302      	movs	r3, #2
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	4b67      	ldr	r3, [pc, #412]	; (8003430 <HAL_RCC_OscConfig+0x5f4>)
 8003292:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003294:	e7d9      	b.n	800324a <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003296:	f7ff faa5 	bl	80027e4 <HAL_GetTick>
 800329a:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329c:	e015      	b.n	80032ca <HAL_RCC_OscConfig+0x48e>
 800329e:	4b64      	ldr	r3, [pc, #400]	; (8003430 <HAL_RCC_OscConfig+0x5f4>)
 80032a0:	6a19      	ldr	r1, [r3, #32]
 80032a2:	2302      	movs	r3, #2
 80032a4:	fa93 f3a3 	rbit	r3, r3
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	2201      	movs	r2, #1
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	4219      	tst	r1, r3
 80032b8:	d019      	beq.n	80032ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ba:	f7ff fa93 	bl	80027e4 <HAL_GetTick>
 80032be:	1b80      	subs	r0, r0, r6
 80032c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80032c4:	4298      	cmp	r0, r3
 80032c6:	f200 80cf 	bhi.w	8003468 <HAL_RCC_OscConfig+0x62c>
 80032ca:	2302      	movs	r3, #2
 80032cc:	fa93 f2a3 	rbit	r2, r3
 80032d0:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d4:	fab3 f383 	clz	r3, r3
 80032d8:	095b      	lsrs	r3, r3, #5
 80032da:	f043 0302 	orr.w	r3, r3, #2
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d0dd      	beq.n	800329e <HAL_RCC_OscConfig+0x462>
 80032e2:	2302      	movs	r3, #2
 80032e4:	fa93 f3a3 	rbit	r3, r3
 80032e8:	4b51      	ldr	r3, [pc, #324]	; (8003430 <HAL_RCC_OscConfig+0x5f4>)
 80032ea:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032ec:	e7d9      	b.n	80032a2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032ee:	bbb5      	cbnz	r5, 800335e <HAL_RCC_OscConfig+0x522>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032f0:	69e3      	ldr	r3, [r4, #28]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 80ba 	beq.w	800346c <HAL_RCC_OscConfig+0x630>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032f8:	4a4d      	ldr	r2, [pc, #308]	; (8003430 <HAL_RCC_OscConfig+0x5f4>)
 80032fa:	6852      	ldr	r2, [r2, #4]
 80032fc:	f002 020c 	and.w	r2, r2, #12
 8003300:	2a08      	cmp	r2, #8
 8003302:	f000 8099 	beq.w	8003438 <HAL_RCC_OscConfig+0x5fc>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003306:	2b02      	cmp	r3, #2
 8003308:	d02f      	beq.n	800336a <HAL_RCC_OscConfig+0x52e>
 800330a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800330e:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800331a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003324:	f7ff fa5e 	bl	80027e4 <HAL_GetTick>
 8003328:	4604      	mov	r4, r0
 800332a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800332e:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003332:	4b3f      	ldr	r3, [pc, #252]	; (8003430 <HAL_RCC_OscConfig+0x5f4>)
 8003334:	6819      	ldr	r1, [r3, #0]
 8003336:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800333a:	fa93 f3a3 	rbit	r3, r3
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	f003 031f 	and.w	r3, r3, #31
 8003346:	2201      	movs	r2, #1
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	4219      	tst	r1, r3
 800334e:	d06b      	beq.n	8003428 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003350:	f7ff fa48 	bl	80027e4 <HAL_GetTick>
 8003354:	1b00      	subs	r0, r0, r4
 8003356:	2802      	cmp	r0, #2
 8003358:	d9e7      	bls.n	800332a <HAL_RCC_OscConfig+0x4ee>
          {
            return HAL_TIMEOUT;
 800335a:	2003      	movs	r0, #3
 800335c:	e087      	b.n	800346e <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PWR_CLK_DISABLE();
 800335e:	4a34      	ldr	r2, [pc, #208]	; (8003430 <HAL_RCC_OscConfig+0x5f4>)
 8003360:	69d3      	ldr	r3, [r2, #28]
 8003362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003366:	61d3      	str	r3, [r2, #28]
 8003368:	e7c2      	b.n	80032f0 <HAL_RCC_OscConfig+0x4b4>
 800336a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800336e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800337a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003384:	f7ff fa2e 	bl	80027e4 <HAL_GetTick>
 8003388:	4605      	mov	r5, r0
 800338a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800338e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003392:	4b27      	ldr	r3, [pc, #156]	; (8003430 <HAL_RCC_OscConfig+0x5f4>)
 8003394:	6819      	ldr	r1, [r3, #0]
 8003396:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	fab3 f383 	clz	r3, r3
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	2201      	movs	r2, #1
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	4219      	tst	r1, r3
 80033ae:	d006      	beq.n	80033be <HAL_RCC_OscConfig+0x582>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b0:	f7ff fa18 	bl	80027e4 <HAL_GetTick>
 80033b4:	1b40      	subs	r0, r0, r5
 80033b6:	2802      	cmp	r0, #2
 80033b8:	d9e7      	bls.n	800338a <HAL_RCC_OscConfig+0x54e>
            return HAL_TIMEOUT;
 80033ba:	2003      	movs	r0, #3
 80033bc:	e057      	b.n	800346e <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033be:	491c      	ldr	r1, [pc, #112]	; (8003430 <HAL_RCC_OscConfig+0x5f4>)
 80033c0:	684b      	ldr	r3, [r1, #4]
 80033c2:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80033c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80033c8:	6a20      	ldr	r0, [r4, #32]
 80033ca:	4302      	orrs	r2, r0
 80033cc:	4313      	orrs	r3, r2
 80033ce:	604b      	str	r3, [r1, #4]
 80033d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033d4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80033d8:	fab3 f383 	clz	r3, r3
 80033dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	2201      	movs	r2, #1
 80033e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80033ea:	f7ff f9fb 	bl	80027e4 <HAL_GetTick>
 80033ee:	4604      	mov	r4, r0
 80033f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033f4:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033f8:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <HAL_RCC_OscConfig+0x5f4>)
 80033fa:	6819      	ldr	r1, [r3, #0]
 80033fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003400:	fa93 f3a3 	rbit	r3, r3
 8003404:	fab3 f383 	clz	r3, r3
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	2201      	movs	r2, #1
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	4219      	tst	r1, r3
 8003414:	d106      	bne.n	8003424 <HAL_RCC_OscConfig+0x5e8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003416:	f7ff f9e5 	bl	80027e4 <HAL_GetTick>
 800341a:	1b00      	subs	r0, r0, r4
 800341c:	2802      	cmp	r0, #2
 800341e:	d9e7      	bls.n	80033f0 <HAL_RCC_OscConfig+0x5b4>
            return HAL_TIMEOUT;
 8003420:	2003      	movs	r0, #3
 8003422:	e024      	b.n	800346e <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }

  return HAL_OK;
 8003424:	2000      	movs	r0, #0
 8003426:	e022      	b.n	800346e <HAL_RCC_OscConfig+0x632>
 8003428:	2000      	movs	r0, #0
 800342a:	e020      	b.n	800346e <HAL_RCC_OscConfig+0x632>
 800342c:	10908120 	.word	0x10908120
 8003430:	40021000 	.word	0x40021000
 8003434:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003438:	2b01      	cmp	r3, #1
 800343a:	d01a      	beq.n	8003472 <HAL_RCC_OscConfig+0x636>
        pll_config = RCC->CFGR;
 800343c:	4b0f      	ldr	r3, [pc, #60]	; (800347c <HAL_RCC_OscConfig+0x640>)
 800343e:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003440:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003444:	6a22      	ldr	r2, [r4, #32]
 8003446:	4291      	cmp	r1, r2
 8003448:	d001      	beq.n	800344e <HAL_RCC_OscConfig+0x612>
          return HAL_ERROR;
 800344a:	2001      	movs	r0, #1
 800344c:	e00f      	b.n	800346e <HAL_RCC_OscConfig+0x632>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800344e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003452:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003454:	4293      	cmp	r3, r2
 8003456:	d00e      	beq.n	8003476 <HAL_RCC_OscConfig+0x63a>
          return HAL_ERROR;
 8003458:	2001      	movs	r0, #1
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x632>
    return HAL_ERROR;
 800345c:	2001      	movs	r0, #1
}
 800345e:	4770      	bx	lr
        return HAL_ERROR;
 8003460:	2001      	movs	r0, #1
 8003462:	e004      	b.n	800346e <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 8003464:	2003      	movs	r0, #3
 8003466:	e002      	b.n	800346e <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 8003468:	2003      	movs	r0, #3
 800346a:	e000      	b.n	800346e <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 800346c:	2000      	movs	r0, #0
}
 800346e:	b002      	add	sp, #8
 8003470:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003472:	2001      	movs	r0, #1
 8003474:	e7fb      	b.n	800346e <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 8003476:	2000      	movs	r0, #0
 8003478:	e7f9      	b.n	800346e <HAL_RCC_OscConfig+0x632>
 800347a:	bf00      	nop
 800347c:	40021000 	.word	0x40021000

08003480 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8003480:	4b16      	ldr	r3, [pc, #88]	; (80034dc <HAL_RCC_GetSysClockFreq+0x5c>)
 8003482:	6859      	ldr	r1, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003484:	f001 030c 	and.w	r3, r1, #12
 8003488:	2b08      	cmp	r3, #8
 800348a:	d124      	bne.n	80034d6 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800348c:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8003490:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	fab3 f383 	clz	r3, r3
 800349c:	fa22 f303 	lsr.w	r3, r2, r3
 80034a0:	4a0f      	ldr	r2, [pc, #60]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x60>)
 80034a2:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80034a4:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <HAL_RCC_GetSysClockFreq+0x5c>)
 80034a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a8:	f003 030f 	and.w	r3, r3, #15
 80034ac:	220f      	movs	r2, #15
 80034ae:	fa92 f2a2 	rbit	r2, r2
 80034b2:	fab2 f282 	clz	r2, r2
 80034b6:	40d3      	lsrs	r3, r2
 80034b8:	4a0a      	ldr	r2, [pc, #40]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x64>)
 80034ba:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80034bc:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 80034c0:	d103      	bne.n	80034ca <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80034c2:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x68>)
 80034c4:	fb03 f000 	mul.w	r0, r3, r0
 80034c8:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034ca:	4b08      	ldr	r3, [pc, #32]	; (80034ec <HAL_RCC_GetSysClockFreq+0x6c>)
 80034cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80034d0:	fb00 f003 	mul.w	r0, r0, r3
 80034d4:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80034d6:	4805      	ldr	r0, [pc, #20]	; (80034ec <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	08003ccc 	.word	0x08003ccc
 80034e4:	08003cdc 	.word	0x08003cdc
 80034e8:	003d0900 	.word	0x003d0900
 80034ec:	007a1200 	.word	0x007a1200

080034f0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80034f0:	2800      	cmp	r0, #0
 80034f2:	f000 80c1 	beq.w	8003678 <HAL_RCC_ClockConfig+0x188>
{
 80034f6:	b570      	push	{r4, r5, r6, lr}
 80034f8:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034fa:	4b61      	ldr	r3, [pc, #388]	; (8003680 <HAL_RCC_ClockConfig+0x190>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	428b      	cmp	r3, r1
 8003504:	d20c      	bcs.n	8003520 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003506:	4a5e      	ldr	r2, [pc, #376]	; (8003680 <HAL_RCC_ClockConfig+0x190>)
 8003508:	6813      	ldr	r3, [r2, #0]
 800350a:	f023 0307 	bic.w	r3, r3, #7
 800350e:	430b      	orrs	r3, r1
 8003510:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003512:	6813      	ldr	r3, [r2, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	428b      	cmp	r3, r1
 800351a:	d001      	beq.n	8003520 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 800351c:	2001      	movs	r0, #1
}
 800351e:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	f013 0f02 	tst.w	r3, #2
 8003526:	d006      	beq.n	8003536 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003528:	4a56      	ldr	r2, [pc, #344]	; (8003684 <HAL_RCC_ClockConfig+0x194>)
 800352a:	6853      	ldr	r3, [r2, #4]
 800352c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003530:	68a0      	ldr	r0, [r4, #8]
 8003532:	4303      	orrs	r3, r0
 8003534:	6053      	str	r3, [r2, #4]
 8003536:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	f013 0f01 	tst.w	r3, #1
 800353e:	d05a      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x106>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003540:	6863      	ldr	r3, [r4, #4]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d02d      	beq.n	80035a2 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003546:	2b02      	cmp	r3, #2
 8003548:	d040      	beq.n	80035cc <HAL_RCC_ClockConfig+0xdc>
 800354a:	2202      	movs	r2, #2
 800354c:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003550:	4a4c      	ldr	r2, [pc, #304]	; (8003684 <HAL_RCC_ClockConfig+0x194>)
 8003552:	6810      	ldr	r0, [r2, #0]
 8003554:	2202      	movs	r2, #2
 8003556:	fa92 f2a2 	rbit	r2, r2
 800355a:	fab2 f282 	clz	r2, r2
 800355e:	f002 021f 	and.w	r2, r2, #31
 8003562:	2101      	movs	r1, #1
 8003564:	fa01 f202 	lsl.w	r2, r1, r2
 8003568:	4210      	tst	r0, r2
 800356a:	f000 8087 	beq.w	800367c <HAL_RCC_ClockConfig+0x18c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800356e:	4945      	ldr	r1, [pc, #276]	; (8003684 <HAL_RCC_ClockConfig+0x194>)
 8003570:	684a      	ldr	r2, [r1, #4]
 8003572:	f022 0203 	bic.w	r2, r2, #3
 8003576:	4313      	orrs	r3, r2
 8003578:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800357a:	f7ff f933 	bl	80027e4 <HAL_GetTick>
 800357e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003580:	4b40      	ldr	r3, [pc, #256]	; (8003684 <HAL_RCC_ClockConfig+0x194>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 030c 	and.w	r3, r3, #12
 8003588:	6862      	ldr	r2, [r4, #4]
 800358a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800358e:	d032      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003590:	f7ff f928 	bl	80027e4 <HAL_GetTick>
 8003594:	1b80      	subs	r0, r0, r6
 8003596:	f241 3388 	movw	r3, #5000	; 0x1388
 800359a:	4298      	cmp	r0, r3
 800359c:	d9f0      	bls.n	8003580 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 800359e:	2003      	movs	r0, #3
 80035a0:	e7bd      	b.n	800351e <HAL_RCC_ClockConfig+0x2e>
 80035a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035a6:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035aa:	4a36      	ldr	r2, [pc, #216]	; (8003684 <HAL_RCC_ClockConfig+0x194>)
 80035ac:	6810      	ldr	r0, [r2, #0]
 80035ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035b2:	fa92 f2a2 	rbit	r2, r2
 80035b6:	fab2 f282 	clz	r2, r2
 80035ba:	f002 021f 	and.w	r2, r2, #31
 80035be:	2101      	movs	r1, #1
 80035c0:	fa01 f202 	lsl.w	r2, r1, r2
 80035c4:	4202      	tst	r2, r0
 80035c6:	d1d2      	bne.n	800356e <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 80035c8:	2001      	movs	r0, #1
 80035ca:	e7a8      	b.n	800351e <HAL_RCC_ClockConfig+0x2e>
 80035cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035d0:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d4:	4a2b      	ldr	r2, [pc, #172]	; (8003684 <HAL_RCC_ClockConfig+0x194>)
 80035d6:	6810      	ldr	r0, [r2, #0]
 80035d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035dc:	fa92 f2a2 	rbit	r2, r2
 80035e0:	fab2 f282 	clz	r2, r2
 80035e4:	f002 021f 	and.w	r2, r2, #31
 80035e8:	2101      	movs	r1, #1
 80035ea:	fa01 f202 	lsl.w	r2, r1, r2
 80035ee:	4210      	tst	r0, r2
 80035f0:	d1bd      	bne.n	800356e <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 80035f2:	2001      	movs	r0, #1
 80035f4:	e793      	b.n	800351e <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035f6:	4b22      	ldr	r3, [pc, #136]	; (8003680 <HAL_RCC_ClockConfig+0x190>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	42ab      	cmp	r3, r5
 8003600:	d90c      	bls.n	800361c <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003602:	4a1f      	ldr	r2, [pc, #124]	; (8003680 <HAL_RCC_ClockConfig+0x190>)
 8003604:	6813      	ldr	r3, [r2, #0]
 8003606:	f023 0307 	bic.w	r3, r3, #7
 800360a:	432b      	orrs	r3, r5
 800360c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	6813      	ldr	r3, [r2, #0]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	42ab      	cmp	r3, r5
 8003616:	d001      	beq.n	800361c <HAL_RCC_ClockConfig+0x12c>
      return HAL_ERROR;
 8003618:	2001      	movs	r0, #1
 800361a:	e780      	b.n	800351e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	f013 0f04 	tst.w	r3, #4
 8003622:	d006      	beq.n	8003632 <HAL_RCC_ClockConfig+0x142>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003624:	4a17      	ldr	r2, [pc, #92]	; (8003684 <HAL_RCC_ClockConfig+0x194>)
 8003626:	6853      	ldr	r3, [r2, #4]
 8003628:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800362c:	68e1      	ldr	r1, [r4, #12]
 800362e:	430b      	orrs	r3, r1
 8003630:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	f013 0f08 	tst.w	r3, #8
 8003638:	d007      	beq.n	800364a <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800363a:	4a12      	ldr	r2, [pc, #72]	; (8003684 <HAL_RCC_ClockConfig+0x194>)
 800363c:	6853      	ldr	r3, [r2, #4]
 800363e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003642:	6921      	ldr	r1, [r4, #16]
 8003644:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003648:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800364a:	f7ff ff19 	bl	8003480 <HAL_RCC_GetSysClockFreq>
 800364e:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <HAL_RCC_ClockConfig+0x194>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003656:	22f0      	movs	r2, #240	; 0xf0
 8003658:	fa92 f2a2 	rbit	r2, r2
 800365c:	fab2 f282 	clz	r2, r2
 8003660:	40d3      	lsrs	r3, r2
 8003662:	4a09      	ldr	r2, [pc, #36]	; (8003688 <HAL_RCC_ClockConfig+0x198>)
 8003664:	5cd3      	ldrb	r3, [r2, r3]
 8003666:	40d8      	lsrs	r0, r3
 8003668:	4b08      	ldr	r3, [pc, #32]	; (800368c <HAL_RCC_ClockConfig+0x19c>)
 800366a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800366c:	4b08      	ldr	r3, [pc, #32]	; (8003690 <HAL_RCC_ClockConfig+0x1a0>)
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	f7ff f874 	bl	800275c <HAL_InitTick>
  return HAL_OK;
 8003674:	2000      	movs	r0, #0
 8003676:	e752      	b.n	800351e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003678:	2001      	movs	r0, #1
}
 800367a:	4770      	bx	lr
        return HAL_ERROR;
 800367c:	2001      	movs	r0, #1
 800367e:	e74e      	b.n	800351e <HAL_RCC_ClockConfig+0x2e>
 8003680:	40022000 	.word	0x40022000
 8003684:	40021000 	.word	0x40021000
 8003688:	08003cb4 	.word	0x08003cb4
 800368c:	20000000 	.word	0x20000000
 8003690:	20000008 	.word	0x20000008

08003694 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003694:	4b01      	ldr	r3, [pc, #4]	; (800369c <HAL_RCC_GetHCLKFreq+0x8>)
 8003696:	6818      	ldr	r0, [r3, #0]
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20000000 	.word	0x20000000

080036a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80036a2:	f7ff fff7 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036a6:	4b07      	ldr	r3, [pc, #28]	; (80036c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80036b2:	fa92 f2a2 	rbit	r2, r2
 80036b6:	fab2 f282 	clz	r2, r2
 80036ba:	40d3      	lsrs	r3, r2
 80036bc:	4a02      	ldr	r2, [pc, #8]	; (80036c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036be:	5cd3      	ldrb	r3, [r2, r3]
}    
 80036c0:	40d8      	lsrs	r0, r3
 80036c2:	bd08      	pop	{r3, pc}
 80036c4:	40021000 	.word	0x40021000
 80036c8:	08003cc4 	.word	0x08003cc4

080036cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036cc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80036ce:	f7ff ffe1 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036d2:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80036da:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80036de:	fa92 f2a2 	rbit	r2, r2
 80036e2:	fab2 f282 	clz	r2, r2
 80036e6:	40d3      	lsrs	r3, r2
 80036e8:	4a02      	ldr	r2, [pc, #8]	; (80036f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036ea:	5cd3      	ldrb	r3, [r2, r3]
} 
 80036ec:	40d8      	lsrs	r0, r3
 80036ee:	bd08      	pop	{r3, pc}
 80036f0:	40021000 	.word	0x40021000
 80036f4:	08003cc4 	.word	0x08003cc4

080036f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f8:	b510      	push	{r4, lr}
 80036fa:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036fc:	6883      	ldr	r3, [r0, #8]
 80036fe:	6902      	ldr	r2, [r0, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	6942      	ldr	r2, [r0, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	69c2      	ldr	r2, [r0, #28]
 8003708:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800370a:	6801      	ldr	r1, [r0, #0]
 800370c:	6808      	ldr	r0, [r1, #0]
 800370e:	4a6c      	ldr	r2, [pc, #432]	; (80038c0 <UART_SetConfig+0x1c8>)
 8003710:	4002      	ands	r2, r0
 8003712:	4313      	orrs	r3, r2
 8003714:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003716:	6822      	ldr	r2, [r4, #0]
 8003718:	6853      	ldr	r3, [r2, #4]
 800371a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800371e:	68e1      	ldr	r1, [r4, #12]
 8003720:	430b      	orrs	r3, r1
 8003722:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003724:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8003726:	6a23      	ldr	r3, [r4, #32]
 8003728:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800372a:	6821      	ldr	r1, [r4, #0]
 800372c:	688b      	ldr	r3, [r1, #8]
 800372e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003732:	4313      	orrs	r3, r2
 8003734:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	4a62      	ldr	r2, [pc, #392]	; (80038c4 <UART_SetConfig+0x1cc>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d015      	beq.n	800376a <UART_SetConfig+0x72>
 800373e:	4a62      	ldr	r2, [pc, #392]	; (80038c8 <UART_SetConfig+0x1d0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d028      	beq.n	8003796 <UART_SetConfig+0x9e>
 8003744:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003748:	4293      	cmp	r3, r2
 800374a:	d020      	beq.n	800378e <UART_SetConfig+0x96>
 800374c:	2310      	movs	r3, #16

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800374e:	69e2      	ldr	r2, [r4, #28]
 8003750:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003754:	d021      	beq.n	800379a <UART_SetConfig+0xa2>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8003756:	2b08      	cmp	r3, #8
 8003758:	f200 80ab 	bhi.w	80038b2 <UART_SetConfig+0x1ba>
 800375c:	e8df f003 	tbb	[pc, r3]
 8003760:	a98b816c 	.word	0xa98b816c
 8003764:	a9a9a996 	.word	0xa9a9a996
 8003768:	a0          	.byte	0xa0
 8003769:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800376a:	4b58      	ldr	r3, [pc, #352]	; (80038cc <UART_SetConfig+0x1d4>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	2b03      	cmp	r3, #3
 8003774:	d809      	bhi.n	800378a <UART_SetConfig+0x92>
 8003776:	e8df f003 	tbb	[pc, r3]
 800377a:	0402      	.short	0x0402
 800377c:	0c06      	.short	0x0c06
 800377e:	2300      	movs	r3, #0
 8003780:	e7e5      	b.n	800374e <UART_SetConfig+0x56>
 8003782:	2304      	movs	r3, #4
 8003784:	e7e3      	b.n	800374e <UART_SetConfig+0x56>
 8003786:	2308      	movs	r3, #8
 8003788:	e7e1      	b.n	800374e <UART_SetConfig+0x56>
 800378a:	2310      	movs	r3, #16
 800378c:	e7df      	b.n	800374e <UART_SetConfig+0x56>
 800378e:	2300      	movs	r3, #0
 8003790:	e7dd      	b.n	800374e <UART_SetConfig+0x56>
 8003792:	2302      	movs	r3, #2
 8003794:	e7db      	b.n	800374e <UART_SetConfig+0x56>
 8003796:	2300      	movs	r3, #0
 8003798:	e7d9      	b.n	800374e <UART_SetConfig+0x56>
    switch (clocksource)
 800379a:	2b08      	cmp	r3, #8
 800379c:	d849      	bhi.n	8003832 <UART_SetConfig+0x13a>
 800379e:	e8df f003 	tbb	[pc, r3]
 80037a2:	1e05      	.short	0x1e05
 80037a4:	48344829 	.word	0x48344829
 80037a8:	4848      	.short	0x4848
 80037aa:	3f          	.byte	0x3f
 80037ab:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80037ac:	f7ff ff78 	bl	80036a0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037b0:	6862      	ldr	r2, [r4, #4]
 80037b2:	0853      	lsrs	r3, r2, #1
 80037b4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80037b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80037bc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80037be:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c0:	f1a3 0110 	sub.w	r1, r3, #16
 80037c4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80037c8:	4291      	cmp	r1, r2
 80037ca:	d875      	bhi.n	80038b8 <UART_SetConfig+0x1c0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037d2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80037d6:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 80037d8:	6822      	ldr	r2, [r4, #0]
 80037da:	60d3      	str	r3, [r2, #12]
 80037dc:	e03d      	b.n	800385a <UART_SetConfig+0x162>
        pclk = HAL_RCC_GetPCLK2Freq();
 80037de:	f7ff ff75 	bl	80036cc <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037e2:	6862      	ldr	r2, [r4, #4]
 80037e4:	0853      	lsrs	r3, r2, #1
 80037e6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80037ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80037ee:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80037f0:	2000      	movs	r0, #0
        break;
 80037f2:	e7e5      	b.n	80037c0 <UART_SetConfig+0xc8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80037f4:	6862      	ldr	r2, [r4, #4]
 80037f6:	0853      	lsrs	r3, r2, #1
 80037f8:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80037fc:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003800:	fbb3 f3f2 	udiv	r3, r3, r2
 8003804:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003806:	2000      	movs	r0, #0
        break;
 8003808:	e7da      	b.n	80037c0 <UART_SetConfig+0xc8>
        pclk = HAL_RCC_GetSysClockFreq();
 800380a:	f7ff fe39 	bl	8003480 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800380e:	6862      	ldr	r2, [r4, #4]
 8003810:	0853      	lsrs	r3, r2, #1
 8003812:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003816:	fbb3 f3f2 	udiv	r3, r3, r2
 800381a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800381c:	2000      	movs	r0, #0
        break;
 800381e:	e7cf      	b.n	80037c0 <UART_SetConfig+0xc8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003820:	6862      	ldr	r2, [r4, #4]
 8003822:	0853      	lsrs	r3, r2, #1
 8003824:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003828:	fbb3 f3f2 	udiv	r3, r3, r2
 800382c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800382e:	2000      	movs	r0, #0
        break;
 8003830:	e7c6      	b.n	80037c0 <UART_SetConfig+0xc8>
        ret = HAL_ERROR;
 8003832:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003834:	2300      	movs	r3, #0
 8003836:	e7c3      	b.n	80037c0 <UART_SetConfig+0xc8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003838:	f7ff ff32 	bl	80036a0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800383c:	6862      	ldr	r2, [r4, #4]
 800383e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003842:	fbb3 f3f2 	udiv	r3, r3, r2
 8003846:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003848:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800384a:	f1a3 0110 	sub.w	r1, r3, #16
 800384e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003852:	4291      	cmp	r1, r2
 8003854:	d832      	bhi.n	80038bc <UART_SetConfig+0x1c4>
    {
      huart->Instance->BRR = usartdiv;
 8003856:	6822      	ldr	r2, [r4, #0]
 8003858:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800385a:	2300      	movs	r3, #0
 800385c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800385e:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8003860:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8003862:	f7ff ff33 	bl	80036cc <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003866:	6862      	ldr	r2, [r4, #4]
 8003868:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800386c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003870:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003872:	2000      	movs	r0, #0
        break;
 8003874:	e7e9      	b.n	800384a <UART_SetConfig+0x152>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003876:	6862      	ldr	r2, [r4, #4]
 8003878:	0853      	lsrs	r3, r2, #1
 800387a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800387e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003882:	fbb3 f3f2 	udiv	r3, r3, r2
 8003886:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003888:	2000      	movs	r0, #0
        break;
 800388a:	e7de      	b.n	800384a <UART_SetConfig+0x152>
        pclk = HAL_RCC_GetSysClockFreq();
 800388c:	f7ff fdf8 	bl	8003480 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003890:	6862      	ldr	r2, [r4, #4]
 8003892:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003896:	fbb3 f3f2 	udiv	r3, r3, r2
 800389a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800389c:	2000      	movs	r0, #0
        break;
 800389e:	e7d4      	b.n	800384a <UART_SetConfig+0x152>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80038a0:	6862      	ldr	r2, [r4, #4]
 80038a2:	0853      	lsrs	r3, r2, #1
 80038a4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80038a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80038ac:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80038ae:	2000      	movs	r0, #0
        break;
 80038b0:	e7cb      	b.n	800384a <UART_SetConfig+0x152>
        ret = HAL_ERROR;
 80038b2:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e7c8      	b.n	800384a <UART_SetConfig+0x152>
      ret = HAL_ERROR;
 80038b8:	2001      	movs	r0, #1
 80038ba:	e7ce      	b.n	800385a <UART_SetConfig+0x162>
      ret = HAL_ERROR;
 80038bc:	2001      	movs	r0, #1
 80038be:	e7cc      	b.n	800385a <UART_SetConfig+0x162>
 80038c0:	efff69f3 	.word	0xefff69f3
 80038c4:	40013800 	.word	0x40013800
 80038c8:	40004400 	.word	0x40004400
 80038cc:	40021000 	.word	0x40021000

080038d0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038d2:	f013 0f01 	tst.w	r3, #1
 80038d6:	d006      	beq.n	80038e6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038d8:	6802      	ldr	r2, [r0, #0]
 80038da:	6853      	ldr	r3, [r2, #4]
 80038dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80038e0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80038e2:	430b      	orrs	r3, r1
 80038e4:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038e8:	f013 0f02 	tst.w	r3, #2
 80038ec:	d006      	beq.n	80038fc <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038ee:	6802      	ldr	r2, [r0, #0]
 80038f0:	6853      	ldr	r3, [r2, #4]
 80038f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80038f8:	430b      	orrs	r3, r1
 80038fa:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038fe:	f013 0f04 	tst.w	r3, #4
 8003902:	d006      	beq.n	8003912 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003904:	6802      	ldr	r2, [r0, #0]
 8003906:	6853      	ldr	r3, [r2, #4]
 8003908:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800390c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800390e:	430b      	orrs	r3, r1
 8003910:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003912:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003914:	f013 0f08 	tst.w	r3, #8
 8003918:	d006      	beq.n	8003928 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800391a:	6802      	ldr	r2, [r0, #0]
 800391c:	6853      	ldr	r3, [r2, #4]
 800391e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003922:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003924:	430b      	orrs	r3, r1
 8003926:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003928:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800392a:	f013 0f10 	tst.w	r3, #16
 800392e:	d006      	beq.n	800393e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003930:	6802      	ldr	r2, [r0, #0]
 8003932:	6893      	ldr	r3, [r2, #8]
 8003934:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003938:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800393a:	430b      	orrs	r3, r1
 800393c:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800393e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003940:	f013 0f20 	tst.w	r3, #32
 8003944:	d006      	beq.n	8003954 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003946:	6802      	ldr	r2, [r0, #0]
 8003948:	6893      	ldr	r3, [r2, #8]
 800394a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800394e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003950:	430b      	orrs	r3, r1
 8003952:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003954:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003956:	f013 0f40 	tst.w	r3, #64	; 0x40
 800395a:	d00a      	beq.n	8003972 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800395c:	6802      	ldr	r2, [r0, #0]
 800395e:	6853      	ldr	r3, [r2, #4]
 8003960:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003964:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003966:	430b      	orrs	r3, r1
 8003968:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800396a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800396c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003970:	d00b      	beq.n	800398a <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003972:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003974:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003978:	d006      	beq.n	8003988 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800397a:	6802      	ldr	r2, [r0, #0]
 800397c:	6853      	ldr	r3, [r2, #4]
 800397e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003982:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003984:	430b      	orrs	r3, r1
 8003986:	6053      	str	r3, [r2, #4]
  }
}
 8003988:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800398a:	6802      	ldr	r2, [r0, #0]
 800398c:	6853      	ldr	r3, [r2, #4]
 800398e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003992:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003994:	430b      	orrs	r3, r1
 8003996:	6053      	str	r3, [r2, #4]
 8003998:	e7eb      	b.n	8003972 <UART_AdvFeatureConfig+0xa2>

0800399a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800399a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800399e:	4604      	mov	r4, r0
 80039a0:	460f      	mov	r7, r1
 80039a2:	4616      	mov	r6, r2
 80039a4:	4698      	mov	r8, r3
 80039a6:	9d06      	ldr	r5, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	ea37 0303 	bics.w	r3, r7, r3
 80039b0:	bf0c      	ite	eq
 80039b2:	2301      	moveq	r3, #1
 80039b4:	2300      	movne	r3, #0
 80039b6:	42b3      	cmp	r3, r6
 80039b8:	d13a      	bne.n	8003a30 <UART_WaitOnFlagUntilTimeout+0x96>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ba:	f1b5 3fff 	cmp.w	r5, #4294967295
 80039be:	d0f3      	beq.n	80039a8 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c0:	f7fe ff10 	bl	80027e4 <HAL_GetTick>
 80039c4:	eba0 0008 	sub.w	r0, r0, r8
 80039c8:	42a8      	cmp	r0, r5
 80039ca:	d81f      	bhi.n	8003a0c <UART_WaitOnFlagUntilTimeout+0x72>
 80039cc:	b1f5      	cbz	r5, 8003a0c <UART_WaitOnFlagUntilTimeout+0x72>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	f012 0f04 	tst.w	r2, #4
 80039d6:	d0e7      	beq.n	80039a8 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039d8:	69da      	ldr	r2, [r3, #28]
 80039da:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80039de:	d0e3      	beq.n	80039a8 <UART_WaitOnFlagUntilTimeout+0xe>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039e4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039e6:	6822      	ldr	r2, [r4, #0]
 80039e8:	6813      	ldr	r3, [r2, #0]
 80039ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039ee:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f0:	6822      	ldr	r2, [r4, #0]
 80039f2:	6893      	ldr	r3, [r2, #8]
 80039f4:	f023 0301 	bic.w	r3, r3, #1
 80039f8:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 80039fa:	2320      	movs	r3, #32
 80039fc:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80039fe:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a00:	67e3      	str	r3, [r4, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a02:	2300      	movs	r3, #0
 8003a04:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003a08:	2003      	movs	r0, #3
 8003a0a:	e012      	b.n	8003a32 <UART_WaitOnFlagUntilTimeout+0x98>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a0c:	6822      	ldr	r2, [r4, #0]
 8003a0e:	6813      	ldr	r3, [r2, #0]
 8003a10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a14:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a16:	6822      	ldr	r2, [r4, #0]
 8003a18:	6893      	ldr	r3, [r2, #8]
 8003a1a:	f023 0301 	bic.w	r3, r3, #1
 8003a1e:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003a20:	2320      	movs	r3, #32
 8003a22:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003a24:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8003a26:	2300      	movs	r3, #0
 8003a28:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        return HAL_TIMEOUT;
 8003a2c:	2003      	movs	r0, #3
 8003a2e:	e000      	b.n	8003a32 <UART_WaitOnFlagUntilTimeout+0x98>
        }
      }
    }
  }
  return HAL_OK;
 8003a30:	2000      	movs	r0, #0
}
 8003a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003a36 <HAL_UART_Receive>:
{
 8003a36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a3e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d17a      	bne.n	8003b3a <HAL_UART_Receive+0x104>
 8003a44:	4604      	mov	r4, r0
 8003a46:	460d      	mov	r5, r1
 8003a48:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003a4a:	2900      	cmp	r1, #0
 8003a4c:	d079      	beq.n	8003b42 <HAL_UART_Receive+0x10c>
 8003a4e:	2a00      	cmp	r2, #0
 8003a50:	d079      	beq.n	8003b46 <HAL_UART_Receive+0x110>
    __HAL_LOCK(huart);
 8003a52:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d077      	beq.n	8003b4a <HAL_UART_Receive+0x114>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a60:	2300      	movs	r3, #0
 8003a62:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a64:	2322      	movs	r3, #34	; 0x22
 8003a66:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8003a68:	f7fe febc 	bl	80027e4 <HAL_GetTick>
 8003a6c:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8003a6e:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 8003a72:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8003a76:	68a3      	ldr	r3, [r4, #8]
 8003a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7c:	d006      	beq.n	8003a8c <HAL_UART_Receive+0x56>
 8003a7e:	b9a3      	cbnz	r3, 8003aaa <HAL_UART_Receive+0x74>
 8003a80:	6922      	ldr	r2, [r4, #16]
 8003a82:	b972      	cbnz	r2, 8003aa2 <HAL_UART_Receive+0x6c>
 8003a84:	22ff      	movs	r2, #255	; 0xff
 8003a86:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8003a8a:	e014      	b.n	8003ab6 <HAL_UART_Receive+0x80>
 8003a8c:	6922      	ldr	r2, [r4, #16]
 8003a8e:	b922      	cbnz	r2, 8003a9a <HAL_UART_Receive+0x64>
 8003a90:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003a94:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8003a98:	e00d      	b.n	8003ab6 <HAL_UART_Receive+0x80>
 8003a9a:	22ff      	movs	r2, #255	; 0xff
 8003a9c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8003aa0:	e009      	b.n	8003ab6 <HAL_UART_Receive+0x80>
 8003aa2:	227f      	movs	r2, #127	; 0x7f
 8003aa4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8003aa8:	e005      	b.n	8003ab6 <HAL_UART_Receive+0x80>
 8003aaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aae:	d00a      	beq.n	8003ac6 <HAL_UART_Receive+0x90>
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8003ab6:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003abe:	d00c      	beq.n	8003ada <HAL_UART_Receive+0xa4>
      pdata16bits = NULL;
 8003ac0:	f04f 0900 	mov.w	r9, #0
 8003ac4:	e01d      	b.n	8003b02 <HAL_UART_Receive+0xcc>
    UART_MASK_COMPUTATION(huart);
 8003ac6:	6922      	ldr	r2, [r4, #16]
 8003ac8:	b91a      	cbnz	r2, 8003ad2 <HAL_UART_Receive+0x9c>
 8003aca:	227f      	movs	r2, #127	; 0x7f
 8003acc:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8003ad0:	e7f1      	b.n	8003ab6 <HAL_UART_Receive+0x80>
 8003ad2:	223f      	movs	r2, #63	; 0x3f
 8003ad4:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8003ad8:	e7ed      	b.n	8003ab6 <HAL_UART_Receive+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ada:	6923      	ldr	r3, [r4, #16]
 8003adc:	b113      	cbz	r3, 8003ae4 <HAL_UART_Receive+0xae>
      pdata16bits = NULL;
 8003ade:	f04f 0900 	mov.w	r9, #0
 8003ae2:	e00e      	b.n	8003b02 <HAL_UART_Receive+0xcc>
      pdata16bits = (uint16_t *) pData;
 8003ae4:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8003ae6:	2500      	movs	r5, #0
 8003ae8:	e00b      	b.n	8003b02 <HAL_UART_Receive+0xcc>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003aea:	6823      	ldr	r3, [r4, #0]
 8003aec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003aee:	ea08 0303 	and.w	r3, r8, r3
 8003af2:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 8003af6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003b02:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	b18b      	cbz	r3, 8003b2e <HAL_UART_Receive+0xf8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b0a:	9600      	str	r6, [sp, #0]
 8003b0c:	463b      	mov	r3, r7
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2120      	movs	r1, #32
 8003b12:	4620      	mov	r0, r4
 8003b14:	f7ff ff41 	bl	800399a <UART_WaitOnFlagUntilTimeout>
 8003b18:	b9c8      	cbnz	r0, 8003b4e <HAL_UART_Receive+0x118>
      if (pdata8bits == NULL)
 8003b1a:	2d00      	cmp	r5, #0
 8003b1c:	d0e5      	beq.n	8003aea <HAL_UART_Receive+0xb4>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8003b22:	fa5f f388 	uxtb.w	r3, r8
 8003b26:	4013      	ands	r3, r2
 8003b28:	f805 3b01 	strb.w	r3, [r5], #1
 8003b2c:	e7e3      	b.n	8003af6 <HAL_UART_Receive+0xc0>
    huart->RxState = HAL_UART_STATE_READY;
 8003b2e:	2320      	movs	r3, #32
 8003b30:	67a3      	str	r3, [r4, #120]	; 0x78
    __HAL_UNLOCK(huart);
 8003b32:	2000      	movs	r0, #0
 8003b34:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8003b38:	e000      	b.n	8003b3c <HAL_UART_Receive+0x106>
    return HAL_BUSY;
 8003b3a:	2002      	movs	r0, #2
}
 8003b3c:	b003      	add	sp, #12
 8003b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8003b42:	2001      	movs	r0, #1
 8003b44:	e7fa      	b.n	8003b3c <HAL_UART_Receive+0x106>
 8003b46:	2001      	movs	r0, #1
 8003b48:	e7f8      	b.n	8003b3c <HAL_UART_Receive+0x106>
    __HAL_LOCK(huart);
 8003b4a:	2002      	movs	r0, #2
 8003b4c:	e7f6      	b.n	8003b3c <HAL_UART_Receive+0x106>
        return HAL_TIMEOUT;
 8003b4e:	2003      	movs	r0, #3
 8003b50:	e7f4      	b.n	8003b3c <HAL_UART_Receive+0x106>

08003b52 <UART_CheckIdleState>:
{
 8003b52:	b530      	push	{r4, r5, lr}
 8003b54:	b083      	sub	sp, #12
 8003b56:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8003b5c:	f7fe fe42 	bl	80027e4 <HAL_GetTick>
 8003b60:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b62:	6823      	ldr	r3, [r4, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f013 0f08 	tst.w	r3, #8
 8003b6a:	d10c      	bne.n	8003b86 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f013 0f04 	tst.w	r3, #4
 8003b74:	d115      	bne.n	8003ba2 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8003b76:	2320      	movs	r3, #32
 8003b78:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003b7a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8003b82:	b003      	add	sp, #12
 8003b84:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b94:	4620      	mov	r0, r4
 8003b96:	f7ff ff00 	bl	800399a <UART_WaitOnFlagUntilTimeout>
 8003b9a:	2800      	cmp	r0, #0
 8003b9c:	d0e6      	beq.n	8003b6c <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003b9e:	2003      	movs	r0, #3
 8003ba0:	e7ef      	b.n	8003b82 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ba2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	462b      	mov	r3, r5
 8003baa:	2200      	movs	r2, #0
 8003bac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f7ff fef2 	bl	800399a <UART_WaitOnFlagUntilTimeout>
 8003bb6:	2800      	cmp	r0, #0
 8003bb8:	d0dd      	beq.n	8003b76 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8003bba:	2003      	movs	r0, #3
 8003bbc:	e7e1      	b.n	8003b82 <UART_CheckIdleState+0x30>

08003bbe <HAL_UART_Init>:
  if (huart == NULL)
 8003bbe:	b368      	cbz	r0, 8003c1c <HAL_UART_Init+0x5e>
{
 8003bc0:	b510      	push	{r4, lr}
 8003bc2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003bc4:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003bc6:	b303      	cbz	r3, 8003c0a <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8003bc8:	2324      	movs	r3, #36	; 0x24
 8003bca:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8003bcc:	6822      	ldr	r2, [r4, #0]
 8003bce:	6813      	ldr	r3, [r2, #0]
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f7ff fd8e 	bl	80036f8 <UART_SetConfig>
 8003bdc:	2801      	cmp	r0, #1
 8003bde:	d013      	beq.n	8003c08 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003be2:	b9bb      	cbnz	r3, 8003c14 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be4:	6822      	ldr	r2, [r4, #0]
 8003be6:	6853      	ldr	r3, [r2, #4]
 8003be8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003bec:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bee:	6822      	ldr	r2, [r4, #0]
 8003bf0:	6893      	ldr	r3, [r2, #8]
 8003bf2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003bf6:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003bf8:	6822      	ldr	r2, [r4, #0]
 8003bfa:	6813      	ldr	r3, [r2, #0]
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003c02:	4620      	mov	r0, r4
 8003c04:	f7ff ffa5 	bl	8003b52 <UART_CheckIdleState>
}
 8003c08:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003c0a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8003c0e:	f7fe fd2d 	bl	800266c <HAL_UART_MspInit>
 8003c12:	e7d9      	b.n	8003bc8 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8003c14:	4620      	mov	r0, r4
 8003c16:	f7ff fe5b 	bl	80038d0 <UART_AdvFeatureConfig>
 8003c1a:	e7e3      	b.n	8003be4 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8003c1c:	2001      	movs	r0, #1
}
 8003c1e:	4770      	bx	lr

08003c20 <__libc_init_array>:
 8003c20:	b570      	push	{r4, r5, r6, lr}
 8003c22:	4e0d      	ldr	r6, [pc, #52]	; (8003c58 <__libc_init_array+0x38>)
 8003c24:	4c0d      	ldr	r4, [pc, #52]	; (8003c5c <__libc_init_array+0x3c>)
 8003c26:	1ba4      	subs	r4, r4, r6
 8003c28:	10a4      	asrs	r4, r4, #2
 8003c2a:	2500      	movs	r5, #0
 8003c2c:	42a5      	cmp	r5, r4
 8003c2e:	d109      	bne.n	8003c44 <__libc_init_array+0x24>
 8003c30:	4e0b      	ldr	r6, [pc, #44]	; (8003c60 <__libc_init_array+0x40>)
 8003c32:	4c0c      	ldr	r4, [pc, #48]	; (8003c64 <__libc_init_array+0x44>)
 8003c34:	f000 f820 	bl	8003c78 <_init>
 8003c38:	1ba4      	subs	r4, r4, r6
 8003c3a:	10a4      	asrs	r4, r4, #2
 8003c3c:	2500      	movs	r5, #0
 8003c3e:	42a5      	cmp	r5, r4
 8003c40:	d105      	bne.n	8003c4e <__libc_init_array+0x2e>
 8003c42:	bd70      	pop	{r4, r5, r6, pc}
 8003c44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c48:	4798      	blx	r3
 8003c4a:	3501      	adds	r5, #1
 8003c4c:	e7ee      	b.n	8003c2c <__libc_init_array+0xc>
 8003c4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c52:	4798      	blx	r3
 8003c54:	3501      	adds	r5, #1
 8003c56:	e7f2      	b.n	8003c3e <__libc_init_array+0x1e>
 8003c58:	08003cec 	.word	0x08003cec
 8003c5c:	08003cec 	.word	0x08003cec
 8003c60:	08003cec 	.word	0x08003cec
 8003c64:	08003cf0 	.word	0x08003cf0

08003c68 <memset>:
 8003c68:	4402      	add	r2, r0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d100      	bne.n	8003c72 <memset+0xa>
 8003c70:	4770      	bx	lr
 8003c72:	f803 1b01 	strb.w	r1, [r3], #1
 8003c76:	e7f9      	b.n	8003c6c <memset+0x4>

08003c78 <_init>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	bf00      	nop
 8003c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7e:	bc08      	pop	{r3}
 8003c80:	469e      	mov	lr, r3
 8003c82:	4770      	bx	lr

08003c84 <_fini>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	bf00      	nop
 8003c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8a:	bc08      	pop	{r3}
 8003c8c:	469e      	mov	lr, r3
 8003c8e:	4770      	bx	lr
