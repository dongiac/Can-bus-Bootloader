
demoprog_stm32f303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08002000  08002000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000141c  0800218c  0800218c  0000218c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080035a8  080035a8  000035a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003604  08003604  0001000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003604  08003604  0001000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003604  08003604  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003604  08003604  00003604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003608  08003608  00003608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800360c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  2000000c  08003618  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08003618  0001005c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079e4  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000175f  00000000  00000000  00017a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000588  00000000  00000000  00019180  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000530  00000000  00000000  00019708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ce8  00000000  00000000  00019c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006815  00000000  00000000  00030920  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080030  00000000  00000000  00037135  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b7165  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bfc  00000000  00000000  000b71e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00002252  00000000  00000000  000b7ddc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800218c <__do_global_dtors_aux>:
 800218c:	b510      	push	{r4, lr}
 800218e:	4c05      	ldr	r4, [pc, #20]	; (80021a4 <__do_global_dtors_aux+0x18>)
 8002190:	7823      	ldrb	r3, [r4, #0]
 8002192:	b933      	cbnz	r3, 80021a2 <__do_global_dtors_aux+0x16>
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <__do_global_dtors_aux+0x1c>)
 8002196:	b113      	cbz	r3, 800219e <__do_global_dtors_aux+0x12>
 8002198:	4804      	ldr	r0, [pc, #16]	; (80021ac <__do_global_dtors_aux+0x20>)
 800219a:	f3af 8000 	nop.w
 800219e:	2301      	movs	r3, #1
 80021a0:	7023      	strb	r3, [r4, #0]
 80021a2:	bd10      	pop	{r4, pc}
 80021a4:	2000000c 	.word	0x2000000c
 80021a8:	00000000 	.word	0x00000000
 80021ac:	08003590 	.word	0x08003590

080021b0 <frame_dummy>:
 80021b0:	b508      	push	{r3, lr}
 80021b2:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <frame_dummy+0x10>)
 80021b4:	b11b      	cbz	r3, 80021be <frame_dummy+0xe>
 80021b6:	4903      	ldr	r1, [pc, #12]	; (80021c4 <frame_dummy+0x14>)
 80021b8:	4803      	ldr	r0, [pc, #12]	; (80021c8 <frame_dummy+0x18>)
 80021ba:	f3af 8000 	nop.w
 80021be:	bd08      	pop	{r3, pc}
 80021c0:	00000000 	.word	0x00000000
 80021c4:	20000010 	.word	0x20000010
 80021c8:	08003590 	.word	0x08003590

080021cc <AppInit>:
**            software program initialization.
** \return    none.
**
****************************************************************************************/
void AppInit(void)
{
 80021cc:	b508      	push	{r3, lr}
  /* Initialize the timer driver. */
  TimerInit();
 80021ce:	f000 f8f9 	bl	80023c4 <TimerInit>
  /* Initialize the led driver. */
  LedInit();
 80021d2:	f000 f8c7 	bl	8002364 <LedInit>
  /* initialize the bootloader interface */
  BootComInit();
 80021d6:	f000 f88b 	bl	80022f0 <BootComInit>
} /*** end of AppInit ***/
 80021da:	bd08      	pop	{r3, pc}

080021dc <AppTask>:
**            continuously in the program loop.
** \return    none.
**
****************************************************************************************/
void AppTask(void)
{
 80021dc:	b508      	push	{r3, lr}
  /* Toggle LED with a fixed frequency. */
  LedToggle();
 80021de:	f000 f8cb 	bl	8002378 <LedToggle>
  /* check for bootloader activation request */
  BootComCheckActivationRequest();
 80021e2:	f000 f8bb 	bl	800235c <BootComCheckActivationRequest>
} /*** end of AppTask ***/
 80021e6:	bd08      	pop	{r3, pc}

080021e8 <CanGetSpeedConfig>:
** \return    1 if the CAN bustiming register values were found, 0 otherwise.
**
****************************************************************************************/
static unsigned char CanGetSpeedConfig(unsigned short baud, unsigned short *prescaler,
                                       unsigned char *tseg1, unsigned char *tseg2)
{
 80021e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021ec:	4604      	mov	r4, r0
 80021ee:	460d      	mov	r5, r1
 80021f0:	4617      	mov	r7, r2
 80021f2:	4698      	mov	r8, r3
  unsigned char cnt;
  unsigned long canClockFreqkHz;

  /* store CAN peripheral clock speed in kHz */
  canClockFreqkHz = HAL_RCC_GetPCLK1Freq() / 1000u;
 80021f4:	f001 f98a 	bl	800350c <HAL_RCC_GetPCLK1Freq>
 80021f8:	4b15      	ldr	r3, [pc, #84]	; (8002250 <CanGetSpeedConfig+0x68>)
 80021fa:	fba3 3000 	umull	r3, r0, r3, r0
 80021fe:	0980      	lsrs	r0, r0, #6

  /* loop through all possible time quanta configurations to find a match */
  for (cnt=0; cnt < sizeof(canTiming)/sizeof(canTiming[0]); cnt++)
 8002200:	2200      	movs	r2, #0
 8002202:	e001      	b.n	8002208 <CanGetSpeedConfig+0x20>
 8002204:	3201      	adds	r2, #1
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	2a11      	cmp	r2, #17
 800220a:	d81d      	bhi.n	8002248 <CanGetSpeedConfig+0x60>
  {
    if ((canClockFreqkHz % (baud*(canTiming[cnt].tseg1+canTiming[cnt].tseg2+1))) == 0)
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <CanGetSpeedConfig+0x6c>)
 800220e:	f813 1012 	ldrb.w	r1, [r3, r2, lsl #1]
 8002212:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002216:	f893 c001 	ldrb.w	ip, [r3, #1]
 800221a:	eb01 030c 	add.w	r3, r1, ip
 800221e:	fb03 4304 	mla	r3, r3, r4, r4
 8002222:	fbb0 fef3 	udiv	lr, r0, r3
 8002226:	fb03 061e 	mls	r6, r3, lr, r0
 800222a:	2e00      	cmp	r6, #0
 800222c:	d1ea      	bne.n	8002204 <CanGetSpeedConfig+0x1c>
    {
      /* compute the prescaler that goes with this TQ configuration */
      *prescaler = canClockFreqkHz/(baud*(canTiming[cnt].tseg1+canTiming[cnt].tseg2+1));
 800222e:	fa1f f38e 	uxth.w	r3, lr
 8002232:	802b      	strh	r3, [r5, #0]

      /* make sure the prescaler is valid */
      if ( (*prescaler > 0) && (*prescaler <= 1024) )
 8002234:	3b01      	subs	r3, #1
 8002236:	b29b      	uxth	r3, r3
 8002238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800223c:	d2e2      	bcs.n	8002204 <CanGetSpeedConfig+0x1c>
      {
        /* store the bustiming configuration */
        *tseg1 = canTiming[cnt].tseg1;
 800223e:	7039      	strb	r1, [r7, #0]
        *tseg2 = canTiming[cnt].tseg2;
 8002240:	f888 c000 	strb.w	ip, [r8]
        /* found a good bus timing configuration */
        return 1;
 8002244:	2001      	movs	r0, #1
 8002246:	e000      	b.n	800224a <CanGetSpeedConfig+0x62>
      }
    }
  }
  /* could not find a good bus timing configuration */
  return 0;
 8002248:	2000      	movs	r0, #0
} /*** end of CanGetSpeedConfig ***/
 800224a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800224e:	bf00      	nop
 8002250:	10624dd3 	.word	0x10624dd3
 8002254:	080035a8 	.word	0x080035a8

08002258 <BootComCanInit>:
** \brief     Initializes the CAN communication interface.
** \return    none.
**
****************************************************************************************/
static void BootComCanInit(void)
{
 8002258:	b570      	push	{r4, r5, r6, lr}
 800225a:	b08c      	sub	sp, #48	; 0x30
  unsigned short prescaler = 0;
 800225c:	2500      	movs	r5, #0
 800225e:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
  unsigned char tseg1 = 0, tseg2 = 0;
 8002262:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 8002266:	ab0c      	add	r3, sp, #48	; 0x30
 8002268:	f803 5d04 	strb.w	r5, [r3, #-4]!
  CAN_FilterTypeDef filterConfig;
  unsigned long rxMsgId = BOOT_COM_CAN_RX_MSG_ID;
  unsigned long rxFilterId, rxFilterMask;

  /* obtain bittiming configuration information. */
  CanGetSpeedConfig(BOOT_COM_CAN_BAUDRATE/1000, &prescaler, &tseg1, &tseg2);
 800226c:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 8002270:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8002274:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002278:	f7ff ffb6 	bl	80021e8 <CanGetSpeedConfig>

  /* set the CAN controller configuration. */
  canHandle.Instance = CAN;
 800227c:	4c1a      	ldr	r4, [pc, #104]	; (80022e8 <BootComCanInit+0x90>)
 800227e:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <BootComCanInit+0x94>)
 8002280:	6023      	str	r3, [r4, #0]
  canHandle.Init.TimeTriggeredMode = DISABLE;
 8002282:	7625      	strb	r5, [r4, #24]
  canHandle.Init.AutoBusOff = DISABLE;
 8002284:	7665      	strb	r5, [r4, #25]
  canHandle.Init.AutoWakeUp = DISABLE;
 8002286:	76a5      	strb	r5, [r4, #26]
  canHandle.Init.AutoRetransmission = ENABLE;
 8002288:	2601      	movs	r6, #1
 800228a:	76e6      	strb	r6, [r4, #27]
  canHandle.Init.ReceiveFifoLocked = DISABLE;
 800228c:	7725      	strb	r5, [r4, #28]
  canHandle.Init.TransmitFifoPriority = DISABLE;
 800228e:	7765      	strb	r5, [r4, #29]
  canHandle.Init.Mode = CAN_MODE_NORMAL;
 8002290:	60a5      	str	r5, [r4, #8]
  canHandle.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002292:	60e5      	str	r5, [r4, #12]
  canHandle.Init.TimeSeg1 = ((unsigned long)tseg1 - 1) << CAN_BTR_TS1_Pos;
 8002294:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8002298:	3b01      	subs	r3, #1
 800229a:	041b      	lsls	r3, r3, #16
 800229c:	6123      	str	r3, [r4, #16]
  canHandle.Init.TimeSeg2 = ((unsigned long)tseg2 - 1) << CAN_BTR_TS2_Pos;
 800229e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80022a2:	3b01      	subs	r3, #1
 80022a4:	051b      	lsls	r3, r3, #20
 80022a6:	6163      	str	r3, [r4, #20]
  canHandle.Init.Prescaler = prescaler;
 80022a8:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80022ac:	6063      	str	r3, [r4, #4]
  /* initialize the CAN controller. this only fails if the CAN controller hardware is
   * faulty. no need to evaluate the return value as there is nothing we can do about
   * a faulty CAN controller.
   */
  (void)HAL_CAN_Init(&canHandle);
 80022ae:	4620      	mov	r0, r4
 80022b0:	f000 f9e8 	bl	8002684 <HAL_CAN_Init>
    rxFilterMask = (CAN_RI0R_EXID_Msk) | CAN_RI0R_IDE;
  }
  /* configure the reception filter. note that the implementation of this function
   * always returns HAL_OK, so no need to evaluate the return value.
   */
  filterConfig.FilterBank = 0;
 80022b4:	9506      	str	r5, [sp, #24]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80022b6:	9507      	str	r5, [sp, #28]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80022b8:	9608      	str	r6, [sp, #32]
  filterConfig.FilterIdHigh = (rxFilterId >> 16) & 0x0000FFFFu;
 80022ba:	f64c 43e0 	movw	r3, #52448	; 0xcce0
 80022be:	9301      	str	r3, [sp, #4]
  filterConfig.FilterIdLow = rxFilterId & 0x0000FFFFu;
 80022c0:	9502      	str	r5, [sp, #8]
  filterConfig.FilterMaskIdHigh = (rxFilterMask >> 16) & 0x0000FFFFu;
 80022c2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80022c6:	9303      	str	r3, [sp, #12]
  filterConfig.FilterMaskIdLow = rxFilterMask & 0x0000FFFFu;
 80022c8:	2304      	movs	r3, #4
 80022ca:	9304      	str	r3, [sp, #16]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80022cc:	9505      	str	r5, [sp, #20]
  filterConfig.FilterActivation = ENABLE;
 80022ce:	9609      	str	r6, [sp, #36]	; 0x24
  filterConfig.SlaveStartFilterBank = 14;
 80022d0:	230e      	movs	r3, #14
 80022d2:	930a      	str	r3, [sp, #40]	; 0x28
  (void)HAL_CAN_ConfigFilter(&canHandle, &filterConfig);
 80022d4:	a901      	add	r1, sp, #4
 80022d6:	4620      	mov	r0, r4
 80022d8:	f000 fa7a 	bl	80027d0 <HAL_CAN_ConfigFilter>
  /* start the CAN peripheral. no need to evaluate the return value as there is nothing
   * we can do about a faulty CAN controller. */
  (void)HAL_CAN_Start(&canHandle);
 80022dc:	4620      	mov	r0, r4
 80022de:	f000 faf5 	bl	80028cc <HAL_CAN_Start>
} /*** end of BootComCanInit ***/
 80022e2:	b00c      	add	sp, #48	; 0x30
 80022e4:	bd70      	pop	{r4, r5, r6, pc}
 80022e6:	bf00      	nop
 80022e8:	20000028 	.word	0x20000028
 80022ec:	40006400 	.word	0x40006400

080022f0 <BootComInit>:
{
 80022f0:	b508      	push	{r3, lr}
  BootComCanInit();
 80022f2:	f7ff ffb1 	bl	8002258 <BootComCanInit>
} /*** end of BootComInit ***/
 80022f6:	bd08      	pop	{r3, pc}

080022f8 <BootActivate>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022f8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80022fc:	4905      	ldr	r1, [pc, #20]	; (8002314 <BootActivate+0x1c>)
 80022fe:	68ca      	ldr	r2, [r1, #12]
 8002300:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <BootActivate+0x20>)
 8002306:	4313      	orrs	r3, r2
 8002308:	60cb      	str	r3, [r1, #12]
 800230a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800230e:	bf00      	nop
 8002310:	e7fd      	b.n	800230e <BootActivate+0x16>
 8002312:	bf00      	nop
 8002314:	e000ed00 	.word	0xe000ed00
 8002318:	05fa0004 	.word	0x05fa0004

0800231c <BootComCanCheckActivationRequest>:
**            bootloader should be activated and, if so, activates it.
** \return    none.
**
****************************************************************************************/
static void BootComCanCheckActivationRequest(void)
{
 800231c:	b500      	push	{lr}
 800231e:	b08b      	sub	sp, #44	; 0x2c
  unsigned char packetIdMatches = 0;
  CAN_RxHeaderTypeDef rxMsgHeader;
  unsigned char rxMsgData[8];

  /* poll for received CAN messages that await processing. */
  if (HAL_CAN_GetRxMessage(&canHandle, CAN_RX_FIFO0, &rxMsgHeader, rxMsgData) == HAL_OK)
 8002320:	ab01      	add	r3, sp, #4
 8002322:	aa03      	add	r2, sp, #12
 8002324:	2100      	movs	r1, #0
 8002326:	480c      	ldr	r0, [pc, #48]	; (8002358 <BootComCanCheckActivationRequest+0x3c>)
 8002328:	f000 fafe 	bl	8002928 <HAL_CAN_GetRxMessage>
 800232c:	b920      	cbnz	r0, 8002338 <BootComCanCheckActivationRequest+0x1c>
  {
    /* check if this message has the configured CAN packet identifier. */
    if ((rxMsgId & 0x80000000) == 0)
    {
      /* was an 11-bit CAN message received that matches? */
      if ( (rxMsgHeader.StdId == rxMsgId) &&
 800232e:	9a03      	ldr	r2, [sp, #12]
 8002330:	f240 6367 	movw	r3, #1639	; 0x667
 8002334:	429a      	cmp	r2, r3
 8002336:	d002      	beq.n	800233e <BootComCanCheckActivationRequest+0x22>
        /* connection request received so start the bootloader */
        BootActivate();
      }
    }
  }
} /*** end of BootComCanCheckActivationRequest ***/
 8002338:	b00b      	add	sp, #44	; 0x2c
 800233a:	f85d fb04 	ldr.w	pc, [sp], #4
           (rxMsgHeader.IDE == CAN_ID_STD) )
 800233e:	9b05      	ldr	r3, [sp, #20]
      if ( (rxMsgHeader.StdId == rxMsgId) &&
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f9      	bne.n	8002338 <BootComCanCheckActivationRequest+0x1c>
      if ((rxMsgData[0] == 0xff) && (rxMsgHeader.DLC == 2))
 8002344:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002348:	2bff      	cmp	r3, #255	; 0xff
 800234a:	d1f5      	bne.n	8002338 <BootComCanCheckActivationRequest+0x1c>
 800234c:	9b07      	ldr	r3, [sp, #28]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d1f2      	bne.n	8002338 <BootComCanCheckActivationRequest+0x1c>
        BootActivate();
 8002352:	f7ff ffd1 	bl	80022f8 <BootActivate>
 8002356:	bf00      	nop
 8002358:	20000028 	.word	0x20000028

0800235c <BootComCheckActivationRequest>:
{
 800235c:	b508      	push	{r3, lr}
  BootComCanCheckActivationRequest();
 800235e:	f7ff ffdd 	bl	800231c <BootComCanCheckActivationRequest>
} /*** end of BootComCheckActivationRequest ***/
 8002362:	bd08      	pop	{r3, pc}

08002364 <LedInit>:
** \brief     Initializes the LED. 
** \return    none.
**
****************************************************************************************/
void LedInit(void)
{
 8002364:	b508      	push	{r3, lr}
  /* Note that the initialization of the LED GPIO pin is done in HAL_MspInit(). All that
   * is left to do here is to make sure the LED is turned off after initialization.
   */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002366:	2200      	movs	r2, #0
 8002368:	2108      	movs	r1, #8
 800236a:	4802      	ldr	r0, [pc, #8]	; (8002374 <LedInit+0x10>)
 800236c:	f000 fc96 	bl	8002c9c <HAL_GPIO_WritePin>
} /*** end of LedInit ***/
 8002370:	bd08      	pop	{r3, pc}
 8002372:	bf00      	nop
 8002374:	48000400 	.word	0x48000400

08002378 <LedToggle>:
** \brief     Toggles the LED at a fixed time interval.
** \return    none.
**
****************************************************************************************/
void LedToggle(void)
{
 8002378:	b510      	push	{r4, lr}
  static unsigned char led_toggle_state = 0;
  static unsigned long timer_counter_last = 0;
  unsigned long timer_counter_now;

  /* check if toggle interval time passed */
  timer_counter_now = TimerGet();
 800237a:	f000 f824 	bl	80023c6 <TimerGet>
  if ( (timer_counter_now - timer_counter_last) < LED_TOGGLE_MS)
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <LedToggle+0x40>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	1ac3      	subs	r3, r0, r3
 8002384:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002388:	d30c      	bcc.n	80023a4 <LedToggle+0x2c>
 800238a:	4604      	mov	r4, r0
    /* not yet time to toggle */
    return;
  }

  /* determine toggle action */
  if (led_toggle_state == 0)
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <LedToggle+0x44>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	b94b      	cbnz	r3, 80023a6 <LedToggle+0x2e>
  {
    led_toggle_state = 1;
 8002392:	2201      	movs	r2, #1
 8002394:	4b09      	ldr	r3, [pc, #36]	; (80023bc <LedToggle+0x44>)
 8002396:	701a      	strb	r2, [r3, #0]
    /* turn the LED on */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002398:	2108      	movs	r1, #8
 800239a:	4809      	ldr	r0, [pc, #36]	; (80023c0 <LedToggle+0x48>)
 800239c:	f000 fc7e 	bl	8002c9c <HAL_GPIO_WritePin>
    /* turn the LED off */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
  }

  /* store toggle time to determine next toggle interval */
  timer_counter_last = timer_counter_now;
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <LedToggle+0x40>)
 80023a2:	601c      	str	r4, [r3, #0]
} /*** end of LedToggle ***/
 80023a4:	bd10      	pop	{r4, pc}
    led_toggle_state = 0;
 80023a6:	2200      	movs	r2, #0
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <LedToggle+0x44>)
 80023aa:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80023ac:	2108      	movs	r1, #8
 80023ae:	4804      	ldr	r0, [pc, #16]	; (80023c0 <LedToggle+0x48>)
 80023b0:	f000 fc74 	bl	8002c9c <HAL_GPIO_WritePin>
 80023b4:	e7f4      	b.n	80023a0 <LedToggle+0x28>
 80023b6:	bf00      	nop
 80023b8:	20000054 	.word	0x20000054
 80023bc:	20000050 	.word	0x20000050
 80023c0:	48000400 	.word	0x48000400

080023c4 <TimerInit>:
void TimerInit(void)
{
  /* The HAL initialization already configured the Systick interrupt to generate an
   * interrupt every 1 millisecond. Nothing more needs to be done here.
   */
} /*** end of TimerInit ***/
 80023c4:	4770      	bx	lr

080023c6 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
unsigned long TimerGet(void)
{
 80023c6:	b508      	push	{r3, lr}
  /* Read and return the tick counter value. */
  return HAL_GetTick();
 80023c8:	f000 f956 	bl	8002678 <HAL_GetTick>
} /*** end of TimerGet ***/
 80023cc:	bd08      	pop	{r3, pc}
	...

080023d0 <VectorBase_Config>:
   * c-startup code.
   */
  extern const unsigned long g_pfnVectors[];

  /* Remap the vector table to where the vector table is located for this program. */
  SCB->VTOR = (unsigned long)&g_pfnVectors[0];
 80023d0:	4a01      	ldr	r2, [pc, #4]	; (80023d8 <VectorBase_Config+0x8>)
 80023d2:	4b02      	ldr	r3, [pc, #8]	; (80023dc <VectorBase_Config+0xc>)
 80023d4:	609a      	str	r2, [r3, #8]
}
 80023d6:	4770      	bx	lr
 80023d8:	08002000 	.word	0x08002000
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023e0:	b530      	push	{r4, r5, lr}
 80023e2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	2400      	movs	r4, #0
 80023e6:	9403      	str	r4, [sp, #12]
 80023e8:	9404      	str	r4, [sp, #16]
 80023ea:	9405      	str	r4, [sp, #20]
 80023ec:	9406      	str	r4, [sp, #24]
 80023ee:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023f0:	4b16      	ldr	r3, [pc, #88]	; (800244c <MX_GPIO_Init+0x6c>)
 80023f2:	695a      	ldr	r2, [r3, #20]
 80023f4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80023f8:	615a      	str	r2, [r3, #20]
 80023fa:	695a      	ldr	r2, [r3, #20]
 80023fc:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002400:	9200      	str	r2, [sp, #0]
 8002402:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800240a:	615a      	str	r2, [r3, #20]
 800240c:	695a      	ldr	r2, [r3, #20]
 800240e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002412:	9201      	str	r2, [sp, #4]
 8002414:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800241c:	615a      	str	r2, [r3, #20]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002424:	9302      	str	r3, [sp, #8]
 8002426:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002428:	4d09      	ldr	r5, [pc, #36]	; (8002450 <MX_GPIO_Init+0x70>)
 800242a:	4622      	mov	r2, r4
 800242c:	2108      	movs	r1, #8
 800242e:	4628      	mov	r0, r5
 8002430:	f000 fc34 	bl	8002c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002434:	2308      	movs	r3, #8
 8002436:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002438:	2301      	movs	r3, #1
 800243a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002440:	a903      	add	r1, sp, #12
 8002442:	4628      	mov	r0, r5
 8002444:	f000 fb66 	bl	8002b14 <HAL_GPIO_Init>

}
 8002448:	b009      	add	sp, #36	; 0x24
 800244a:	bd30      	pop	{r4, r5, pc}
 800244c:	40021000 	.word	0x40021000
 8002450:	48000400 	.word	0x48000400

08002454 <SystemClock_Config>:
{
 8002454:	b530      	push	{r4, r5, lr}
 8002456:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002458:	2220      	movs	r2, #32
 800245a:	2100      	movs	r1, #0
 800245c:	a807      	add	r0, sp, #28
 800245e:	f001 f88f 	bl	8003580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002462:	2400      	movs	r4, #0
 8002464:	9401      	str	r4, [sp, #4]
 8002466:	9402      	str	r4, [sp, #8]
 8002468:	9403      	str	r4, [sp, #12]
 800246a:	9404      	str	r4, [sp, #16]
 800246c:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800246e:	2502      	movs	r5, #2
 8002470:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002472:	2301      	movs	r3, #1
 8002474:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002476:	2310      	movs	r3, #16
 8002478:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800247a:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800247c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002480:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002482:	a806      	add	r0, sp, #24
 8002484:	f000 fc10 	bl	8002ca8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002488:	230f      	movs	r3, #15
 800248a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800248c:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800248e:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002494:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002496:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002498:	4629      	mov	r1, r5
 800249a:	a801      	add	r0, sp, #4
 800249c:	f000 ff5e 	bl	800335c <HAL_RCC_ClockConfig>
}
 80024a0:	b011      	add	sp, #68	; 0x44
 80024a2:	bd30      	pop	{r4, r5, pc}

080024a4 <main>:
{
 80024a4:	b508      	push	{r3, lr}
  VectorBase_Config();
 80024a6:	f7ff ff93 	bl	80023d0 <VectorBase_Config>
  HAL_Init();
 80024aa:	f000 f8c7 	bl	800263c <HAL_Init>
  SystemClock_Config();
 80024ae:	f7ff ffd1 	bl	8002454 <SystemClock_Config>
  MX_GPIO_Init();
 80024b2:	f7ff ff95 	bl	80023e0 <MX_GPIO_Init>
  AppInit();
 80024b6:	f7ff fe89 	bl	80021cc <AppInit>
    AppTask();
 80024ba:	f7ff fe8f 	bl	80021dc <AppTask>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80024be:	2201      	movs	r2, #1
 80024c0:	2108      	movs	r1, #8
 80024c2:	4802      	ldr	r0, [pc, #8]	; (80024cc <main+0x28>)
 80024c4:	f000 fbea 	bl	8002c9c <HAL_GPIO_WritePin>
 80024c8:	e7f7      	b.n	80024ba <main+0x16>
 80024ca:	bf00      	nop
 80024cc:	48000400 	.word	0x48000400

080024d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024d0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_MspInit+0x2c>)
 80024d4:	699a      	ldr	r2, [r3, #24]
 80024d6:	f042 0201 	orr.w	r2, r2, #1
 80024da:	619a      	str	r2, [r3, #24]
 80024dc:	699a      	ldr	r2, [r3, #24]
 80024de:	f002 0201 	and.w	r2, r2, #1
 80024e2:	9200      	str	r2, [sp, #0]
 80024e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024e6:	69da      	ldr	r2, [r3, #28]
 80024e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024ec:	61da      	str	r2, [r3, #28]
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f8:	b002      	add	sp, #8
 80024fa:	4770      	bx	lr
 80024fc:	40021000 	.word	0x40021000

08002500 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002500:	b500      	push	{lr}
 8002502:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	2300      	movs	r3, #0
 8002506:	9303      	str	r3, [sp, #12]
 8002508:	9304      	str	r3, [sp, #16]
 800250a:	9305      	str	r3, [sp, #20]
 800250c:	9306      	str	r3, [sp, #24]
 800250e:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN)
 8002510:	6802      	ldr	r2, [r0, #0]
 8002512:	4b14      	ldr	r3, [pc, #80]	; (8002564 <HAL_CAN_MspInit+0x64>)
 8002514:	429a      	cmp	r2, r3
 8002516:	d002      	beq.n	800251e <HAL_CAN_MspInit+0x1e>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8002518:	b009      	add	sp, #36	; 0x24
 800251a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 800251e:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8002522:	69da      	ldr	r2, [r3, #28]
 8002524:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002528:	61da      	str	r2, [r3, #28]
 800252a:	69da      	ldr	r2, [r3, #28]
 800252c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002530:	9201      	str	r2, [sp, #4]
 8002532:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002534:	695a      	ldr	r2, [r3, #20]
 8002536:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800253a:	615a      	str	r2, [r3, #20]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	9302      	str	r3, [sp, #8]
 8002544:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002546:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800254a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254c:	2302      	movs	r3, #2
 800254e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002550:	2303      	movs	r3, #3
 8002552:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8002554:	2309      	movs	r3, #9
 8002556:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002558:	a903      	add	r1, sp, #12
 800255a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800255e:	f000 fad9 	bl	8002b14 <HAL_GPIO_Init>
}
 8002562:	e7d9      	b.n	8002518 <HAL_CAN_MspInit+0x18>
 8002564:	40006400 	.word	0x40006400

08002568 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002568:	4770      	bx	lr

0800256a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800256a:	e7fe      	b.n	800256a <HardFault_Handler>

0800256c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800256c:	e7fe      	b.n	800256c <MemManage_Handler>

0800256e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800256e:	e7fe      	b.n	800256e <BusFault_Handler>

08002570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002570:	e7fe      	b.n	8002570 <UsageFault_Handler>

08002572 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002572:	4770      	bx	lr

08002574 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002574:	4770      	bx	lr

08002576 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002576:	4770      	bx	lr

08002578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002578:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800257a:	f000 f871 	bl	8002660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800257e:	bd08      	pop	{r3, pc}

08002580 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <SystemInit+0x18>)
 8002582:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002586:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800258a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800258e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002592:	609a      	str	r2, [r3, #8]
#endif
}
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800259c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025d4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80025a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80025a2:	e003      	b.n	80025ac <LoopCopyDataInit>

080025a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80025a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80025a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80025aa:	3104      	adds	r1, #4

080025ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80025ac:	480b      	ldr	r0, [pc, #44]	; (80025dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80025ae:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80025b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80025b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80025b4:	d3f6      	bcc.n	80025a4 <CopyDataInit>
	ldr	r2, =_sbss
 80025b6:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80025b8:	e002      	b.n	80025c0 <LoopFillZerobss>

080025ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80025ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80025bc:	f842 3b04 	str.w	r3, [r2], #4

080025c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80025c0:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <LoopForever+0x16>)
	cmp	r2, r3
 80025c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80025c4:	d3f9      	bcc.n	80025ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025c6:	f7ff ffdb 	bl	8002580 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ca:	f000 ffb5 	bl	8003538 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025ce:	f7ff ff69 	bl	80024a4 <main>

080025d2 <LoopForever>:

LoopForever:
    b LoopForever
 80025d2:	e7fe      	b.n	80025d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80025d4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80025d8:	0800360c 	.word	0x0800360c
	ldr	r0, =_sdata
 80025dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80025e0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80025e4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80025e8:	2000005c 	.word	0x2000005c

080025ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025ec:	e7fe      	b.n	80025ec <ADC1_2_IRQHandler>
	...

080025f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f0:	b510      	push	{r4, lr}
 80025f2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025f4:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <HAL_InitTick+0x40>)
 80025f6:	7818      	ldrb	r0, [r3, #0]
 80025f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025fc:	fbb3 f3f0 	udiv	r3, r3, r0
 8002600:	4a0c      	ldr	r2, [pc, #48]	; (8002634 <HAL_InitTick+0x44>)
 8002602:	6810      	ldr	r0, [r2, #0]
 8002604:	fbb0 f0f3 	udiv	r0, r0, r3
 8002608:	f000 fa6e 	bl	8002ae8 <HAL_SYSTICK_Config>
 800260c:	b968      	cbnz	r0, 800262a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800260e:	2c0f      	cmp	r4, #15
 8002610:	d901      	bls.n	8002616 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8002612:	2001      	movs	r0, #1
 8002614:	e00a      	b.n	800262c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002616:	2200      	movs	r2, #0
 8002618:	4621      	mov	r1, r4
 800261a:	f04f 30ff 	mov.w	r0, #4294967295
 800261e:	f000 fa2f 	bl	8002a80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_InitTick+0x48>)
 8002624:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 8002626:	2000      	movs	r0, #0
 8002628:	e000      	b.n	800262c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800262a:	2001      	movs	r0, #1
}
 800262c:	bd10      	pop	{r4, pc}
 800262e:	bf00      	nop
 8002630:	20000004 	.word	0x20000004
 8002634:	20000000 	.word	0x20000000
 8002638:	20000008 	.word	0x20000008

0800263c <HAL_Init>:
{
 800263c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800263e:	4a07      	ldr	r2, [pc, #28]	; (800265c <HAL_Init+0x20>)
 8002640:	6813      	ldr	r3, [r2, #0]
 8002642:	f043 0310 	orr.w	r3, r3, #16
 8002646:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002648:	2003      	movs	r0, #3
 800264a:	f000 fa07 	bl	8002a5c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800264e:	2000      	movs	r0, #0
 8002650:	f7ff ffce 	bl	80025f0 <HAL_InitTick>
  HAL_MspInit();
 8002654:	f7ff ff3c 	bl	80024d0 <HAL_MspInit>
}
 8002658:	2000      	movs	r0, #0
 800265a:	bd08      	pop	{r3, pc}
 800265c:	40022000 	.word	0x40022000

08002660 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002660:	4a03      	ldr	r2, [pc, #12]	; (8002670 <HAL_IncTick+0x10>)
 8002662:	6811      	ldr	r1, [r2, #0]
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <HAL_IncTick+0x14>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	440b      	add	r3, r1
 800266a:	6013      	str	r3, [r2, #0]
}
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	20000058 	.word	0x20000058
 8002674:	20000004 	.word	0x20000004

08002678 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8002678:	4b01      	ldr	r3, [pc, #4]	; (8002680 <HAL_GetTick+0x8>)
 800267a:	6818      	ldr	r0, [r3, #0]
}
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000058 	.word	0x20000058

08002684 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002684:	2800      	cmp	r0, #0
 8002686:	f000 80a1 	beq.w	80027cc <HAL_CAN_Init+0x148>
{
 800268a:	b538      	push	{r3, r4, r5, lr}
 800268c:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800268e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002692:	b1d3      	cbz	r3, 80026ca <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002694:	6822      	ldr	r2, [r4, #0]
 8002696:	6813      	ldr	r3, [r2, #0]
 8002698:	f023 0302 	bic.w	r3, r3, #2
 800269c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800269e:	f7ff ffeb 	bl	8002678 <HAL_GetTick>
 80026a2:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026a4:	6823      	ldr	r3, [r4, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	f012 0f02 	tst.w	r2, #2
 80026ac:	d010      	beq.n	80026d0 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026ae:	f7ff ffe3 	bl	8002678 <HAL_GetTick>
 80026b2:	1b40      	subs	r0, r0, r5
 80026b4:	280a      	cmp	r0, #10
 80026b6:	d9f5      	bls.n	80026a4 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026be:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026c0:	2305      	movs	r3, #5
 80026c2:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 80026c6:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80026c8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80026ca:	f7ff ff19 	bl	8002500 <HAL_CAN_MspInit>
 80026ce:	e7e1      	b.n	8002694 <HAL_CAN_Init+0x10>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80026d8:	f7ff ffce 	bl	8002678 <HAL_GetTick>
 80026dc:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026de:	6823      	ldr	r3, [r4, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	f012 0f01 	tst.w	r2, #1
 80026e6:	d10d      	bne.n	8002704 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026e8:	f7ff ffc6 	bl	8002678 <HAL_GetTick>
 80026ec:	1b40      	subs	r0, r0, r5
 80026ee:	280a      	cmp	r0, #10
 80026f0:	d9f5      	bls.n	80026de <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f8:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80026fa:	2305      	movs	r3, #5
 80026fc:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8002700:	2001      	movs	r0, #1
 8002702:	e7e1      	b.n	80026c8 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002704:	7e22      	ldrb	r2, [r4, #24]
 8002706:	2a01      	cmp	r2, #1
 8002708:	d03d      	beq.n	8002786 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002710:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8002712:	7e63      	ldrb	r3, [r4, #25]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d03b      	beq.n	8002790 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002718:	6822      	ldr	r2, [r4, #0]
 800271a:	6813      	ldr	r3, [r2, #0]
 800271c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002720:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002722:	7ea3      	ldrb	r3, [r4, #26]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d039      	beq.n	800279c <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002728:	6822      	ldr	r2, [r4, #0]
 800272a:	6813      	ldr	r3, [r2, #0]
 800272c:	f023 0320 	bic.w	r3, r3, #32
 8002730:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002732:	7ee3      	ldrb	r3, [r4, #27]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d037      	beq.n	80027a8 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002738:	6822      	ldr	r2, [r4, #0]
 800273a:	6813      	ldr	r3, [r2, #0]
 800273c:	f043 0310 	orr.w	r3, r3, #16
 8002740:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002742:	7f23      	ldrb	r3, [r4, #28]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d035      	beq.n	80027b4 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002748:	6822      	ldr	r2, [r4, #0]
 800274a:	6813      	ldr	r3, [r2, #0]
 800274c:	f023 0308 	bic.w	r3, r3, #8
 8002750:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002752:	7f63      	ldrb	r3, [r4, #29]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d033      	beq.n	80027c0 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002758:	6822      	ldr	r2, [r4, #0]
 800275a:	6813      	ldr	r3, [r2, #0]
 800275c:	f023 0304 	bic.w	r3, r3, #4
 8002760:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002762:	68a3      	ldr	r3, [r4, #8]
 8002764:	68e2      	ldr	r2, [r4, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	6922      	ldr	r2, [r4, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	6962      	ldr	r2, [r4, #20]
 800276e:	4313      	orrs	r3, r2
 8002770:	6862      	ldr	r2, [r4, #4]
 8002772:	3a01      	subs	r2, #1
 8002774:	6821      	ldr	r1, [r4, #0]
 8002776:	4313      	orrs	r3, r2
 8002778:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800277a:	2000      	movs	r0, #0
 800277c:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800277e:	2301      	movs	r3, #1
 8002780:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8002784:	e7a0      	b.n	80026c8 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	e7c0      	b.n	8002712 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002790:	6822      	ldr	r2, [r4, #0]
 8002792:	6813      	ldr	r3, [r2, #0]
 8002794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e7c2      	b.n	8002722 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800279c:	6822      	ldr	r2, [r4, #0]
 800279e:	6813      	ldr	r3, [r2, #0]
 80027a0:	f043 0320 	orr.w	r3, r3, #32
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	e7c4      	b.n	8002732 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027a8:	6822      	ldr	r2, [r4, #0]
 80027aa:	6813      	ldr	r3, [r2, #0]
 80027ac:	f023 0310 	bic.w	r3, r3, #16
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e7c6      	b.n	8002742 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027b4:	6822      	ldr	r2, [r4, #0]
 80027b6:	6813      	ldr	r3, [r2, #0]
 80027b8:	f043 0308 	orr.w	r3, r3, #8
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e7c8      	b.n	8002752 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027c0:	6822      	ldr	r2, [r4, #0]
 80027c2:	6813      	ldr	r3, [r2, #0]
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e7ca      	b.n	8002762 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 80027cc:	2001      	movs	r0, #1
}
 80027ce:	4770      	bx	lr

080027d0 <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80027d0:	6803      	ldr	r3, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027d2:	f890 2020 	ldrb.w	r2, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80027d6:	3a01      	subs	r2, #1
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	2a01      	cmp	r2, #1
 80027dc:	d905      	bls.n	80027ea <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80027e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80027e6:	2001      	movs	r0, #1
  }
}
 80027e8:	4770      	bx	lr
{
 80027ea:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80027f0:	f042 0201 	orr.w	r2, r2, #1
 80027f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80027f8:	694a      	ldr	r2, [r1, #20]
 80027fa:	f002 021f 	and.w	r2, r2, #31
 80027fe:	2001      	movs	r0, #1
 8002800:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002804:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 8002808:	43d0      	mvns	r0, r2
 800280a:	4004      	ands	r4, r0
 800280c:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002810:	69cc      	ldr	r4, [r1, #28]
 8002812:	b9ac      	cbnz	r4, 8002840 <HAL_CAN_ConfigFilter+0x70>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002814:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 8002818:	4004      	ands	r4, r0
 800281a:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800281e:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002820:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002822:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002824:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002828:	3448      	adds	r4, #72	; 0x48
 800282a:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800282e:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002830:	880d      	ldrh	r5, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002832:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002834:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002838:	3448      	adds	r4, #72	; 0x48
 800283a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800283e:	6065      	str	r5, [r4, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002840:	69cc      	ldr	r4, [r1, #28]
 8002842:	2c01      	cmp	r4, #1
 8002844:	d019      	beq.n	800287a <HAL_CAN_ConfigFilter+0xaa>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002846:	698c      	ldr	r4, [r1, #24]
 8002848:	bb74      	cbnz	r4, 80028a8 <HAL_CAN_ConfigFilter+0xd8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800284a:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 800284e:	4004      	ands	r4, r0
 8002850:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002854:	690c      	ldr	r4, [r1, #16]
 8002856:	bb6c      	cbnz	r4, 80028b4 <HAL_CAN_ConfigFilter+0xe4>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002858:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
 800285c:	4020      	ands	r0, r4
 800285e:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002862:	6a09      	ldr	r1, [r1, #32]
 8002864:	2901      	cmp	r1, #1
 8002866:	d02b      	beq.n	80028c0 <HAL_CAN_ConfigFilter+0xf0>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002868:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800286c:	f022 0201 	bic.w	r2, r2, #1
 8002870:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 8002874:	2000      	movs	r0, #0
}
 8002876:	bc70      	pop	{r4, r5, r6}
 8002878:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800287a:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 800287e:	4314      	orrs	r4, r2
 8002880:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002884:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002886:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002888:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800288a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800288e:	3448      	adds	r4, #72	; 0x48
 8002890:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002894:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002896:	898d      	ldrh	r5, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002898:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800289a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800289e:	3448      	adds	r4, #72	; 0x48
 80028a0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80028a4:	6065      	str	r5, [r4, #4]
 80028a6:	e7ce      	b.n	8002846 <HAL_CAN_ConfigFilter+0x76>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80028a8:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80028ac:	4314      	orrs	r4, r2
 80028ae:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
 80028b2:	e7cf      	b.n	8002854 <HAL_CAN_ConfigFilter+0x84>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80028b4:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80028b8:	4310      	orrs	r0, r2
 80028ba:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 80028be:	e7d0      	b.n	8002862 <HAL_CAN_ConfigFilter+0x92>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80028c0:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80028c4:	430a      	orrs	r2, r1
 80028c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 80028ca:	e7cd      	b.n	8002868 <HAL_CAN_ConfigFilter+0x98>

080028cc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80028cc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80028ce:	f890 3020 	ldrb.w	r3, [r0, #32]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d005      	beq.n	80028e4 <HAL_CAN_Start+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80028d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80028da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80028de:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80028e0:	2001      	movs	r0, #1
  }
}
 80028e2:	bd38      	pop	{r3, r4, r5, pc}
 80028e4:	4604      	mov	r4, r0
    hcan->State = HAL_CAN_STATE_LISTENING;
 80028e6:	2302      	movs	r3, #2
 80028e8:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028ec:	6802      	ldr	r2, [r0, #0]
 80028ee:	6813      	ldr	r3, [r2, #0]
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80028f6:	f7ff febf 	bl	8002678 <HAL_GetTick>
 80028fa:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028fc:	6823      	ldr	r3, [r4, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f013 0f01 	tst.w	r3, #1
 8002904:	d00d      	beq.n	8002922 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002906:	f7ff feb7 	bl	8002678 <HAL_GetTick>
 800290a:	1b40      	subs	r0, r0, r5
 800290c:	280a      	cmp	r0, #10
 800290e:	d9f5      	bls.n	80028fc <HAL_CAN_Start+0x30>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002910:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002916:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8002918:	2305      	movs	r3, #5
 800291a:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 800291e:	2001      	movs	r0, #1
 8002920:	e7df      	b.n	80028e2 <HAL_CAN_Start+0x16>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002922:	2000      	movs	r0, #0
 8002924:	6260      	str	r0, [r4, #36]	; 0x24
    return HAL_OK;
 8002926:	e7dc      	b.n	80028e2 <HAL_CAN_Start+0x16>

08002928 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002928:	b430      	push	{r4, r5}
  HAL_CAN_StateTypeDef state = hcan->State;
 800292a:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800292e:	3c01      	subs	r4, #1
 8002930:	b2e4      	uxtb	r4, r4
 8002932:	2c01      	cmp	r4, #1
 8002934:	d906      	bls.n	8002944 <HAL_CAN_GetRxMessage+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002936:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800293c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800293e:	2001      	movs	r0, #1
  }
}
 8002940:	bc30      	pop	{r4, r5}
 8002942:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002944:	2900      	cmp	r1, #0
 8002946:	d16f      	bne.n	8002a28 <HAL_CAN_GetRxMessage+0x100>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002948:	6804      	ldr	r4, [r0, #0]
 800294a:	68e4      	ldr	r4, [r4, #12]
 800294c:	f014 0f03 	tst.w	r4, #3
 8002950:	d064      	beq.n	8002a1c <HAL_CAN_GetRxMessage+0xf4>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002952:	6805      	ldr	r5, [r0, #0]
 8002954:	f101 041b 	add.w	r4, r1, #27
 8002958:	0124      	lsls	r4, r4, #4
 800295a:	592c      	ldr	r4, [r5, r4]
 800295c:	f004 0404 	and.w	r4, r4, #4
 8002960:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002962:	2c00      	cmp	r4, #0
 8002964:	d16b      	bne.n	8002a3e <HAL_CAN_GetRxMessage+0x116>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002966:	6805      	ldr	r5, [r0, #0]
 8002968:	f101 041b 	add.w	r4, r1, #27
 800296c:	0124      	lsls	r4, r4, #4
 800296e:	592c      	ldr	r4, [r5, r4]
 8002970:	0d64      	lsrs	r4, r4, #21
 8002972:	6014      	str	r4, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002974:	6805      	ldr	r5, [r0, #0]
 8002976:	f101 041b 	add.w	r4, r1, #27
 800297a:	0124      	lsls	r4, r4, #4
 800297c:	592d      	ldr	r5, [r5, r4]
 800297e:	f005 0502 	and.w	r5, r5, #2
 8002982:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002984:	6805      	ldr	r5, [r0, #0]
 8002986:	4425      	add	r5, r4
 8002988:	686d      	ldr	r5, [r5, #4]
 800298a:	f005 050f 	and.w	r5, r5, #15
 800298e:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002990:	6805      	ldr	r5, [r0, #0]
 8002992:	4425      	add	r5, r4
 8002994:	686d      	ldr	r5, [r5, #4]
 8002996:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800299a:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800299c:	6805      	ldr	r5, [r0, #0]
 800299e:	442c      	add	r4, r5
 80029a0:	6864      	ldr	r4, [r4, #4]
 80029a2:	0c24      	lsrs	r4, r4, #16
 80029a4:	6154      	str	r4, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80029a6:	6804      	ldr	r4, [r0, #0]
 80029a8:	010a      	lsls	r2, r1, #4
 80029aa:	4414      	add	r4, r2
 80029ac:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80029b0:	701c      	strb	r4, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80029b2:	6804      	ldr	r4, [r0, #0]
 80029b4:	4414      	add	r4, r2
 80029b6:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80029ba:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80029be:	705c      	strb	r4, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80029c0:	6804      	ldr	r4, [r0, #0]
 80029c2:	4414      	add	r4, r2
 80029c4:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80029c8:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80029cc:	709c      	strb	r4, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80029ce:	6804      	ldr	r4, [r0, #0]
 80029d0:	4414      	add	r4, r2
 80029d2:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80029d6:	0e24      	lsrs	r4, r4, #24
 80029d8:	70dc      	strb	r4, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80029da:	6804      	ldr	r4, [r0, #0]
 80029dc:	4414      	add	r4, r2
 80029de:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 80029e2:	711c      	strb	r4, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80029e4:	6804      	ldr	r4, [r0, #0]
 80029e6:	4414      	add	r4, r2
 80029e8:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 80029ec:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80029f0:	715c      	strb	r4, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80029f2:	6804      	ldr	r4, [r0, #0]
 80029f4:	4414      	add	r4, r2
 80029f6:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 80029fa:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80029fe:	719c      	strb	r4, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002a00:	6804      	ldr	r4, [r0, #0]
 8002a02:	4422      	add	r2, r4
 8002a04:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8002a08:	0e12      	lsrs	r2, r2, #24
 8002a0a:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a0c:	b9f9      	cbnz	r1, 8002a4e <HAL_CAN_GetRxMessage+0x126>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a0e:	6802      	ldr	r2, [r0, #0]
 8002a10:	68d3      	ldr	r3, [r2, #12]
 8002a12:	f043 0320 	orr.w	r3, r3, #32
 8002a16:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8002a18:	2000      	movs	r0, #0
 8002a1a:	e791      	b.n	8002940 <HAL_CAN_GetRxMessage+0x18>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a22:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8002a24:	2001      	movs	r0, #1
 8002a26:	e78b      	b.n	8002940 <HAL_CAN_GetRxMessage+0x18>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002a28:	6804      	ldr	r4, [r0, #0]
 8002a2a:	6924      	ldr	r4, [r4, #16]
 8002a2c:	f014 0f03 	tst.w	r4, #3
 8002a30:	d18f      	bne.n	8002952 <HAL_CAN_GetRxMessage+0x2a>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a32:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a38:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	e780      	b.n	8002940 <HAL_CAN_GetRxMessage+0x18>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002a3e:	6805      	ldr	r5, [r0, #0]
 8002a40:	f101 041b 	add.w	r4, r1, #27
 8002a44:	0124      	lsls	r4, r4, #4
 8002a46:	592c      	ldr	r4, [r5, r4]
 8002a48:	08e4      	lsrs	r4, r4, #3
 8002a4a:	6054      	str	r4, [r2, #4]
 8002a4c:	e792      	b.n	8002974 <HAL_CAN_GetRxMessage+0x4c>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a4e:	6802      	ldr	r2, [r0, #0]
 8002a50:	6913      	ldr	r3, [r2, #16]
 8002a52:	f043 0320 	orr.w	r3, r3, #32
 8002a56:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 8002a58:	2000      	movs	r0, #0
 8002a5a:	e771      	b.n	8002940 <HAL_CAN_GetRxMessage+0x18>

08002a5c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a5c:	4a07      	ldr	r2, [pc, #28]	; (8002a7c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002a5e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a60:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a64:	041b      	lsls	r3, r3, #16
 8002a66:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a68:	0200      	lsls	r0, r0, #8
 8002a6a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a6e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8002a70:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8002a74:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002a78:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002a7a:	4770      	bx	lr
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a80:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a82:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <HAL_NVIC_SetPriority+0x60>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a8a:	f1c3 0407 	rsb	r4, r3, #7
 8002a8e:	2c04      	cmp	r4, #4
 8002a90:	bf28      	it	cs
 8002a92:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a94:	1d1d      	adds	r5, r3, #4
 8002a96:	2d06      	cmp	r5, #6
 8002a98:	d918      	bls.n	8002acc <HAL_NVIC_SetPriority+0x4c>
 8002a9a:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a9c:	f04f 35ff 	mov.w	r5, #4294967295
 8002aa0:	fa05 f404 	lsl.w	r4, r5, r4
 8002aa4:	ea21 0104 	bic.w	r1, r1, r4
 8002aa8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aaa:	fa05 f303 	lsl.w	r3, r5, r3
 8002aae:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	db0b      	blt.n	8002ad0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab8:	0109      	lsls	r1, r1, #4
 8002aba:	b2c9      	uxtb	r1, r1
 8002abc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002ac0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002ac4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002ac8:	bc30      	pop	{r4, r5}
 8002aca:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002acc:	2300      	movs	r3, #0
 8002ace:	e7e5      	b.n	8002a9c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad0:	f000 000f 	and.w	r0, r0, #15
 8002ad4:	0109      	lsls	r1, r1, #4
 8002ad6:	b2c9      	uxtb	r1, r1
 8002ad8:	4b02      	ldr	r3, [pc, #8]	; (8002ae4 <HAL_NVIC_SetPriority+0x64>)
 8002ada:	5419      	strb	r1, [r3, r0]
 8002adc:	e7f4      	b.n	8002ac8 <HAL_NVIC_SetPriority+0x48>
 8002ade:	bf00      	nop
 8002ae0:	e000ed00 	.word	0xe000ed00
 8002ae4:	e000ed14 	.word	0xe000ed14

08002ae8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae8:	3801      	subs	r0, #1
 8002aea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002aee:	d20a      	bcs.n	8002b06 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_SYSTICK_Config+0x24>)
 8002af2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af4:	4a06      	ldr	r2, [pc, #24]	; (8002b10 <HAL_SYSTICK_Config+0x28>)
 8002af6:	21f0      	movs	r1, #240	; 0xf0
 8002af8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002afc:	2000      	movs	r0, #0
 8002afe:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b00:	2207      	movs	r2, #7
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002b06:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000e010 	.word	0xe000e010
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b16:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8002b18:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b1a:	e036      	b.n	8002b8a <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b1c:	2403      	movs	r4, #3
 8002b1e:	e000      	b.n	8002b22 <HAL_GPIO_Init+0xe>
 8002b20:	2400      	movs	r4, #0
 8002b22:	40b4      	lsls	r4, r6
 8002b24:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b26:	3502      	adds	r5, #2
 8002b28:	4e58      	ldr	r6, [pc, #352]	; (8002c8c <HAL_GPIO_Init+0x178>)
 8002b2a:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b2e:	4c58      	ldr	r4, [pc, #352]	; (8002c90 <HAL_GPIO_Init+0x17c>)
 8002b30:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002b32:	43d4      	mvns	r4, r2
 8002b34:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b38:	684f      	ldr	r7, [r1, #4]
 8002b3a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002b3e:	d001      	beq.n	8002b44 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8002b40:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8002b44:	4d52      	ldr	r5, [pc, #328]	; (8002c90 <HAL_GPIO_Init+0x17c>)
 8002b46:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8002b48:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002b4a:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b4e:	684f      	ldr	r7, [r1, #4]
 8002b50:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002b54:	d001      	beq.n	8002b5a <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8002b56:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8002b5a:	4d4d      	ldr	r5, [pc, #308]	; (8002c90 <HAL_GPIO_Init+0x17c>)
 8002b5c:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b5e:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8002b60:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b64:	684f      	ldr	r7, [r1, #4]
 8002b66:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002b6a:	d001      	beq.n	8002b70 <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 8002b6c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8002b70:	4d47      	ldr	r5, [pc, #284]	; (8002c90 <HAL_GPIO_Init+0x17c>)
 8002b72:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8002b74:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8002b76:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b78:	684e      	ldr	r6, [r1, #4]
 8002b7a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002b7e:	d001      	beq.n	8002b84 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8002b80:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8002b84:	4a42      	ldr	r2, [pc, #264]	; (8002c90 <HAL_GPIO_Init+0x17c>)
 8002b86:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8002b88:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b8a:	680a      	ldr	r2, [r1, #0]
 8002b8c:	fa32 f403 	lsrs.w	r4, r2, r3
 8002b90:	d079      	beq.n	8002c86 <HAL_GPIO_Init+0x172>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b92:	2401      	movs	r4, #1
 8002b94:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8002b96:	4022      	ands	r2, r4
 8002b98:	d0f6      	beq.n	8002b88 <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b9a:	684d      	ldr	r5, [r1, #4]
 8002b9c:	1e6e      	subs	r6, r5, #1
 8002b9e:	2e01      	cmp	r6, #1
 8002ba0:	d903      	bls.n	8002baa <HAL_GPIO_Init+0x96>
 8002ba2:	2d11      	cmp	r5, #17
 8002ba4:	d001      	beq.n	8002baa <HAL_GPIO_Init+0x96>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ba6:	2d12      	cmp	r5, #18
 8002ba8:	d112      	bne.n	8002bd0 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR;
 8002baa:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002bac:	005f      	lsls	r7, r3, #1
 8002bae:	2503      	movs	r5, #3
 8002bb0:	40bd      	lsls	r5, r7
 8002bb2:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bb6:	68cd      	ldr	r5, [r1, #12]
 8002bb8:	40bd      	lsls	r5, r7
 8002bba:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8002bbc:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8002bbe:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bc0:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002bc4:	684d      	ldr	r5, [r1, #4]
 8002bc6:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8002bca:	409c      	lsls	r4, r3
 8002bcc:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8002bce:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8002bd0:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002bd2:	005f      	lsls	r7, r3, #1
 8002bd4:	2403      	movs	r4, #3
 8002bd6:	40bc      	lsls	r4, r7
 8002bd8:	43e4      	mvns	r4, r4
 8002bda:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bdc:	688e      	ldr	r6, [r1, #8]
 8002bde:	40be      	lsls	r6, r7
 8002be0:	432e      	orrs	r6, r5
      GPIOx->PUPDR = temp;
 8002be2:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002be4:	684d      	ldr	r5, [r1, #4]
 8002be6:	2d02      	cmp	r5, #2
 8002be8:	d001      	beq.n	8002bee <HAL_GPIO_Init+0xda>
 8002bea:	2d12      	cmp	r5, #18
 8002bec:	d113      	bne.n	8002c16 <HAL_GPIO_Init+0x102>
        temp = GPIOx->AFR[position >> 3u];
 8002bee:	08de      	lsrs	r6, r3, #3
 8002bf0:	3608      	adds	r6, #8
 8002bf2:	f850 e026 	ldr.w	lr, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bf6:	f003 0507 	and.w	r5, r3, #7
 8002bfa:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8002bfe:	250f      	movs	r5, #15
 8002c00:	fa05 f50c 	lsl.w	r5, r5, ip
 8002c04:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c08:	690d      	ldr	r5, [r1, #16]
 8002c0a:	fa05 f50c 	lsl.w	r5, r5, ip
 8002c0e:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 8002c12:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8002c16:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c18:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c1a:	684d      	ldr	r5, [r1, #4]
 8002c1c:	f005 0503 	and.w	r5, r5, #3
 8002c20:	40bd      	lsls	r5, r7
 8002c22:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8002c24:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c26:	684c      	ldr	r4, [r1, #4]
 8002c28:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002c2c:	d0ac      	beq.n	8002b88 <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c2e:	4c19      	ldr	r4, [pc, #100]	; (8002c94 <HAL_GPIO_Init+0x180>)
 8002c30:	69a5      	ldr	r5, [r4, #24]
 8002c32:	f045 0501 	orr.w	r5, r5, #1
 8002c36:	61a5      	str	r5, [r4, #24]
 8002c38:	69a4      	ldr	r4, [r4, #24]
 8002c3a:	f004 0401 	and.w	r4, r4, #1
 8002c3e:	9401      	str	r4, [sp, #4]
 8002c40:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002c42:	089d      	lsrs	r5, r3, #2
 8002c44:	1cae      	adds	r6, r5, #2
 8002c46:	4c11      	ldr	r4, [pc, #68]	; (8002c8c <HAL_GPIO_Init+0x178>)
 8002c48:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c4c:	f003 0403 	and.w	r4, r3, #3
 8002c50:	00a6      	lsls	r6, r4, #2
 8002c52:	240f      	movs	r4, #15
 8002c54:	40b4      	lsls	r4, r6
 8002c56:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c5a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002c5e:	f43f af5f 	beq.w	8002b20 <HAL_GPIO_Init+0xc>
 8002c62:	4c0d      	ldr	r4, [pc, #52]	; (8002c98 <HAL_GPIO_Init+0x184>)
 8002c64:	42a0      	cmp	r0, r4
 8002c66:	d00a      	beq.n	8002c7e <HAL_GPIO_Init+0x16a>
 8002c68:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c6c:	42a0      	cmp	r0, r4
 8002c6e:	d008      	beq.n	8002c82 <HAL_GPIO_Init+0x16e>
 8002c70:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c74:	42a0      	cmp	r0, r4
 8002c76:	f43f af51 	beq.w	8002b1c <HAL_GPIO_Init+0x8>
 8002c7a:	2405      	movs	r4, #5
 8002c7c:	e751      	b.n	8002b22 <HAL_GPIO_Init+0xe>
 8002c7e:	2401      	movs	r4, #1
 8002c80:	e74f      	b.n	8002b22 <HAL_GPIO_Init+0xe>
 8002c82:	2402      	movs	r4, #2
 8002c84:	e74d      	b.n	8002b22 <HAL_GPIO_Init+0xe>
  }
}
 8002c86:	b003      	add	sp, #12
 8002c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40010000 	.word	0x40010000
 8002c90:	40010400 	.word	0x40010400
 8002c94:	40021000 	.word	0x40021000
 8002c98:	48000400 	.word	0x48000400

08002c9c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c9c:	b90a      	cbnz	r2, 8002ca2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c9e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002ca0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ca2:	6181      	str	r1, [r0, #24]
 8002ca4:	4770      	bx	lr
	...

08002ca8 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	f000 830d 	beq.w	80032c8 <HAL_RCC_OscConfig+0x620>
{
 8002cae:	b570      	push	{r4, r5, r6, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb4:	6803      	ldr	r3, [r0, #0]
 8002cb6:	f013 0f01 	tst.w	r3, #1
 8002cba:	d03b      	beq.n	8002d34 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002cbc:	4bb5      	ldr	r3, [pc, #724]	; (8002f94 <HAL_RCC_OscConfig+0x2ec>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 030c 	and.w	r3, r3, #12
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d01e      	beq.n	8002d06 <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cc8:	4bb2      	ldr	r3, [pc, #712]	; (8002f94 <HAL_RCC_OscConfig+0x2ec>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 030c 	and.w	r3, r3, #12
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d013      	beq.n	8002cfc <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cd4:	6863      	ldr	r3, [r4, #4]
 8002cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cda:	d068      	beq.n	8002dae <HAL_RCC_OscConfig+0x106>
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f040 8092 	bne.w	8002e06 <HAL_RCC_OscConfig+0x15e>
 8002ce2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ce6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	e05d      	b.n	8002db8 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cfc:	4ba5      	ldr	r3, [pc, #660]	; (8002f94 <HAL_RCC_OscConfig+0x2ec>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002d04:	d0e6      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x2c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d0a:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0e:	4ba1      	ldr	r3, [pc, #644]	; (8002f94 <HAL_RCC_OscConfig+0x2ec>)
 8002d10:	6819      	ldr	r1, [r3, #0]
 8002d12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	2201      	movs	r2, #1
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	420b      	tst	r3, r1
 8002d2a:	d003      	beq.n	8002d34 <HAL_RCC_OscConfig+0x8c>
 8002d2c:	6863      	ldr	r3, [r4, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 82cc 	beq.w	80032cc <HAL_RCC_OscConfig+0x624>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	f013 0f02 	tst.w	r3, #2
 8002d3a:	f000 80c6 	beq.w	8002eca <HAL_RCC_OscConfig+0x222>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d3e:	4b95      	ldr	r3, [pc, #596]	; (8002f94 <HAL_RCC_OscConfig+0x2ec>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f013 0f0c 	tst.w	r3, #12
 8002d46:	f000 809c 	beq.w	8002e82 <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d4a:	4b92      	ldr	r3, [pc, #584]	; (8002f94 <HAL_RCC_OscConfig+0x2ec>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	f000 808f 	beq.w	8002e76 <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d58:	6923      	ldr	r3, [r4, #16]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 80f3 	beq.w	8002f46 <HAL_RCC_OscConfig+0x29e>
 8002d60:	2201      	movs	r2, #1
 8002d62:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d6e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d76:	f7ff fc7f 	bl	8002678 <HAL_GetTick>
 8002d7a:	4605      	mov	r5, r0
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d82:	4b84      	ldr	r3, [pc, #528]	; (8002f94 <HAL_RCC_OscConfig+0x2ec>)
 8002d84:	6819      	ldr	r1, [r3, #0]
 8002d86:	2302      	movs	r3, #2
 8002d88:	fa93 f3a3 	rbit	r3, r3
 8002d8c:	fab3 f383 	clz	r3, r3
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	2201      	movs	r2, #1
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	420b      	tst	r3, r1
 8002d9c:	f040 80c4 	bne.w	8002f28 <HAL_RCC_OscConfig+0x280>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da0:	f7ff fc6a 	bl	8002678 <HAL_GetTick>
 8002da4:	1b40      	subs	r0, r0, r5
 8002da6:	2802      	cmp	r0, #2
 8002da8:	d9e8      	bls.n	8002d7c <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8002daa:	2003      	movs	r0, #3
 8002dac:	e295      	b.n	80032da <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dae:	4a79      	ldr	r2, [pc, #484]	; (8002f94 <HAL_RCC_OscConfig+0x2ec>)
 8002db0:	6813      	ldr	r3, [r2, #0]
 8002db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db6:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002db8:	4a76      	ldr	r2, [pc, #472]	; (8002f94 <HAL_RCC_OscConfig+0x2ec>)
 8002dba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002dbc:	f023 030f 	bic.w	r3, r3, #15
 8002dc0:	68a1      	ldr	r1, [r4, #8]
 8002dc2:	430b      	orrs	r3, r1
 8002dc4:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dc6:	6863      	ldr	r3, [r4, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d036      	beq.n	8002e3a <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8002dcc:	f7ff fc54 	bl	8002678 <HAL_GetTick>
 8002dd0:	4605      	mov	r5, r0
 8002dd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dd6:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	4b6e      	ldr	r3, [pc, #440]	; (8002f94 <HAL_RCC_OscConfig+0x2ec>)
 8002ddc:	6819      	ldr	r1, [r3, #0]
 8002dde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	2201      	movs	r2, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	420b      	tst	r3, r1
 8002df6:	d19d      	bne.n	8002d34 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df8:	f7ff fc3e 	bl	8002678 <HAL_GetTick>
 8002dfc:	1b40      	subs	r0, r0, r5
 8002dfe:	2864      	cmp	r0, #100	; 0x64
 8002e00:	d9e7      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8002e02:	2003      	movs	r0, #3
 8002e04:	e269      	b.n	80032da <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e0a:	d009      	beq.n	8002e20 <HAL_RCC_OscConfig+0x178>
 8002e0c:	4b61      	ldr	r3, [pc, #388]	; (8002f94 <HAL_RCC_OscConfig+0x2ec>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e7cb      	b.n	8002db8 <HAL_RCC_OscConfig+0x110>
 8002e20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e24:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	e7be      	b.n	8002db8 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8002e3a:	f7ff fc1d 	bl	8002678 <HAL_GetTick>
 8002e3e:	4605      	mov	r5, r0
 8002e40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e44:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e48:	4b52      	ldr	r3, [pc, #328]	; (8002f94 <HAL_RCC_OscConfig+0x2ec>)
 8002e4a:	6819      	ldr	r1, [r3, #0]
 8002e4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	420b      	tst	r3, r1
 8002e64:	f43f af66 	beq.w	8002d34 <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e68:	f7ff fc06 	bl	8002678 <HAL_GetTick>
 8002e6c:	1b40      	subs	r0, r0, r5
 8002e6e:	2864      	cmp	r0, #100	; 0x64
 8002e70:	d9e6      	bls.n	8002e40 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8002e72:	2003      	movs	r0, #3
 8002e74:	e231      	b.n	80032da <HAL_RCC_OscConfig+0x632>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e76:	4b47      	ldr	r3, [pc, #284]	; (8002f94 <HAL_RCC_OscConfig+0x2ec>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002e7e:	f47f af6b 	bne.w	8002d58 <HAL_RCC_OscConfig+0xb0>
 8002e82:	2302      	movs	r3, #2
 8002e84:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e88:	4b42      	ldr	r3, [pc, #264]	; (8002f94 <HAL_RCC_OscConfig+0x2ec>)
 8002e8a:	6819      	ldr	r1, [r3, #0]
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	420b      	tst	r3, r1
 8002ea2:	d004      	beq.n	8002eae <HAL_RCC_OscConfig+0x206>
 8002ea4:	6923      	ldr	r3, [r4, #16]
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d001      	beq.n	8002eae <HAL_RCC_OscConfig+0x206>
        return HAL_ERROR;
 8002eaa:	2001      	movs	r0, #1
 8002eac:	e215      	b.n	80032da <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eae:	4839      	ldr	r0, [pc, #228]	; (8002f94 <HAL_RCC_OscConfig+0x2ec>)
 8002eb0:	6803      	ldr	r3, [r0, #0]
 8002eb2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002eb6:	6961      	ldr	r1, [r4, #20]
 8002eb8:	22f8      	movs	r2, #248	; 0xf8
 8002eba:	fa92 f2a2 	rbit	r2, r2
 8002ebe:	fab2 f282 	clz	r2, r2
 8002ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	f013 0f08 	tst.w	r3, #8
 8002ed0:	f000 808c 	beq.w	8002fec <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ed4:	69a3      	ldr	r3, [r4, #24]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d060      	beq.n	8002f9c <HAL_RCC_OscConfig+0x2f4>
 8002eda:	2101      	movs	r1, #1
 8002edc:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee0:	fab2 f282 	clz	r2, r2
 8002ee4:	4b2c      	ldr	r3, [pc, #176]	; (8002f98 <HAL_RCC_OscConfig+0x2f0>)
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eec:	f7ff fbc4 	bl	8002678 <HAL_GetTick>
 8002ef0:	4605      	mov	r5, r0
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	fa93 f2a3 	rbit	r2, r3
 8002ef8:	fa93 f2a3 	rbit	r2, r3
 8002efc:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f00:	4a24      	ldr	r2, [pc, #144]	; (8002f94 <HAL_RCC_OscConfig+0x2ec>)
 8002f02:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	fab3 f383 	clz	r3, r3
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	2201      	movs	r2, #1
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	420b      	tst	r3, r1
 8002f18:	d168      	bne.n	8002fec <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f1a:	f7ff fbad 	bl	8002678 <HAL_GetTick>
 8002f1e:	1b40      	subs	r0, r0, r5
 8002f20:	2802      	cmp	r0, #2
 8002f22:	d9e6      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x24a>
        {
          return HAL_TIMEOUT;
 8002f24:	2003      	movs	r0, #3
 8002f26:	e1d8      	b.n	80032da <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f28:	481a      	ldr	r0, [pc, #104]	; (8002f94 <HAL_RCC_OscConfig+0x2ec>)
 8002f2a:	6803      	ldr	r3, [r0, #0]
 8002f2c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002f30:	6961      	ldr	r1, [r4, #20]
 8002f32:	22f8      	movs	r2, #248	; 0xf8
 8002f34:	fa92 f2a2 	rbit	r2, r2
 8002f38:	fab2 f282 	clz	r2, r2
 8002f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f40:	4313      	orrs	r3, r2
 8002f42:	6003      	str	r3, [r0, #0]
 8002f44:	e7c1      	b.n	8002eca <HAL_RCC_OscConfig+0x222>
 8002f46:	2301      	movs	r3, #1
 8002f48:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8002f4c:	fab3 f383 	clz	r3, r3
 8002f50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f5e:	f7ff fb8b 	bl	8002678 <HAL_GetTick>
 8002f62:	4605      	mov	r5, r0
 8002f64:	2302      	movs	r3, #2
 8002f66:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <HAL_RCC_OscConfig+0x2ec>)
 8002f6c:	6819      	ldr	r1, [r3, #0]
 8002f6e:	2302      	movs	r3, #2
 8002f70:	fa93 f3a3 	rbit	r3, r3
 8002f74:	fab3 f383 	clz	r3, r3
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	420b      	tst	r3, r1
 8002f84:	d0a1      	beq.n	8002eca <HAL_RCC_OscConfig+0x222>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f86:	f7ff fb77 	bl	8002678 <HAL_GetTick>
 8002f8a:	1b40      	subs	r0, r0, r5
 8002f8c:	2802      	cmp	r0, #2
 8002f8e:	d9e9      	bls.n	8002f64 <HAL_RCC_OscConfig+0x2bc>
            return HAL_TIMEOUT;
 8002f90:	2003      	movs	r0, #3
 8002f92:	e1a2      	b.n	80032da <HAL_RCC_OscConfig+0x632>
 8002f94:	40021000 	.word	0x40021000
 8002f98:	10908120 	.word	0x10908120
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa2:	fab2 f282 	clz	r2, r2
 8002fa6:	4bbc      	ldr	r3, [pc, #752]	; (8003298 <HAL_RCC_OscConfig+0x5f0>)
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb0:	f7ff fb62 	bl	8002678 <HAL_GetTick>
 8002fb4:	4605      	mov	r5, r0
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	fa93 f2a3 	rbit	r2, r3
 8002fbc:	fa93 f2a3 	rbit	r2, r3
 8002fc0:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc4:	4ab5      	ldr	r2, [pc, #724]	; (800329c <HAL_RCC_OscConfig+0x5f4>)
 8002fc6:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002fc8:	fa93 f3a3 	rbit	r3, r3
 8002fcc:	fab3 f383 	clz	r3, r3
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	420b      	tst	r3, r1
 8002fdc:	d006      	beq.n	8002fec <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fde:	f7ff fb4b 	bl	8002678 <HAL_GetTick>
 8002fe2:	1b40      	subs	r0, r0, r5
 8002fe4:	2802      	cmp	r0, #2
 8002fe6:	d9e6      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8002fe8:	2003      	movs	r0, #3
 8002fea:	e176      	b.n	80032da <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fec:	6823      	ldr	r3, [r4, #0]
 8002fee:	f013 0f04 	tst.w	r3, #4
 8002ff2:	f000 80b3 	beq.w	800315c <HAL_RCC_OscConfig+0x4b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff6:	4ba9      	ldr	r3, [pc, #676]	; (800329c <HAL_RCC_OscConfig+0x5f4>)
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002ffe:	d120      	bne.n	8003042 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003000:	4ba6      	ldr	r3, [pc, #664]	; (800329c <HAL_RCC_OscConfig+0x5f4>)
 8003002:	69da      	ldr	r2, [r3, #28]
 8003004:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003008:	61da      	str	r2, [r3, #28]
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003010:	9301      	str	r3, [sp, #4]
 8003012:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003014:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003016:	4ba2      	ldr	r3, [pc, #648]	; (80032a0 <HAL_RCC_OscConfig+0x5f8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800301e:	d012      	beq.n	8003046 <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003020:	68e3      	ldr	r3, [r4, #12]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d023      	beq.n	800306e <HAL_RCC_OscConfig+0x3c6>
 8003026:	bb73      	cbnz	r3, 8003086 <HAL_RCC_OscConfig+0x3de>
 8003028:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800302c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003030:	6a1a      	ldr	r2, [r3, #32]
 8003032:	f022 0201 	bic.w	r2, r2, #1
 8003036:	621a      	str	r2, [r3, #32]
 8003038:	6a1a      	ldr	r2, [r3, #32]
 800303a:	f022 0204 	bic.w	r2, r2, #4
 800303e:	621a      	str	r2, [r3, #32]
 8003040:	e01a      	b.n	8003078 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 8003042:	2500      	movs	r5, #0
 8003044:	e7e7      	b.n	8003016 <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003046:	4a96      	ldr	r2, [pc, #600]	; (80032a0 <HAL_RCC_OscConfig+0x5f8>)
 8003048:	6813      	ldr	r3, [r2, #0]
 800304a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800304e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003050:	f7ff fb12 	bl	8002678 <HAL_GetTick>
 8003054:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003056:	4b92      	ldr	r3, [pc, #584]	; (80032a0 <HAL_RCC_OscConfig+0x5f8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800305e:	d1df      	bne.n	8003020 <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003060:	f7ff fb0a 	bl	8002678 <HAL_GetTick>
 8003064:	1b80      	subs	r0, r0, r6
 8003066:	2864      	cmp	r0, #100	; 0x64
 8003068:	d9f5      	bls.n	8003056 <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 800306a:	2003      	movs	r0, #3
 800306c:	e135      	b.n	80032da <HAL_RCC_OscConfig+0x632>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800306e:	4a8b      	ldr	r2, [pc, #556]	; (800329c <HAL_RCC_OscConfig+0x5f4>)
 8003070:	6a13      	ldr	r3, [r2, #32]
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003078:	68e3      	ldr	r3, [r4, #12]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d041      	beq.n	8003102 <HAL_RCC_OscConfig+0x45a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307e:	f7ff fafb 	bl	8002678 <HAL_GetTick>
 8003082:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003084:	e02b      	b.n	80030de <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003086:	2b05      	cmp	r3, #5
 8003088:	d009      	beq.n	800309e <HAL_RCC_OscConfig+0x3f6>
 800308a:	4b84      	ldr	r3, [pc, #528]	; (800329c <HAL_RCC_OscConfig+0x5f4>)
 800308c:	6a1a      	ldr	r2, [r3, #32]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	621a      	str	r2, [r3, #32]
 8003094:	6a1a      	ldr	r2, [r3, #32]
 8003096:	f022 0204 	bic.w	r2, r2, #4
 800309a:	621a      	str	r2, [r3, #32]
 800309c:	e7ec      	b.n	8003078 <HAL_RCC_OscConfig+0x3d0>
 800309e:	4b7f      	ldr	r3, [pc, #508]	; (800329c <HAL_RCC_OscConfig+0x5f4>)
 80030a0:	6a1a      	ldr	r2, [r3, #32]
 80030a2:	f042 0204 	orr.w	r2, r2, #4
 80030a6:	621a      	str	r2, [r3, #32]
 80030a8:	6a1a      	ldr	r2, [r3, #32]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	621a      	str	r2, [r3, #32]
 80030b0:	e7e2      	b.n	8003078 <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b2:	4b7a      	ldr	r3, [pc, #488]	; (800329c <HAL_RCC_OscConfig+0x5f4>)
 80030b4:	6a19      	ldr	r1, [r3, #32]
 80030b6:	2302      	movs	r3, #2
 80030b8:	fa93 f3a3 	rbit	r3, r3
 80030bc:	fab3 f383 	clz	r3, r3
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	2201      	movs	r2, #1
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	4219      	tst	r1, r3
 80030cc:	d145      	bne.n	800315a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ce:	f7ff fad3 	bl	8002678 <HAL_GetTick>
 80030d2:	1b80      	subs	r0, r0, r6
 80030d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80030d8:	4298      	cmp	r0, r3
 80030da:	f200 80f9 	bhi.w	80032d0 <HAL_RCC_OscConfig+0x628>
 80030de:	2302      	movs	r3, #2
 80030e0:	fa93 f2a3 	rbit	r2, r3
 80030e4:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e8:	fab3 f383 	clz	r3, r3
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	f043 0302 	orr.w	r3, r3, #2
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d0dd      	beq.n	80030b2 <HAL_RCC_OscConfig+0x40a>
 80030f6:	2302      	movs	r3, #2
 80030f8:	fa93 f3a3 	rbit	r3, r3
 80030fc:	4b67      	ldr	r3, [pc, #412]	; (800329c <HAL_RCC_OscConfig+0x5f4>)
 80030fe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003100:	e7d9      	b.n	80030b6 <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003102:	f7ff fab9 	bl	8002678 <HAL_GetTick>
 8003106:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003108:	e015      	b.n	8003136 <HAL_RCC_OscConfig+0x48e>
 800310a:	4b64      	ldr	r3, [pc, #400]	; (800329c <HAL_RCC_OscConfig+0x5f4>)
 800310c:	6a19      	ldr	r1, [r3, #32]
 800310e:	2302      	movs	r3, #2
 8003110:	fa93 f3a3 	rbit	r3, r3
 8003114:	fab3 f383 	clz	r3, r3
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	2201      	movs	r2, #1
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	4219      	tst	r1, r3
 8003124:	d019      	beq.n	800315a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003126:	f7ff faa7 	bl	8002678 <HAL_GetTick>
 800312a:	1b80      	subs	r0, r0, r6
 800312c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003130:	4298      	cmp	r0, r3
 8003132:	f200 80cf 	bhi.w	80032d4 <HAL_RCC_OscConfig+0x62c>
 8003136:	2302      	movs	r3, #2
 8003138:	fa93 f2a3 	rbit	r2, r3
 800313c:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003140:	fab3 f383 	clz	r3, r3
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	f043 0302 	orr.w	r3, r3, #2
 800314a:	2b02      	cmp	r3, #2
 800314c:	d0dd      	beq.n	800310a <HAL_RCC_OscConfig+0x462>
 800314e:	2302      	movs	r3, #2
 8003150:	fa93 f3a3 	rbit	r3, r3
 8003154:	4b51      	ldr	r3, [pc, #324]	; (800329c <HAL_RCC_OscConfig+0x5f4>)
 8003156:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003158:	e7d9      	b.n	800310e <HAL_RCC_OscConfig+0x466>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800315a:	bbb5      	cbnz	r5, 80031ca <HAL_RCC_OscConfig+0x522>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800315c:	69e3      	ldr	r3, [r4, #28]
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 80ba 	beq.w	80032d8 <HAL_RCC_OscConfig+0x630>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003164:	4a4d      	ldr	r2, [pc, #308]	; (800329c <HAL_RCC_OscConfig+0x5f4>)
 8003166:	6852      	ldr	r2, [r2, #4]
 8003168:	f002 020c 	and.w	r2, r2, #12
 800316c:	2a08      	cmp	r2, #8
 800316e:	f000 8099 	beq.w	80032a4 <HAL_RCC_OscConfig+0x5fc>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003172:	2b02      	cmp	r3, #2
 8003174:	d02f      	beq.n	80031d6 <HAL_RCC_OscConfig+0x52e>
 8003176:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800317a:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003186:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7ff fa72 	bl	8002678 <HAL_GetTick>
 8003194:	4604      	mov	r4, r0
 8003196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800319a:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800319e:	4b3f      	ldr	r3, [pc, #252]	; (800329c <HAL_RCC_OscConfig+0x5f4>)
 80031a0:	6819      	ldr	r1, [r3, #0]
 80031a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031a6:	fa93 f3a3 	rbit	r3, r3
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	f003 031f 	and.w	r3, r3, #31
 80031b2:	2201      	movs	r2, #1
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	4219      	tst	r1, r3
 80031ba:	d06b      	beq.n	8003294 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031bc:	f7ff fa5c 	bl	8002678 <HAL_GetTick>
 80031c0:	1b00      	subs	r0, r0, r4
 80031c2:	2802      	cmp	r0, #2
 80031c4:	d9e7      	bls.n	8003196 <HAL_RCC_OscConfig+0x4ee>
          {
            return HAL_TIMEOUT;
 80031c6:	2003      	movs	r0, #3
 80031c8:	e087      	b.n	80032da <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ca:	4a34      	ldr	r2, [pc, #208]	; (800329c <HAL_RCC_OscConfig+0x5f4>)
 80031cc:	69d3      	ldr	r3, [r2, #28]
 80031ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d2:	61d3      	str	r3, [r2, #28]
 80031d4:	e7c2      	b.n	800315c <HAL_RCC_OscConfig+0x4b4>
 80031d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031da:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80031de:	fab3 f383 	clz	r3, r3
 80031e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80031f0:	f7ff fa42 	bl	8002678 <HAL_GetTick>
 80031f4:	4605      	mov	r5, r0
 80031f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031fa:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031fe:	4b27      	ldr	r3, [pc, #156]	; (800329c <HAL_RCC_OscConfig+0x5f4>)
 8003200:	6819      	ldr	r1, [r3, #0]
 8003202:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	fab3 f383 	clz	r3, r3
 800320e:	f003 031f 	and.w	r3, r3, #31
 8003212:	2201      	movs	r2, #1
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	4219      	tst	r1, r3
 800321a:	d006      	beq.n	800322a <HAL_RCC_OscConfig+0x582>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800321c:	f7ff fa2c 	bl	8002678 <HAL_GetTick>
 8003220:	1b40      	subs	r0, r0, r5
 8003222:	2802      	cmp	r0, #2
 8003224:	d9e7      	bls.n	80031f6 <HAL_RCC_OscConfig+0x54e>
            return HAL_TIMEOUT;
 8003226:	2003      	movs	r0, #3
 8003228:	e057      	b.n	80032da <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800322a:	491c      	ldr	r1, [pc, #112]	; (800329c <HAL_RCC_OscConfig+0x5f4>)
 800322c:	684b      	ldr	r3, [r1, #4]
 800322e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8003232:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003234:	6a20      	ldr	r0, [r4, #32]
 8003236:	4302      	orrs	r2, r0
 8003238:	4313      	orrs	r3, r2
 800323a:	604b      	str	r3, [r1, #4]
 800323c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003240:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800324c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003256:	f7ff fa0f 	bl	8002678 <HAL_GetTick>
 800325a:	4604      	mov	r4, r0
 800325c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003260:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003264:	4b0d      	ldr	r3, [pc, #52]	; (800329c <HAL_RCC_OscConfig+0x5f4>)
 8003266:	6819      	ldr	r1, [r3, #0]
 8003268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800326c:	fa93 f3a3 	rbit	r3, r3
 8003270:	fab3 f383 	clz	r3, r3
 8003274:	f003 031f 	and.w	r3, r3, #31
 8003278:	2201      	movs	r2, #1
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	4219      	tst	r1, r3
 8003280:	d106      	bne.n	8003290 <HAL_RCC_OscConfig+0x5e8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003282:	f7ff f9f9 	bl	8002678 <HAL_GetTick>
 8003286:	1b00      	subs	r0, r0, r4
 8003288:	2802      	cmp	r0, #2
 800328a:	d9e7      	bls.n	800325c <HAL_RCC_OscConfig+0x5b4>
            return HAL_TIMEOUT;
 800328c:	2003      	movs	r0, #3
 800328e:	e024      	b.n	80032da <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }

  return HAL_OK;
 8003290:	2000      	movs	r0, #0
 8003292:	e022      	b.n	80032da <HAL_RCC_OscConfig+0x632>
 8003294:	2000      	movs	r0, #0
 8003296:	e020      	b.n	80032da <HAL_RCC_OscConfig+0x632>
 8003298:	10908120 	.word	0x10908120
 800329c:	40021000 	.word	0x40021000
 80032a0:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d01a      	beq.n	80032de <HAL_RCC_OscConfig+0x636>
        pll_config = RCC->CFGR;
 80032a8:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <HAL_RCC_OscConfig+0x640>)
 80032aa:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032ac:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80032b0:	6a22      	ldr	r2, [r4, #32]
 80032b2:	4291      	cmp	r1, r2
 80032b4:	d001      	beq.n	80032ba <HAL_RCC_OscConfig+0x612>
          return HAL_ERROR;
 80032b6:	2001      	movs	r0, #1
 80032b8:	e00f      	b.n	80032da <HAL_RCC_OscConfig+0x632>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80032ba:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80032be:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00e      	beq.n	80032e2 <HAL_RCC_OscConfig+0x63a>
          return HAL_ERROR;
 80032c4:	2001      	movs	r0, #1
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x632>
    return HAL_ERROR;
 80032c8:	2001      	movs	r0, #1
}
 80032ca:	4770      	bx	lr
        return HAL_ERROR;
 80032cc:	2001      	movs	r0, #1
 80032ce:	e004      	b.n	80032da <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 80032d0:	2003      	movs	r0, #3
 80032d2:	e002      	b.n	80032da <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 80032d4:	2003      	movs	r0, #3
 80032d6:	e000      	b.n	80032da <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 80032d8:	2000      	movs	r0, #0
}
 80032da:	b002      	add	sp, #8
 80032dc:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80032de:	2001      	movs	r0, #1
 80032e0:	e7fb      	b.n	80032da <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 80032e2:	2000      	movs	r0, #0
 80032e4:	e7f9      	b.n	80032da <HAL_RCC_OscConfig+0x632>
 80032e6:	bf00      	nop
 80032e8:	40021000 	.word	0x40021000

080032ec <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80032ec:	4b16      	ldr	r3, [pc, #88]	; (8003348 <HAL_RCC_GetSysClockFreq+0x5c>)
 80032ee:	6859      	ldr	r1, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032f0:	f001 030c 	and.w	r3, r1, #12
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d124      	bne.n	8003342 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80032f8:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80032fc:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8003300:	fa93 f3a3 	rbit	r3, r3
 8003304:	fab3 f383 	clz	r3, r3
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
 800330c:	4a0f      	ldr	r2, [pc, #60]	; (800334c <HAL_RCC_GetSysClockFreq+0x60>)
 800330e:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003310:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <HAL_RCC_GetSysClockFreq+0x5c>)
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	f003 030f 	and.w	r3, r3, #15
 8003318:	220f      	movs	r2, #15
 800331a:	fa92 f2a2 	rbit	r2, r2
 800331e:	fab2 f282 	clz	r2, r2
 8003322:	40d3      	lsrs	r3, r2
 8003324:	4a0a      	ldr	r2, [pc, #40]	; (8003350 <HAL_RCC_GetSysClockFreq+0x64>)
 8003326:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003328:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800332c:	d103      	bne.n	8003336 <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800332e:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_RCC_GetSysClockFreq+0x68>)
 8003330:	fb03 f000 	mul.w	r0, r3, r0
 8003334:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003336:	4b08      	ldr	r3, [pc, #32]	; (8003358 <HAL_RCC_GetSysClockFreq+0x6c>)
 8003338:	fbb3 f3f2 	udiv	r3, r3, r2
 800333c:	fb00 f003 	mul.w	r0, r0, r3
 8003340:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8003342:	4805      	ldr	r0, [pc, #20]	; (8003358 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000
 800334c:	080035e4 	.word	0x080035e4
 8003350:	080035f4 	.word	0x080035f4
 8003354:	003d0900 	.word	0x003d0900
 8003358:	007a1200 	.word	0x007a1200

0800335c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800335c:	2800      	cmp	r0, #0
 800335e:	f000 80c1 	beq.w	80034e4 <HAL_RCC_ClockConfig+0x188>
{
 8003362:	b570      	push	{r4, r5, r6, lr}
 8003364:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003366:	4b61      	ldr	r3, [pc, #388]	; (80034ec <HAL_RCC_ClockConfig+0x190>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	428b      	cmp	r3, r1
 8003370:	d20c      	bcs.n	800338c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003372:	4a5e      	ldr	r2, [pc, #376]	; (80034ec <HAL_RCC_ClockConfig+0x190>)
 8003374:	6813      	ldr	r3, [r2, #0]
 8003376:	f023 0307 	bic.w	r3, r3, #7
 800337a:	430b      	orrs	r3, r1
 800337c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800337e:	6813      	ldr	r3, [r2, #0]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	428b      	cmp	r3, r1
 8003386:	d001      	beq.n	800338c <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8003388:	2001      	movs	r0, #1
}
 800338a:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800338c:	6823      	ldr	r3, [r4, #0]
 800338e:	f013 0f02 	tst.w	r3, #2
 8003392:	d006      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003394:	4a56      	ldr	r2, [pc, #344]	; (80034f0 <HAL_RCC_ClockConfig+0x194>)
 8003396:	6853      	ldr	r3, [r2, #4]
 8003398:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800339c:	68a0      	ldr	r0, [r4, #8]
 800339e:	4303      	orrs	r3, r0
 80033a0:	6053      	str	r3, [r2, #4]
 80033a2:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a4:	6823      	ldr	r3, [r4, #0]
 80033a6:	f013 0f01 	tst.w	r3, #1
 80033aa:	d05a      	beq.n	8003462 <HAL_RCC_ClockConfig+0x106>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ac:	6863      	ldr	r3, [r4, #4]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d02d      	beq.n	800340e <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d040      	beq.n	8003438 <HAL_RCC_ClockConfig+0xdc>
 80033b6:	2202      	movs	r2, #2
 80033b8:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033bc:	4a4c      	ldr	r2, [pc, #304]	; (80034f0 <HAL_RCC_ClockConfig+0x194>)
 80033be:	6810      	ldr	r0, [r2, #0]
 80033c0:	2202      	movs	r2, #2
 80033c2:	fa92 f2a2 	rbit	r2, r2
 80033c6:	fab2 f282 	clz	r2, r2
 80033ca:	f002 021f 	and.w	r2, r2, #31
 80033ce:	2101      	movs	r1, #1
 80033d0:	fa01 f202 	lsl.w	r2, r1, r2
 80033d4:	4210      	tst	r0, r2
 80033d6:	f000 8087 	beq.w	80034e8 <HAL_RCC_ClockConfig+0x18c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033da:	4945      	ldr	r1, [pc, #276]	; (80034f0 <HAL_RCC_ClockConfig+0x194>)
 80033dc:	684a      	ldr	r2, [r1, #4]
 80033de:	f022 0203 	bic.w	r2, r2, #3
 80033e2:	4313      	orrs	r3, r2
 80033e4:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80033e6:	f7ff f947 	bl	8002678 <HAL_GetTick>
 80033ea:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ec:	4b40      	ldr	r3, [pc, #256]	; (80034f0 <HAL_RCC_ClockConfig+0x194>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 030c 	and.w	r3, r3, #12
 80033f4:	6862      	ldr	r2, [r4, #4]
 80033f6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80033fa:	d032      	beq.n	8003462 <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033fc:	f7ff f93c 	bl	8002678 <HAL_GetTick>
 8003400:	1b80      	subs	r0, r0, r6
 8003402:	f241 3388 	movw	r3, #5000	; 0x1388
 8003406:	4298      	cmp	r0, r3
 8003408:	d9f0      	bls.n	80033ec <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 800340a:	2003      	movs	r0, #3
 800340c:	e7bd      	b.n	800338a <HAL_RCC_ClockConfig+0x2e>
 800340e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003412:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	4a36      	ldr	r2, [pc, #216]	; (80034f0 <HAL_RCC_ClockConfig+0x194>)
 8003418:	6810      	ldr	r0, [r2, #0]
 800341a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800341e:	fa92 f2a2 	rbit	r2, r2
 8003422:	fab2 f282 	clz	r2, r2
 8003426:	f002 021f 	and.w	r2, r2, #31
 800342a:	2101      	movs	r1, #1
 800342c:	fa01 f202 	lsl.w	r2, r1, r2
 8003430:	4202      	tst	r2, r0
 8003432:	d1d2      	bne.n	80033da <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8003434:	2001      	movs	r0, #1
 8003436:	e7a8      	b.n	800338a <HAL_RCC_ClockConfig+0x2e>
 8003438:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800343c:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003440:	4a2b      	ldr	r2, [pc, #172]	; (80034f0 <HAL_RCC_ClockConfig+0x194>)
 8003442:	6810      	ldr	r0, [r2, #0]
 8003444:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003448:	fa92 f2a2 	rbit	r2, r2
 800344c:	fab2 f282 	clz	r2, r2
 8003450:	f002 021f 	and.w	r2, r2, #31
 8003454:	2101      	movs	r1, #1
 8003456:	fa01 f202 	lsl.w	r2, r1, r2
 800345a:	4210      	tst	r0, r2
 800345c:	d1bd      	bne.n	80033da <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 800345e:	2001      	movs	r0, #1
 8003460:	e793      	b.n	800338a <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003462:	4b22      	ldr	r3, [pc, #136]	; (80034ec <HAL_RCC_ClockConfig+0x190>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	42ab      	cmp	r3, r5
 800346c:	d90c      	bls.n	8003488 <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346e:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <HAL_RCC_ClockConfig+0x190>)
 8003470:	6813      	ldr	r3, [r2, #0]
 8003472:	f023 0307 	bic.w	r3, r3, #7
 8003476:	432b      	orrs	r3, r5
 8003478:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800347a:	6813      	ldr	r3, [r2, #0]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	42ab      	cmp	r3, r5
 8003482:	d001      	beq.n	8003488 <HAL_RCC_ClockConfig+0x12c>
      return HAL_ERROR;
 8003484:	2001      	movs	r0, #1
 8003486:	e780      	b.n	800338a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003488:	6823      	ldr	r3, [r4, #0]
 800348a:	f013 0f04 	tst.w	r3, #4
 800348e:	d006      	beq.n	800349e <HAL_RCC_ClockConfig+0x142>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003490:	4a17      	ldr	r2, [pc, #92]	; (80034f0 <HAL_RCC_ClockConfig+0x194>)
 8003492:	6853      	ldr	r3, [r2, #4]
 8003494:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003498:	68e1      	ldr	r1, [r4, #12]
 800349a:	430b      	orrs	r3, r1
 800349c:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	f013 0f08 	tst.w	r3, #8
 80034a4:	d007      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034a6:	4a12      	ldr	r2, [pc, #72]	; (80034f0 <HAL_RCC_ClockConfig+0x194>)
 80034a8:	6853      	ldr	r3, [r2, #4]
 80034aa:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80034ae:	6921      	ldr	r1, [r4, #16]
 80034b0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80034b4:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034b6:	f7ff ff19 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 80034ba:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <HAL_RCC_ClockConfig+0x194>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034c2:	22f0      	movs	r2, #240	; 0xf0
 80034c4:	fa92 f2a2 	rbit	r2, r2
 80034c8:	fab2 f282 	clz	r2, r2
 80034cc:	40d3      	lsrs	r3, r2
 80034ce:	4a09      	ldr	r2, [pc, #36]	; (80034f4 <HAL_RCC_ClockConfig+0x198>)
 80034d0:	5cd3      	ldrb	r3, [r2, r3]
 80034d2:	40d8      	lsrs	r0, r3
 80034d4:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <HAL_RCC_ClockConfig+0x19c>)
 80034d6:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80034d8:	4b08      	ldr	r3, [pc, #32]	; (80034fc <HAL_RCC_ClockConfig+0x1a0>)
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	f7ff f888 	bl	80025f0 <HAL_InitTick>
  return HAL_OK;
 80034e0:	2000      	movs	r0, #0
 80034e2:	e752      	b.n	800338a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80034e4:	2001      	movs	r0, #1
}
 80034e6:	4770      	bx	lr
        return HAL_ERROR;
 80034e8:	2001      	movs	r0, #1
 80034ea:	e74e      	b.n	800338a <HAL_RCC_ClockConfig+0x2e>
 80034ec:	40022000 	.word	0x40022000
 80034f0:	40021000 	.word	0x40021000
 80034f4:	080035cc 	.word	0x080035cc
 80034f8:	20000000 	.word	0x20000000
 80034fc:	20000008 	.word	0x20000008

08003500 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003500:	4b01      	ldr	r3, [pc, #4]	; (8003508 <HAL_RCC_GetHCLKFreq+0x8>)
 8003502:	6818      	ldr	r0, [r3, #0]
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	20000000 	.word	0x20000000

0800350c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800350c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800350e:	f7ff fff7 	bl	8003500 <HAL_RCC_GetHCLKFreq>
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800351a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800351e:	fa92 f2a2 	rbit	r2, r2
 8003522:	fab2 f282 	clz	r2, r2
 8003526:	40d3      	lsrs	r3, r2
 8003528:	4a02      	ldr	r2, [pc, #8]	; (8003534 <HAL_RCC_GetPCLK1Freq+0x28>)
 800352a:	5cd3      	ldrb	r3, [r2, r3]
}    
 800352c:	40d8      	lsrs	r0, r3
 800352e:	bd08      	pop	{r3, pc}
 8003530:	40021000 	.word	0x40021000
 8003534:	080035dc 	.word	0x080035dc

08003538 <__libc_init_array>:
 8003538:	b570      	push	{r4, r5, r6, lr}
 800353a:	4e0d      	ldr	r6, [pc, #52]	; (8003570 <__libc_init_array+0x38>)
 800353c:	4c0d      	ldr	r4, [pc, #52]	; (8003574 <__libc_init_array+0x3c>)
 800353e:	1ba4      	subs	r4, r4, r6
 8003540:	10a4      	asrs	r4, r4, #2
 8003542:	2500      	movs	r5, #0
 8003544:	42a5      	cmp	r5, r4
 8003546:	d109      	bne.n	800355c <__libc_init_array+0x24>
 8003548:	4e0b      	ldr	r6, [pc, #44]	; (8003578 <__libc_init_array+0x40>)
 800354a:	4c0c      	ldr	r4, [pc, #48]	; (800357c <__libc_init_array+0x44>)
 800354c:	f000 f820 	bl	8003590 <_init>
 8003550:	1ba4      	subs	r4, r4, r6
 8003552:	10a4      	asrs	r4, r4, #2
 8003554:	2500      	movs	r5, #0
 8003556:	42a5      	cmp	r5, r4
 8003558:	d105      	bne.n	8003566 <__libc_init_array+0x2e>
 800355a:	bd70      	pop	{r4, r5, r6, pc}
 800355c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003560:	4798      	blx	r3
 8003562:	3501      	adds	r5, #1
 8003564:	e7ee      	b.n	8003544 <__libc_init_array+0xc>
 8003566:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800356a:	4798      	blx	r3
 800356c:	3501      	adds	r5, #1
 800356e:	e7f2      	b.n	8003556 <__libc_init_array+0x1e>
 8003570:	08003604 	.word	0x08003604
 8003574:	08003604 	.word	0x08003604
 8003578:	08003604 	.word	0x08003604
 800357c:	08003608 	.word	0x08003608

08003580 <memset>:
 8003580:	4402      	add	r2, r0
 8003582:	4603      	mov	r3, r0
 8003584:	4293      	cmp	r3, r2
 8003586:	d100      	bne.n	800358a <memset+0xa>
 8003588:	4770      	bx	lr
 800358a:	f803 1b01 	strb.w	r1, [r3], #1
 800358e:	e7f9      	b.n	8003584 <memset+0x4>

08003590 <_init>:
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	bf00      	nop
 8003594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003596:	bc08      	pop	{r3}
 8003598:	469e      	mov	lr, r3
 800359a:	4770      	bx	lr

0800359c <_fini>:
 800359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359e:	bf00      	nop
 80035a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a2:	bc08      	pop	{r3}
 80035a4:	469e      	mov	lr, r3
 80035a6:	4770      	bx	lr
