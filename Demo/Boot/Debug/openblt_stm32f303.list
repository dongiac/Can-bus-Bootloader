
openblt_stm32f303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a64  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08001bec  08001bec  00011bec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c78  08001c78  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001c78  08001c78  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c78  08001c78  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c78  08001c78  00011c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c7c  08001c7c  00011c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000518  20000010  08001c90  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  08001c90  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba58  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003538  00000000  00000000  0002ba98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f0  00000000  00000000  0002efd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ca8  00000000  00000000  0002f8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000197e2  00000000  00000000  00030568  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ae66  00000000  00000000  00049d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008729f  00000000  00000000  00054bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbe4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013e8  00000000  00000000  000dbecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00003eff  00000000  00000000  000dd2b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001bd4 	.word	0x08001bd4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08001bd4 	.word	0x08001bd4

080001c8 <AppInit>:
**
****************************************************************************************/
void AppInit(void)
{
  /* initialize the bootloader */
  BootInit();
 80001c8:	f001 bb44 	b.w	8001854 <BootInit>

080001cc <AppTask>:
**
****************************************************************************************/
void AppTask(void)
{
  /* Run the bootloader task. */
  BootTask();
 80001cc:	f001 bb51 	b.w	8001872 <BootTask>

080001d0 <CpuUserProgramStartHook>:
** \return    BLT_TRUE if it is okay to start the user program, BLT_FALSE to keep
**            keep the bootloader active.
**
****************************************************************************************/
blt_bool CpuUserProgramStartHook(void)
{
 80001d0:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80001d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001d6:	6918      	ldr	r0, [r3, #16]
  /* additional and optional backdoor entry through the D1 digital input on the board. to
   * force the bootloader to stay active after reset, connect D1 to ground.
   */
  if (LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_9) == 0)
 80001d8:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 80001dc:	d002      	beq.n	80001e4 <CpuUserProgramStartHook+0x14>
     * bootloader active instead.
     */
    return BLT_FALSE;
  }
  /* clean up the LED driver */
  LedBlinkExit();
 80001de:	f000 f82f 	bl	8000240 <LedBlinkExit>
  /*  okay to start the user program.*/
  return BLT_TRUE;
 80001e2:	2001      	movs	r0, #1
} /*** end of CpuUserProgramStartHook ***/
 80001e4:	bd08      	pop	{r3, pc}

080001e6 <CopInitHook>:
void CopInitHook(void)
{
  /* this function is called upon initialization. might as well use it to initialize
   * the LED driver. It is kind of a visual watchdog anyways.
   */
  LedBlinkInit(100);
 80001e6:	2064      	movs	r0, #100	; 0x64
 80001e8:	f000 b802 	b.w	80001f0 <LedBlinkInit>

080001ec <CopServiceHook>:
  /* run the LED blink task. this is a better place to do it than in the main() program
   * loop. certain operations such as flash erase can take a long time, which would cause
   * a blink interval to be skipped. this function is also called during such operations,
   * so no blink intervals will be skipped when calling the LED blink task here.
   */
  LedBlinkTask();
 80001ec:	f000 b806 	b.w	80001fc <LedBlinkTask>

080001f0 <LedBlinkInit>:
**
****************************************************************************************/
void LedBlinkInit(blt_int16u interval_ms)
{
  /* store the interval time between LED toggles */
  ledBlinkIntervalMs = interval_ms;
 80001f0:	4b01      	ldr	r3, [pc, #4]	; (80001f8 <LedBlinkInit+0x8>)
 80001f2:	8018      	strh	r0, [r3, #0]
} /*** end of LedBlinkInit ***/
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	2000002c 	.word	0x2000002c

080001fc <LedBlinkTask>:
** \brief     Task function for blinking the LED as a fixed timer interval.
** \return    none.
**
****************************************************************************************/
void LedBlinkTask(void)
{
 80001fc:	b510      	push	{r4, lr}
  static blt_bool ledOn = BLT_FALSE;
  static blt_int32u nextBlinkEvent = 0;

  /* check for blink event */
  if (TimerGet() >= nextBlinkEvent)
 80001fe:	4c0c      	ldr	r4, [pc, #48]	; (8000230 <LedBlinkTask+0x34>)
 8000200:	f001 fad8 	bl	80017b4 <TimerGet>
 8000204:	6822      	ldr	r2, [r4, #0]
 8000206:	4290      	cmp	r0, r2
 8000208:	d30d      	bcc.n	8000226 <LedBlinkTask+0x2a>
  {
    /* toggle the LED state */
    if (ledOn == BLT_FALSE)
 800020a:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <LedBlinkTask+0x38>)
 800020c:	4a0a      	ldr	r2, [pc, #40]	; (8000238 <LedBlinkTask+0x3c>)
 800020e:	7818      	ldrb	r0, [r3, #0]
 8000210:	2108      	movs	r1, #8
 8000212:	b948      	cbnz	r0, 8000228 <LedBlinkTask+0x2c>
    {
      ledOn = BLT_TRUE;
 8000214:	2001      	movs	r0, #1
 8000216:	7018      	strb	r0, [r3, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000218:	6191      	str	r1, [r2, #24]
    {
      ledOn = BLT_FALSE;
      LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
    }
    /* schedule the next blink event */
    nextBlinkEvent = TimerGet() + ledBlinkIntervalMs;
 800021a:	f001 facb 	bl	80017b4 <TimerGet>
 800021e:	4b07      	ldr	r3, [pc, #28]	; (800023c <LedBlinkTask+0x40>)
 8000220:	881b      	ldrh	r3, [r3, #0]
 8000222:	4418      	add	r0, r3
 8000224:	6020      	str	r0, [r4, #0]
  }
} /*** end of LedBlinkTask ***/
 8000226:	bd10      	pop	{r4, pc}
      ledOn = BLT_FALSE;
 8000228:	2000      	movs	r0, #0
 800022a:	7018      	strb	r0, [r3, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800022c:	6291      	str	r1, [r2, #40]	; 0x28
 800022e:	e7f4      	b.n	800021a <LedBlinkTask+0x1e>
 8000230:	20000030 	.word	0x20000030
 8000234:	2000002e 	.word	0x2000002e
 8000238:	48000400 	.word	0x48000400
 800023c:	2000002c 	.word	0x2000002c

08000240 <LedBlinkExit>:
 8000240:	4b01      	ldr	r3, [pc, #4]	; (8000248 <LedBlinkExit+0x8>)
 8000242:	2208      	movs	r2, #8
 8000244:	629a      	str	r2, [r3, #40]	; 0x28
****************************************************************************************/
void LedBlinkExit(void)
{
  /* turn the LED off */
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
} /*** end of LedBlinkExit ***/
 8000246:	4770      	bx	lr
 8000248:	48000400 	.word	0x48000400

0800024c <LL_AHB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <LL_AHB1_GRP1_EnableClock+0x18>)
 800024e:	695a      	ldr	r2, [r3, #20]
 8000250:	4302      	orrs	r2, r0
 8000252:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000254:	695b      	ldr	r3, [r3, #20]
{
 8000256:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000258:	4018      	ands	r0, r3
 800025a:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 800025c:	9b01      	ldr	r3, [sp, #4]
}
 800025e:	b002      	add	sp, #8
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40021000 	.word	0x40021000

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800026a:	4b26      	ldr	r3, [pc, #152]	; (8000304 <SystemClock_Config+0x9c>)
 800026c:	681a      	ldr	r2, [r3, #0]
 800026e:	f022 0207 	bic.w	r2, r2, #7
 8000272:	f042 0202 	orr.w	r2, r2, #2
 8000276:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	f002 0207 	and.w	r2, r2, #7
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800027e:	2a02      	cmp	r2, #2
 8000280:	d1fa      	bne.n	8000278 <SystemClock_Config+0x10>
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000282:	4b21      	ldr	r3, [pc, #132]	; (8000308 <SystemClock_Config+0xa0>)
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	f042 0201 	orr.w	r2, r2, #1
 800028a:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800028c:	681a      	ldr	r2, [r3, #0]
  {
  }
  LL_RCC_HSI_Enable();

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800028e:	0791      	lsls	r1, r2, #30
 8000290:	d5fc      	bpl.n	800028c <SystemClock_Config+0x24>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000298:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800029c:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 800029e:	685a      	ldr	r2, [r3, #4]
 80002a0:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80002a4:	f442 1260 	orr.w	r2, r2, #3670016	; 0x380000
 80002a8:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 80002aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80002ac:	f022 020f 	bic.w	r2, r2, #15
 80002b0:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80002b2:	681a      	ldr	r2, [r3, #0]
 80002b4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80002b8:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80002ba:	681a      	ldr	r2, [r3, #0]
  LL_RCC_HSI_SetCalibTrimming(16);
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_16);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80002bc:	0192      	lsls	r2, r2, #6
 80002be:	d5fc      	bpl.n	80002ba <SystemClock_Config+0x52>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80002c0:	685a      	ldr	r2, [r3, #4]
 80002c2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80002c6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80002c8:	685a      	ldr	r2, [r3, #4]
 80002ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80002ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80002d2:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80002d4:	685a      	ldr	r2, [r3, #4]
 80002d6:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 80002da:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80002dc:	685a      	ldr	r2, [r3, #4]
 80002de:	f022 0203 	bic.w	r2, r2, #3
 80002e2:	f042 0202 	orr.w	r2, r2, #2
 80002e6:	605a      	str	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80002e8:	685a      	ldr	r2, [r3, #4]
 80002ea:	f002 020c 	and.w	r2, r2, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80002ee:	2a08      	cmp	r2, #8
 80002f0:	d1fa      	bne.n	80002e8 <SystemClock_Config+0x80>
  {

  }
  LL_SetSystemCoreClock(64000000);
 80002f2:	4806      	ldr	r0, [pc, #24]	; (800030c <SystemClock_Config+0xa4>)
 80002f4:	f000 ffd8 	bl	80012a8 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80002f8:	2000      	movs	r0, #0
  {
    Error_Handler();
  }
}
 80002fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80002fe:	f000 b94d 	b.w	800059c <HAL_InitTick>
 8000302:	bf00      	nop
 8000304:	40022000 	.word	0x40022000
 8000308:	40021000 	.word	0x40021000
 800030c:	03d09000 	.word	0x03d09000

08000310 <main>:
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 8000314:	f000 f966 	bl	80005e4 <HAL_Init>
  SystemClock_Config();
 8000318:	f7ff ffa6 	bl	8000268 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031c:	2218      	movs	r2, #24
 800031e:	2100      	movs	r1, #0
 8000320:	a807      	add	r0, sp, #28
 8000322:	f001 fc4f 	bl	8001bc4 <memset>
 8000326:	4d36      	ldr	r5, [pc, #216]	; (8000400 <main+0xf0>)

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000328:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800032c:	f7ff ff8e 	bl	800024c <LL_AHB1_GRP1_EnableClock>
 8000330:	2708      	movs	r7, #8
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000332:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000336:	2400      	movs	r4, #0
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000338:	f7ff ff88 	bl	800024c <LL_AHB1_GRP1_EnableClock>
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800033c:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800033e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000342:	62af      	str	r7, [r5, #40]	; 0x28
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000344:	a907      	add	r1, sp, #28
 8000346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800034a:	e9cd 3407 	strd	r3, r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800034e:	960b      	str	r6, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000350:	f000 fdde 	bl	8000f10 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000354:	a907      	add	r1, sp, #28
 8000356:	4628      	mov	r0, r5
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000358:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800035c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800035e:	e9cd 7607 	strd	r7, r6, [sp, #28]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000362:	f000 fdd5 	bl	8000f10 <LL_GPIO_Init>
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000366:	221c      	movs	r2, #28
 8000368:	4621      	mov	r1, r4
 800036a:	eb0d 0002 	add.w	r0, sp, r2
 800036e:	f001 fc29 	bl	8001bc4 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	4621      	mov	r1, r4
 8000374:	2218      	movs	r2, #24
 8000376:	a801      	add	r0, sp, #4
 8000378:	f001 fc24 	bl	8001bc4 <memset>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800037c:	4b21      	ldr	r3, [pc, #132]	; (8000404 <main+0xf4>)
 800037e:	69da      	ldr	r2, [r3, #28]
 8000380:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000384:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000386:	69db      	ldr	r3, [r3, #28]
 8000388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800038c:	9300      	str	r3, [sp, #0]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800038e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  (void)tmpreg;
 8000392:	9b00      	ldr	r3, [sp, #0]
 8000394:	f7ff ff5a 	bl	800024c <LL_AHB1_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000398:	f248 0204 	movw	r2, #32772	; 0x8004
 800039c:	2302      	movs	r3, #2
 800039e:	e9cd 2301 	strd	r2, r3, [sp, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80003a2:	2303      	movs	r3, #3
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80003a4:	e9cd 3403 	strd	r3, r4, [sp, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a8:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80003aa:	2307      	movs	r3, #7
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80003b0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80003b2:	9306      	str	r3, [sp, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b4:	f000 fdac 	bl	8000f10 <LL_GPIO_Init>
  USART_InitStruct.BaudRate = 38400;
 80003b8:	f44f 4316 	mov.w	r3, #38400	; 0x9600
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80003bc:	e9cd 3407 	strd	r3, r4, [sp, #28]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80003c0:	230c      	movs	r3, #12
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80003c2:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80003c6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80003ca:	940d      	str	r4, [sp, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80003cc:	4c0e      	ldr	r4, [pc, #56]	; (8000408 <main+0xf8>)
 80003ce:	a907      	add	r1, sp, #28
 80003d0:	4620      	mov	r0, r4
 80003d2:	f000 ff0f 	bl	80011f4 <LL_USART_Init>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80003d6:	68a3      	ldr	r3, [r4, #8]
 80003d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80003dc:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003de:	6863      	ldr	r3, [r4, #4]
 80003e0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80003e4:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003e6:	68a3      	ldr	r3, [r4, #8]
 80003e8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80003ec:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80003ee:	6823      	ldr	r3, [r4, #0]
 80003f0:	4333      	orrs	r3, r6
 80003f2:	6023      	str	r3, [r4, #0]
  AppInit();
 80003f4:	f7ff fee8 	bl	80001c8 <AppInit>
    AppTask();
 80003f8:	f7ff fee8 	bl	80001cc <AppTask>
 80003fc:	e7fc      	b.n	80003f8 <main+0xe8>
 80003fe:	bf00      	nop
 8000400:	48000400 	.word	0x48000400
 8000404:	40021000 	.word	0x40021000
 8000408:	40004400 	.word	0x40004400

0800040c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040c:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <HAL_MspInit+0x2c>)
 800040e:	699a      	ldr	r2, [r3, #24]
 8000410:	f042 0201 	orr.w	r2, r2, #1
 8000414:	619a      	str	r2, [r3, #24]
 8000416:	699a      	ldr	r2, [r3, #24]
{
 8000418:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041a:	f002 0201 	and.w	r2, r2, #1
 800041e:	9200      	str	r2, [sp, #0]
 8000420:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000422:	69da      	ldr	r2, [r3, #28]
 8000424:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000428:	61da      	str	r2, [r3, #28]
 800042a:	69db      	ldr	r3, [r3, #28]
 800042c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000430:	9301      	str	r3, [sp, #4]
 8000432:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000434:	b002      	add	sp, #8
 8000436:	4770      	bx	lr
 8000438:	40021000 	.word	0x40021000

0800043c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800043c:	b510      	push	{r4, lr}
 800043e:	4604      	mov	r4, r0
 8000440:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000442:	2214      	movs	r2, #20
 8000444:	2100      	movs	r1, #0
 8000446:	a803      	add	r0, sp, #12
 8000448:	f001 fbbc 	bl	8001bc4 <memset>
  if(hcan->Instance==CAN)
 800044c:	6822      	ldr	r2, [r4, #0]
 800044e:	4b13      	ldr	r3, [pc, #76]	; (800049c <HAL_CAN_MspInit+0x60>)
 8000450:	429a      	cmp	r2, r3
 8000452:	d121      	bne.n	8000498 <HAL_CAN_MspInit+0x5c>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000454:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000458:	2103      	movs	r1, #3
    __HAL_RCC_CAN1_CLK_ENABLE();
 800045a:	69da      	ldr	r2, [r3, #28]
 800045c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000460:	61da      	str	r2, [r3, #28]
 8000462:	69da      	ldr	r2, [r3, #28]
 8000464:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8000468:	9201      	str	r2, [sp, #4]
 800046a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800046c:	695a      	ldr	r2, [r3, #20]
 800046e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000472:	615a      	str	r2, [r3, #20]
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800047a:	9302      	str	r3, [sp, #8]
 800047c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800047e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000482:	2302      	movs	r3, #2
 8000484:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000488:	2309      	movs	r3, #9
 800048a:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000492:	a903      	add	r1, sp, #12
 8000494:	f000 fc26 	bl	8000ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000498:	b008      	add	sp, #32
 800049a:	bd10      	pop	{r4, pc}
 800049c:	40006400 	.word	0x40006400

080004a0 <HAL_MspDeInit>:
/* USER CODE BEGIN 1 */
/**
  * De-Initializes the Global MSP.
  */
void HAL_MspDeInit(void)
{
 80004a0:	b508      	push	{r3, lr}
  /* Reset the RCC clock configuration to the default reset state. */
  LL_RCC_DeInit();
 80004a2:	f000 fdd5 	bl	8001050 <LL_RCC_DeInit>
 80004a6:	4811      	ldr	r0, [pc, #68]	; (80004ec <HAL_MspDeInit+0x4c>)
 80004a8:	2308      	movs	r3, #8
 80004aa:	6283      	str	r3, [r0, #40]	; 0x28

  /* Reset GPIO pin for the LED to turn it off. */
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);

  /* Deinit used GPIOs. */
  LL_GPIO_DeInit(GPIOB);
 80004ac:	f000 fcda 	bl	8000e64 <LL_GPIO_DeInit>
  LL_GPIO_DeInit(GPIOA);
 80004b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b4:	f000 fcd6 	bl	8000e64 <LL_GPIO_DeInit>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 80004b8:	4b0d      	ldr	r3, [pc, #52]	; (80004f0 <HAL_MspDeInit+0x50>)
 80004ba:	69da      	ldr	r2, [r3, #28]
 80004bc:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80004c0:	61da      	str	r2, [r3, #28]
 80004c2:	69da      	ldr	r2, [r3, #28]
 80004c4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80004c8:	61da      	str	r2, [r3, #28]
  CLEAR_BIT(RCC->AHBENR, Periphs);
 80004ca:	695a      	ldr	r2, [r3, #20]
 80004cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80004d0:	615a      	str	r2, [r3, #20]
 80004d2:	695a      	ldr	r2, [r3, #20]
 80004d4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80004d8:	615a      	str	r2, [r3, #20]
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 80004da:	69da      	ldr	r2, [r3, #28]
 80004dc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80004e0:	61da      	str	r2, [r3, #28]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80004e2:	699a      	ldr	r2, [r3, #24]
 80004e4:	f022 0201 	bic.w	r2, r2, #1
 80004e8:	619a      	str	r2, [r3, #24]

  /* PWR clock disable. */
  LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_PWR);
  /* SYSCFG clock disable. */
  LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
}
 80004ea:	bd08      	pop	{r3, pc}
 80004ec:	48000400 	.word	0x48000400
 80004f0:	40021000 	.word	0x40021000

080004f4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004f4:	4770      	bx	lr

080004f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f6:	e7fe      	b.n	80004f6 <HardFault_Handler>

080004f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f8:	e7fe      	b.n	80004f8 <MemManage_Handler>

080004fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004fa:	e7fe      	b.n	80004fa <BusFault_Handler>

080004fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004fc:	e7fe      	b.n	80004fc <UsageFault_Handler>

080004fe <SVC_Handler>:
 80004fe:	4770      	bx	lr

08000500 <DebugMon_Handler>:
 8000500:	4770      	bx	lr

08000502 <PendSV_Handler>:
 8000502:	4770      	bx	lr

08000504 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000504:	f000 b880 	b.w	8000608 <HAL_IncTick>

08000508 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <SystemInit+0x18>)
 800050a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800050e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000516:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800051a:	609a      	str	r2, [r3, #8]
#endif
}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	e000ed00 	.word	0xe000ed00

08000524 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000524:	f8df d034 	ldr.w	sp, [pc, #52]	; 800055c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000528:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800052a:	e003      	b.n	8000534 <LoopCopyDataInit>

0800052c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800052e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000530:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000532:	3104      	adds	r1, #4

08000534 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000534:	480b      	ldr	r0, [pc, #44]	; (8000564 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000538:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800053a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800053c:	d3f6      	bcc.n	800052c <CopyDataInit>
	ldr	r2, =_sbss
 800053e:	4a0b      	ldr	r2, [pc, #44]	; (800056c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000540:	e002      	b.n	8000548 <LoopFillZerobss>

08000542 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000542:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000544:	f842 3b04 	str.w	r3, [r2], #4

08000548 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <LoopForever+0x16>)
	cmp	r2, r3
 800054a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800054c:	d3f9      	bcc.n	8000542 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800054e:	f7ff ffdb 	bl	8000508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000552:	f001 fb13 	bl	8001b7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000556:	f7ff fedb 	bl	8000310 <main>

0800055a <LoopForever>:

LoopForever:
    b LoopForever
 800055a:	e7fe      	b.n	800055a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800055c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000560:	08001c80 	.word	0x08001c80
	ldr	r0, =_sdata
 8000564:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000568:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 800056c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000570:	20000528 	.word	0x20000528

08000574 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000574:	e7fe      	b.n	8000574 <ADC1_2_IRQHandler>
	...

08000578 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000578:	b510      	push	{r4, lr}
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <HAL_DeInit+0x20>)
 800057c:	f04f 32ff 	mov.w	r2, #4294967295
  __HAL_RCC_APB1_RELEASE_RESET();
 8000580:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 8000582:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000584:	611c      	str	r4, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8000586:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000588:	60dc      	str	r4, [r3, #12]

  __HAL_RCC_AHB_FORCE_RESET();
 800058a:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 800058c:	629c      	str	r4, [r3, #40]	; 0x28

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800058e:	f7ff ff87 	bl	80004a0 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
}
 8000592:	4620      	mov	r0, r4
 8000594:	bd10      	pop	{r4, pc}
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000

0800059c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800059c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800059e:	4a0e      	ldr	r2, [pc, #56]	; (80005d8 <HAL_InitTick+0x3c>)
 80005a0:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <HAL_InitTick+0x40>)
{
 80005a2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a4:	7818      	ldrb	r0, [r3, #0]
 80005a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005aa:	fbb3 f3f0 	udiv	r3, r3, r0
 80005ae:	6810      	ldr	r0, [r2, #0]
 80005b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80005b4:	f000 fa60 	bl	8000a78 <HAL_SYSTICK_Config>
 80005b8:	4604      	mov	r4, r0
 80005ba:	b958      	cbnz	r0, 80005d4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005bc:	2d0f      	cmp	r5, #15
 80005be:	d809      	bhi.n	80005d4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c0:	4602      	mov	r2, r0
 80005c2:	4629      	mov	r1, r5
 80005c4:	f04f 30ff 	mov.w	r0, #4294967295
 80005c8:	f000 fa22 	bl	8000a10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <HAL_InitTick+0x44>)
 80005ce:	4620      	mov	r0, r4
 80005d0:	601d      	str	r5, [r3, #0]
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80005d2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005d4:	2001      	movs	r0, #1
 80005d6:	e7fc      	b.n	80005d2 <HAL_InitTick+0x36>
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20000004 	.word	0x20000004
 80005e0:	20000008 	.word	0x20000008

080005e4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e4:	4a07      	ldr	r2, [pc, #28]	; (8000604 <HAL_Init+0x20>)
{
 80005e6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e8:	6813      	ldr	r3, [r2, #0]
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f0:	2003      	movs	r0, #3
 80005f2:	f000 f9fb 	bl	80009ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005f6:	2000      	movs	r0, #0
 80005f8:	f7ff ffd0 	bl	800059c <HAL_InitTick>
  HAL_MspInit();
 80005fc:	f7ff ff06 	bl	800040c <HAL_MspInit>
}
 8000600:	2000      	movs	r0, #0
 8000602:	bd08      	pop	{r3, pc}
 8000604:	40022000 	.word	0x40022000

08000608 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000608:	4a03      	ldr	r2, [pc, #12]	; (8000618 <HAL_IncTick+0x10>)
 800060a:	4b04      	ldr	r3, [pc, #16]	; (800061c <HAL_IncTick+0x14>)
 800060c:	6811      	ldr	r1, [r2, #0]
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	440b      	add	r3, r1
 8000612:	6013      	str	r3, [r2, #0]
}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000500 	.word	0x20000500
 800061c:	20000004 	.word	0x20000004

08000620 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000620:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000622:	4604      	mov	r4, r0
 8000624:	2800      	cmp	r0, #0
 8000626:	d06e      	beq.n	8000706 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000628:	f890 3020 	ldrb.w	r3, [r0, #32]
 800062c:	b90b      	cbnz	r3, 8000632 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800062e:	f7ff ff05 	bl	800043c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000632:	6822      	ldr	r2, [r4, #0]
 8000634:	6813      	ldr	r3, [r2, #0]
 8000636:	f023 0302 	bic.w	r3, r3, #2
 800063a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800063c:	f001 f8c2 	bl	80017c4 <HAL_GetTick>
 8000640:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000642:	6823      	ldr	r3, [r4, #0]
 8000644:	685a      	ldr	r2, [r3, #4]
 8000646:	0791      	lsls	r1, r2, #30
 8000648:	d451      	bmi.n	80006ee <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	f042 0201 	orr.w	r2, r2, #1
 8000650:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000652:	f001 f8b7 	bl	80017c4 <HAL_GetTick>
 8000656:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000658:	6823      	ldr	r3, [r4, #0]
 800065a:	685a      	ldr	r2, [r3, #4]
 800065c:	07d2      	lsls	r2, r2, #31
 800065e:	d554      	bpl.n	800070a <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000660:	7e22      	ldrb	r2, [r4, #24]
 8000662:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	bf0c      	ite	eq
 8000668:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800066c:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000670:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000672:	7e62      	ldrb	r2, [r4, #25]
 8000674:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	bf0c      	ite	eq
 800067a:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800067e:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000682:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000684:	7ea2      	ldrb	r2, [r4, #26]
 8000686:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	bf0c      	ite	eq
 800068c:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000690:	f022 0220 	bicne.w	r2, r2, #32
 8000694:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000696:	7ee2      	ldrb	r2, [r4, #27]
 8000698:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	bf0c      	ite	eq
 800069e:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80006a2:	f042 0210 	orrne.w	r2, r2, #16
 80006a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80006a8:	7f22      	ldrb	r2, [r4, #28]
 80006aa:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	bf0c      	ite	eq
 80006b0:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80006b4:	f022 0208 	bicne.w	r2, r2, #8
 80006b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80006ba:	7f62      	ldrb	r2, [r4, #29]
 80006bc:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	bf0c      	ite	eq
 80006c2:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80006c6:	f022 0204 	bicne.w	r2, r2, #4
 80006ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80006cc:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80006d0:	430a      	orrs	r2, r1
 80006d2:	6921      	ldr	r1, [r4, #16]
 80006d4:	430a      	orrs	r2, r1
 80006d6:	6961      	ldr	r1, [r4, #20]
 80006d8:	430a      	orrs	r2, r1
 80006da:	6861      	ldr	r1, [r4, #4]
 80006dc:	3901      	subs	r1, #1
 80006de:	430a      	orrs	r2, r1
 80006e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80006e2:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80006e4:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80006e6:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80006e8:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 80006ec:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006ee:	f001 f869 	bl	80017c4 <HAL_GetTick>
 80006f2:	1b40      	subs	r0, r0, r5
 80006f4:	280a      	cmp	r0, #10
 80006f6:	d9a4      	bls.n	8000642 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006fe:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000700:	2305      	movs	r3, #5
 8000702:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000706:	2001      	movs	r0, #1
 8000708:	e7f0      	b.n	80006ec <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800070a:	f001 f85b 	bl	80017c4 <HAL_GetTick>
 800070e:	1b40      	subs	r0, r0, r5
 8000710:	280a      	cmp	r0, #10
 8000712:	d9a1      	bls.n	8000658 <HAL_CAN_Init+0x38>
 8000714:	e7f0      	b.n	80006f8 <HAL_CAN_Init+0xd8>

08000716 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000716:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 800071a:	3b01      	subs	r3, #1
 800071c:	2b01      	cmp	r3, #1
{
 800071e:	b570      	push	{r4, r5, r6, lr}
  if ((state == HAL_CAN_STATE_READY) ||
 8000720:	d85f      	bhi.n	80007e2 <HAL_CAN_ConfigFilter+0xcc>
  CAN_TypeDef *can_ip = hcan->Instance;
 8000722:	6803      	ldr	r3, [r0, #0]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000724:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000728:	f042 0201 	orr.w	r2, r2, #1
 800072c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000730:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000732:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000736:	2401      	movs	r4, #1
 8000738:	f002 001f 	and.w	r0, r2, #31
 800073c:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000740:	43c4      	mvns	r4, r0
 8000742:	4025      	ands	r5, r4
 8000744:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000748:	69cd      	ldr	r5, [r1, #28]
 800074a:	bb85      	cbnz	r5, 80007ae <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800074c:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000750:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000752:	4025      	ands	r5, r4
 8000754:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000758:	888d      	ldrh	r5, [r1, #4]
 800075a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800075e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000762:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000766:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000768:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800076a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800076e:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000772:	698a      	ldr	r2, [r1, #24]
 8000774:	bb6a      	cbnz	r2, 80007d2 <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000776:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800077a:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800077c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000780:	690a      	ldr	r2, [r1, #16]
 8000782:	bb52      	cbnz	r2, 80007da <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000784:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000788:	4022      	ands	r2, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800078a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800078e:	6a0a      	ldr	r2, [r1, #32]
 8000790:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000792:	bf02      	ittt	eq
 8000794:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 8000798:	4310      	orreq	r0, r2
 800079a:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800079e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80007a2:	f022 0201 	bic.w	r2, r2, #1
 80007a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80007aa:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80007ae:	2d01      	cmp	r5, #1
 80007b0:	d1df      	bne.n	8000772 <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80007b2:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80007b6:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80007b8:	4305      	orrs	r5, r0
 80007ba:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80007be:	888d      	ldrh	r5, [r1, #4]
 80007c0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80007c4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80007c8:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80007cc:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80007ce:	898d      	ldrh	r5, [r1, #12]
 80007d0:	e7cb      	b.n	800076a <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80007d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80007d6:	4302      	orrs	r2, r0
 80007d8:	e7d0      	b.n	800077c <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80007da:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80007de:	4302      	orrs	r2, r0
 80007e0:	e7d3      	b.n	800078a <HAL_CAN_ConfigFilter+0x74>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80007e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80007e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007e8:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80007ea:	2001      	movs	r0, #1
 80007ec:	e7de      	b.n	80007ac <HAL_CAN_ConfigFilter+0x96>

080007ee <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80007ee:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80007f0:	f890 3020 	ldrb.w	r3, [r0, #32]
 80007f4:	2b01      	cmp	r3, #1
{
 80007f6:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80007f8:	d11f      	bne.n	800083a <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007fa:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80007fc:	2302      	movs	r3, #2
 80007fe:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000802:	6813      	ldr	r3, [r2, #0]
 8000804:	f023 0301 	bic.w	r3, r3, #1
 8000808:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800080a:	f000 ffdb 	bl	80017c4 <HAL_GetTick>
 800080e:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000810:	6823      	ldr	r3, [r4, #0]
 8000812:	6858      	ldr	r0, [r3, #4]
 8000814:	f010 0001 	ands.w	r0, r0, #1
 8000818:	d101      	bne.n	800081e <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800081a:	6260      	str	r0, [r4, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 800081c:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800081e:	f000 ffd1 	bl	80017c4 <HAL_GetTick>
 8000822:	1b40      	subs	r0, r0, r5
 8000824:	280a      	cmp	r0, #10
 8000826:	d9f3      	bls.n	8000810 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800082a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082e:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000830:	2305      	movs	r3, #5
 8000832:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000836:	2001      	movs	r0, #1
 8000838:	e7f0      	b.n	800081c <HAL_CAN_Start+0x2e>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800083a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800083c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000840:	6243      	str	r3, [r0, #36]	; 0x24
 8000842:	e7f8      	b.n	8000836 <HAL_CAN_Start+0x48>

08000844 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000844:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000846:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800084a:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800084c:	3d01      	subs	r5, #1
 800084e:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000850:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8000852:	d840      	bhi.n	80008d6 <HAL_CAN_AddTxMessage+0x92>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000854:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8000858:	d039      	beq.n	80008ce <HAL_CAN_AddTxMessage+0x8a>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800085a:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800085e:	2c03      	cmp	r4, #3
 8000860:	f04f 0501 	mov.w	r5, #1
 8000864:	d105      	bne.n	8000872 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000866:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000868:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800086c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800086e:	2001      	movs	r0, #1
 8000870:	e027      	b.n	80008c2 <HAL_CAN_AddTxMessage+0x7e>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000872:	40a5      	lsls	r5, r4
 8000874:	601d      	str	r5, [r3, #0]
 8000876:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 800087a:	f104 0318 	add.w	r3, r4, #24
      if (pHeader->IDE == CAN_ID_STD)
 800087e:	bb08      	cbnz	r0, 80008c4 <HAL_CAN_AddTxMessage+0x80>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000880:	6808      	ldr	r0, [r1, #0]
 8000882:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000886:	011b      	lsls	r3, r3, #4
 8000888:	0124      	lsls	r4, r4, #4
 800088a:	50f0      	str	r0, [r6, r3]
 800088c:	1933      	adds	r3, r6, r4
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800088e:	6908      	ldr	r0, [r1, #16]
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000890:	7d09      	ldrb	r1, [r1, #20]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000892:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000896:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000898:	bf02      	ittt	eq
 800089a:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 800089e:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 80008a2:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80008a6:	4434      	add	r4, r6
 80008a8:	6851      	ldr	r1, [r2, #4]
 80008aa:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80008ae:	6812      	ldr	r2, [r2, #0]
 80008b0:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80008b4:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80008b8:	f042 0201 	orr.w	r2, r2, #1
 80008bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 80008c0:	2000      	movs	r0, #0
  }
}
 80008c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80008c4:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 80008c6:	4338      	orrs	r0, r7
 80008c8:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 80008cc:	e7db      	b.n	8000886 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80008ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80008d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008d4:	e7ca      	b.n	800086c <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80008d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80008d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008dc:	e7c6      	b.n	800086c <HAL_CAN_AddTxMessage+0x28>

080008de <HAL_CAN_IsTxMessagePending>:
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
  uint32_t status = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 80008de:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80008e2:	3b01      	subs	r3, #1
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d808      	bhi.n	80008fa <HAL_CAN_IsTxMessagePending+0x1c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80008e8:	6803      	ldr	r3, [r0, #0]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	0689      	lsls	r1, r1, #26
 80008ee:	ea31 0303 	bics.w	r3, r1, r3
 80008f2:	bf14      	ite	ne
 80008f4:	2001      	movne	r0, #1
 80008f6:	2000      	moveq	r0, #0
 80008f8:	4770      	bx	lr
  uint32_t status = 0U;
 80008fa:	2000      	movs	r0, #0
    }
  }

  /* Return status */
  return status;
}
 80008fc:	4770      	bx	lr

080008fe <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80008fe:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8000900:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000904:	3c01      	subs	r4, #1
 8000906:	2c01      	cmp	r4, #1
 8000908:	d86b      	bhi.n	80009e2 <HAL_CAN_GetRxMessage+0xe4>
 800090a:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800090c:	b941      	cbnz	r1, 8000920 <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800090e:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000910:	07a4      	lsls	r4, r4, #30
 8000912:	d107      	bne.n	8000924 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000914:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000916:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800091a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800091c:	2001      	movs	r0, #1
 800091e:	e055      	b.n	80009cc <HAL_CAN_GetRxMessage+0xce>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000920:	6934      	ldr	r4, [r6, #16]
 8000922:	e7f5      	b.n	8000910 <HAL_CAN_GetRxMessage+0x12>
 8000924:	010c      	lsls	r4, r1, #4
 8000926:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000928:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800092c:	f007 0704 	and.w	r7, r7, #4
 8000930:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000932:	2f00      	cmp	r7, #0
 8000934:	d14b      	bne.n	80009ce <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000936:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800093a:	0d7f      	lsrs	r7, r7, #21
 800093c:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800093e:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000942:	f007 0702 	and.w	r7, r7, #2
 8000946:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000948:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 800094c:	f007 070f 	and.w	r7, r7, #15
 8000950:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000952:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000956:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800095a:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800095c:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000960:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000962:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000964:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000966:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 800096a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800096c:	6802      	ldr	r2, [r0, #0]
 800096e:	4422      	add	r2, r4
 8000970:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000974:	0a12      	lsrs	r2, r2, #8
 8000976:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000978:	6802      	ldr	r2, [r0, #0]
 800097a:	4422      	add	r2, r4
 800097c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000980:	0c12      	lsrs	r2, r2, #16
 8000982:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000984:	6802      	ldr	r2, [r0, #0]
 8000986:	4422      	add	r2, r4
 8000988:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800098c:	0e12      	lsrs	r2, r2, #24
 800098e:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000990:	6802      	ldr	r2, [r0, #0]
 8000992:	4422      	add	r2, r4
 8000994:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000998:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800099a:	6802      	ldr	r2, [r0, #0]
 800099c:	4422      	add	r2, r4
 800099e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80009a2:	0a12      	lsrs	r2, r2, #8
 80009a4:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80009a6:	6802      	ldr	r2, [r0, #0]
 80009a8:	4422      	add	r2, r4
 80009aa:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80009ae:	0c12      	lsrs	r2, r2, #16
 80009b0:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80009b2:	6802      	ldr	r2, [r0, #0]
 80009b4:	4414      	add	r4, r2
 80009b6:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 80009ba:	0e12      	lsrs	r2, r2, #24
 80009bc:	71da      	strb	r2, [r3, #7]
 80009be:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80009c0:	b951      	cbnz	r1, 80009d8 <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80009c2:	68da      	ldr	r2, [r3, #12]
 80009c4:	f042 0220 	orr.w	r2, r2, #32
 80009c8:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 80009ca:	2000      	movs	r0, #0
  }
}
 80009cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80009ce:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80009d2:	08ff      	lsrs	r7, r7, #3
 80009d4:	6057      	str	r7, [r2, #4]
 80009d6:	e7b2      	b.n	800093e <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80009d8:	691a      	ldr	r2, [r3, #16]
 80009da:	f042 0220 	orr.w	r2, r2, #32
 80009de:	611a      	str	r2, [r3, #16]
 80009e0:	e7f3      	b.n	80009ca <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80009e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009e8:	e797      	b.n	800091a <HAL_CAN_GetRxMessage+0x1c>
	...

080009ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009ee:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009f4:	041b      	lsls	r3, r3, #16
 80009f6:	0c1b      	lsrs	r3, r3, #16
 80009f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009fc:	0200      	lsls	r0, r0, #8
 80009fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a02:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000a06:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000a08:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a10:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a12:	b570      	push	{r4, r5, r6, lr}
 8000a14:	68dc      	ldr	r4, [r3, #12]
 8000a16:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a1a:	f1c4 0507 	rsb	r5, r4, #7
 8000a1e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a20:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a24:	bf28      	it	cs
 8000a26:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a28:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2c:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2e:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a32:	bf8c      	ite	hi
 8000a34:	3c03      	subhi	r4, #3
 8000a36:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	ea21 0303 	bic.w	r3, r1, r3
 8000a3c:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a3e:	fa06 f404 	lsl.w	r4, r6, r4
 8000a42:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000a46:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a48:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	bfa8      	it	ge
 8000a4e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8000a52:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a56:	bfbc      	itt	lt
 8000a58:	f000 000f 	andlt.w	r0, r0, #15
 8000a5c:	4a05      	ldrlt	r2, [pc, #20]	; (8000a74 <HAL_NVIC_SetPriority+0x64>)
 8000a5e:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a60:	bfaa      	itet	ge
 8000a62:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a66:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a68:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a6c:	bd70      	pop	{r4, r5, r6, pc}
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00
 8000a74:	e000ed14 	.word	0xe000ed14

08000a78 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a78:	3801      	subs	r0, #1
 8000a7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a7e:	d20a      	bcs.n	8000a96 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a82:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a84:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a86:	21f0      	movs	r1, #240	; 0xf0
 8000a88:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a8c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a90:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a96:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000e010 	.word	0xe000e010
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000aa4:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <FLASH_SetErrorCode+0x30>)
 8000aa6:	68d3      	ldr	r3, [r2, #12]
 8000aa8:	f013 0310 	ands.w	r3, r3, #16
 8000aac:	d005      	beq.n	8000aba <FLASH_SetErrorCode+0x16>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000aae:	490a      	ldr	r1, [pc, #40]	; (8000ad8 <FLASH_SetErrorCode+0x34>)
 8000ab0:	69cb      	ldr	r3, [r1, #28]
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	61cb      	str	r3, [r1, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000ab8:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000aba:	68d2      	ldr	r2, [r2, #12]
 8000abc:	0752      	lsls	r2, r2, #29
 8000abe:	d506      	bpl.n	8000ace <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000ac0:	4905      	ldr	r1, [pc, #20]	; (8000ad8 <FLASH_SetErrorCode+0x34>)
 8000ac2:	69ca      	ldr	r2, [r1, #28]
 8000ac4:	f042 0201 	orr.w	r2, r2, #1
 8000ac8:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 8000aca:	f043 0304 	orr.w	r3, r3, #4
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000ace:	4a01      	ldr	r2, [pc, #4]	; (8000ad4 <FLASH_SetErrorCode+0x30>)
 8000ad0:	60d3      	str	r3, [r2, #12]
}  
 8000ad2:	4770      	bx	lr
 8000ad4:	40022000 	.word	0x40022000
 8000ad8:	20000508 	.word	0x20000508

08000adc <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_FLASH_Unlock+0x1c>)
 8000ade:	6918      	ldr	r0, [r3, #16]
 8000ae0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000ae4:	d007      	beq.n	8000af6 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <HAL_FLASH_Unlock+0x20>)
 8000ae8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000aea:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000aee:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000af0:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8000af2:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8000af6:	4770      	bx	lr
 8000af8:	40022000 	.word	0x40022000
 8000afc:	45670123 	.word	0x45670123

08000b00 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000b00:	4a03      	ldr	r2, [pc, #12]	; (8000b10 <HAL_FLASH_Lock+0x10>)
 8000b02:	6913      	ldr	r3, [r2, #16]
 8000b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b08:	6113      	str	r3, [r2, #16]
}
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40022000 	.word	0x40022000

08000b14 <FLASH_WaitForLastOperation>:
{
 8000b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b16:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8000b18:	f000 fe54 	bl	80017c4 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000b1c:	4c10      	ldr	r4, [pc, #64]	; (8000b60 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 8000b1e:	4607      	mov	r7, r0
 8000b20:	4626      	mov	r6, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000b22:	68e3      	ldr	r3, [r4, #12]
 8000b24:	07d9      	lsls	r1, r3, #31
 8000b26:	d40f      	bmi.n	8000b48 <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000b28:	68e3      	ldr	r3, [r4, #12]
 8000b2a:	069a      	lsls	r2, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000b2c:	bf44      	itt	mi
 8000b2e:	2320      	movmi	r3, #32
 8000b30:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b32:	68f3      	ldr	r3, [r6, #12]
 8000b34:	06db      	lsls	r3, r3, #27
 8000b36:	d403      	bmi.n	8000b40 <FLASH_WaitForLastOperation+0x2c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000b38:	68f0      	ldr	r0, [r6, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000b3a:	f010 0004 	ands.w	r0, r0, #4
 8000b3e:	d007      	beq.n	8000b50 <FLASH_WaitForLastOperation+0x3c>
    FLASH_SetErrorCode();
 8000b40:	f7ff ffb0 	bl	8000aa4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000b44:	2001      	movs	r0, #1
 8000b46:	e003      	b.n	8000b50 <FLASH_WaitForLastOperation+0x3c>
    if (Timeout != HAL_MAX_DELAY)
 8000b48:	1c68      	adds	r0, r5, #1
 8000b4a:	d0ea      	beq.n	8000b22 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000b4c:	b90d      	cbnz	r5, 8000b52 <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 8000b4e:	2003      	movs	r0, #3
}
 8000b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000b52:	f000 fe37 	bl	80017c4 <HAL_GetTick>
 8000b56:	1bc0      	subs	r0, r0, r7
 8000b58:	42a8      	cmp	r0, r5
 8000b5a:	d9e2      	bls.n	8000b22 <FLASH_WaitForLastOperation+0xe>
 8000b5c:	e7f7      	b.n	8000b4e <FLASH_WaitForLastOperation+0x3a>
 8000b5e:	bf00      	nop
 8000b60:	40022000 	.word	0x40022000

08000b64 <HAL_FLASH_Program>:
{
 8000b64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8000b68:	4c24      	ldr	r4, [pc, #144]	; (8000bfc <HAL_FLASH_Program+0x98>)
{
 8000b6a:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 8000b6c:	7e23      	ldrb	r3, [r4, #24]
 8000b6e:	2b01      	cmp	r3, #1
{
 8000b70:	4605      	mov	r5, r0
 8000b72:	460f      	mov	r7, r1
 8000b74:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 8000b76:	d03f      	beq.n	8000bf8 <HAL_FLASH_Program+0x94>
 8000b78:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b7a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000b7e:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b80:	f7ff ffc8 	bl	8000b14 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000b84:	bba0      	cbnz	r0, 8000bf0 <HAL_FLASH_Program+0x8c>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000b86:	2d01      	cmp	r5, #1
 8000b88:	d003      	beq.n	8000b92 <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 8000b8a:	2d02      	cmp	r5, #2
 8000b8c:	bf0c      	ite	eq
 8000b8e:	2502      	moveq	r5, #2
 8000b90:	2504      	movne	r5, #4
 8000b92:	f04f 0900 	mov.w	r9, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000b96:	f8df a068 	ldr.w	sl, [pc, #104]	; 8000c00 <HAL_FLASH_Program+0x9c>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b9a:	46cb      	mov	fp, r9
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000b9c:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000ba0:	f1c3 0120 	rsb	r1, r3, #32
 8000ba4:	f1a3 0220 	sub.w	r2, r3, #32
 8000ba8:	fa06 f101 	lsl.w	r1, r6, r1
 8000bac:	fa28 f303 	lsr.w	r3, r8, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000bb0:	f8c4 b01c 	str.w	fp, [r4, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000bb4:	430b      	orrs	r3, r1
 8000bb6:	fa26 f202 	lsr.w	r2, r6, r2
 8000bba:	4313      	orrs	r3, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000bbc:	f8da 2010 	ldr.w	r2, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000bc0:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000bc2:	f042 0201 	orr.w	r2, r2, #1
 8000bc6:	f8ca 2010 	str.w	r2, [sl, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000bca:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 8000bce:	f827 3019 	strh.w	r3, [r7, r9, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000bd2:	f7ff ff9f 	bl	8000b14 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000bd6:	f8da 3010 	ldr.w	r3, [sl, #16]
 8000bda:	f023 0301 	bic.w	r3, r3, #1
 8000bde:	f8ca 3010 	str.w	r3, [sl, #16]
      if (status != HAL_OK)
 8000be2:	b928      	cbnz	r0, 8000bf0 <HAL_FLASH_Program+0x8c>
 8000be4:	f109 0901 	add.w	r9, r9, #1
    for (index = 0U; index < nbiterations; index++)
 8000be8:	fa5f f389 	uxtb.w	r3, r9
 8000bec:	429d      	cmp	r5, r3
 8000bee:	d8d5      	bhi.n	8000b9c <HAL_FLASH_Program+0x38>
  __HAL_UNLOCK(&pFlash);
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	7623      	strb	r3, [r4, #24]
}
 8000bf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	e7fb      	b.n	8000bf4 <HAL_FLASH_Program+0x90>
 8000bfc:	20000508 	.word	0x20000508
 8000c00:	40022000 	.word	0x40022000

08000c04 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <FLASH_MassErase+0x1c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <FLASH_MassErase+0x20>)
 8000c0c:	691a      	ldr	r2, [r3, #16]
 8000c0e:	f042 0204 	orr.w	r2, r2, #4
 8000c12:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000c14:	691a      	ldr	r2, [r3, #16]
 8000c16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c1a:	611a      	str	r2, [r3, #16]
}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000508 	.word	0x20000508
 8000c24:	40022000 	.word	0x40022000

08000c28 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <FLASH_PageErase+0x1c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <FLASH_PageErase+0x20>)
 8000c30:	691a      	ldr	r2, [r3, #16]
 8000c32:	f042 0202 	orr.w	r2, r2, #2
 8000c36:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000c38:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000c3a:	691a      	ldr	r2, [r3, #16]
 8000c3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c40:	611a      	str	r2, [r3, #16]
}
 8000c42:	4770      	bx	lr
 8000c44:	20000508 	.word	0x20000508
 8000c48:	40022000 	.word	0x40022000

08000c4c <HAL_FLASHEx_Erase>:
{
 8000c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8000c50:	4d22      	ldr	r5, [pc, #136]	; (8000cdc <HAL_FLASHEx_Erase+0x90>)
 8000c52:	7e2b      	ldrb	r3, [r5, #24]
 8000c54:	2b01      	cmp	r3, #1
{
 8000c56:	4607      	mov	r7, r0
 8000c58:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8000c5a:	d03d      	beq.n	8000cd8 <HAL_FLASHEx_Erase+0x8c>
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000c5c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 8000c5e:	2401      	movs	r4, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000c60:	42a3      	cmp	r3, r4
  __HAL_LOCK(&pFlash);
 8000c62:	762c      	strb	r4, [r5, #24]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000c64:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000c68:	d113      	bne.n	8000c92 <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000c6a:	f7ff ff53 	bl	8000b14 <FLASH_WaitForLastOperation>
 8000c6e:	b120      	cbz	r0, 8000c7a <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c70:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8000c72:	2300      	movs	r3, #0
 8000c74:	762b      	strb	r3, [r5, #24]
}
 8000c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase();
 8000c7a:	f7ff ffc3 	bl	8000c04 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c7e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c82:	f7ff ff47 	bl	8000b14 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000c86:	4a16      	ldr	r2, [pc, #88]	; (8000ce0 <HAL_FLASHEx_Erase+0x94>)
 8000c88:	6913      	ldr	r3, [r2, #16]
 8000c8a:	f023 0304 	bic.w	r3, r3, #4
 8000c8e:	6113      	str	r3, [r2, #16]
 8000c90:	e7ef      	b.n	8000c72 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000c92:	f7ff ff3f 	bl	8000b14 <FLASH_WaitForLastOperation>
 8000c96:	2800      	cmp	r0, #0
 8000c98:	d1ea      	bne.n	8000c70 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ca2:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8000ca4:	687e      	ldr	r6, [r7, #4]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000ca6:	4c0e      	ldr	r4, [pc, #56]	; (8000ce0 <HAL_FLASHEx_Erase+0x94>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000ca8:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
 8000cac:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
        for(address = pEraseInit->PageAddress;
 8000cb0:	42b3      	cmp	r3, r6
 8000cb2:	d9de      	bls.n	8000c72 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8000cb4:	4630      	mov	r0, r6
 8000cb6:	f7ff ffb7 	bl	8000c28 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000cba:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000cbe:	f7ff ff29 	bl	8000b14 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000cc2:	6923      	ldr	r3, [r4, #16]
 8000cc4:	f023 0302 	bic.w	r3, r3, #2
 8000cc8:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8000cca:	b110      	cbz	r0, 8000cd2 <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 8000ccc:	f8c8 6000 	str.w	r6, [r8]
            break;
 8000cd0:	e7cf      	b.n	8000c72 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8000cd2:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000cd6:	e7e7      	b.n	8000ca8 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8000cd8:	2002      	movs	r0, #2
 8000cda:	e7cc      	b.n	8000c76 <HAL_FLASHEx_Erase+0x2a>
 8000cdc:	20000508 	.word	0x20000508
 8000ce0:	40022000 	.word	0x40022000

08000ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ce8:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cea:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cec:	f8df e170 	ldr.w	lr, [pc, #368]	; 8000e60 <HAL_GPIO_Init+0x17c>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cf0:	4a59      	ldr	r2, [pc, #356]	; (8000e58 <HAL_GPIO_Init+0x174>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf2:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cf4:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00u;
 8000cf8:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfa:	9c01      	ldr	r4, [sp, #4]
 8000cfc:	40dc      	lsrs	r4, r3
 8000cfe:	d102      	bne.n	8000d06 <HAL_GPIO_Init+0x22>
      }
    }

    position++;
  }
}
 8000d00:	b005      	add	sp, #20
 8000d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d06:	2401      	movs	r4, #1
 8000d08:	fa04 f803 	lsl.w	r8, r4, r3
    if (iocurrent != 0x00u)
 8000d0c:	9c01      	ldr	r4, [sp, #4]
 8000d0e:	ea18 0504 	ands.w	r5, r8, r4
 8000d12:	f000 8098 	beq.w	8000e46 <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d16:	684c      	ldr	r4, [r1, #4]
 8000d18:	f024 0a10 	bic.w	sl, r4, #16
 8000d1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d20:	2603      	movs	r6, #3
 8000d22:	f10a 37ff 	add.w	r7, sl, #4294967295
 8000d26:	fa06 f60c 	lsl.w	r6, r6, ip
 8000d2a:	2f01      	cmp	r7, #1
 8000d2c:	ea6f 0606 	mvn.w	r6, r6
 8000d30:	d811      	bhi.n	8000d56 <HAL_GPIO_Init+0x72>
        temp = GPIOx->OSPEEDR;
 8000d32:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d34:	ea07 0b06 	and.w	fp, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d38:	68cf      	ldr	r7, [r1, #12]
 8000d3a:	fa07 f70c 	lsl.w	r7, r7, ip
 8000d3e:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8000d42:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d44:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d46:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d4a:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000d4e:	409f      	lsls	r7, r3
 8000d50:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8000d54:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000d56:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d58:	ea07 0806 	and.w	r8, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d5c:	688f      	ldr	r7, [r1, #8]
 8000d5e:	fa07 f70c 	lsl.w	r7, r7, ip
 8000d62:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d66:	f1ba 0f02 	cmp.w	sl, #2
      GPIOx->PUPDR = temp;
 8000d6a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d6c:	d114      	bne.n	8000d98 <HAL_GPIO_Init+0xb4>
        temp = GPIOx->AFR[position >> 3u];
 8000d6e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8000d72:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d76:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000d7a:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d7e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000d82:	fa09 fb0a 	lsl.w	fp, r9, sl
 8000d86:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d8a:	690f      	ldr	r7, [r1, #16]
 8000d8c:	fa07 f70a 	lsl.w	r7, r7, sl
 8000d90:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8000d94:	f8c8 7020 	str.w	r7, [r8, #32]
      temp = GPIOx->MODER;
 8000d98:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d9a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d9c:	f004 0703 	and.w	r7, r4, #3
 8000da0:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000da4:	ea4c 0606 	orr.w	r6, ip, r6
      GPIOx->MODER = temp;
 8000da8:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000daa:	00e6      	lsls	r6, r4, #3
 8000dac:	d54b      	bpl.n	8000e46 <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	f8de 6018 	ldr.w	r6, [lr, #24]
 8000db2:	f046 0601 	orr.w	r6, r6, #1
 8000db6:	f8ce 6018 	str.w	r6, [lr, #24]
 8000dba:	f8de 6018 	ldr.w	r6, [lr, #24]
 8000dbe:	f023 0703 	bic.w	r7, r3, #3
 8000dc2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000dc6:	f006 0601 	and.w	r6, r6, #1
 8000dca:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000dce:	9603      	str	r6, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dd0:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd4:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000dd6:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dd8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000ddc:	fa09 f80c 	lsl.w	r8, r9, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000de0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000de4:	ea26 0808 	bic.w	r8, r6, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000de8:	d02f      	beq.n	8000e4a <HAL_GPIO_Init+0x166>
 8000dea:	4e1c      	ldr	r6, [pc, #112]	; (8000e5c <HAL_GPIO_Init+0x178>)
 8000dec:	42b0      	cmp	r0, r6
 8000dee:	d02e      	beq.n	8000e4e <HAL_GPIO_Init+0x16a>
 8000df0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000df4:	42b0      	cmp	r0, r6
 8000df6:	d02c      	beq.n	8000e52 <HAL_GPIO_Init+0x16e>
 8000df8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000dfc:	42b0      	cmp	r0, r6
 8000dfe:	bf14      	ite	ne
 8000e00:	2605      	movne	r6, #5
 8000e02:	2603      	moveq	r6, #3
 8000e04:	fa06 f60c 	lsl.w	r6, r6, ip
 8000e08:	ea46 0608 	orr.w	r6, r6, r8
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e0c:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000e0e:	6816      	ldr	r6, [r2, #0]
        temp &= ~(iocurrent);
 8000e10:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e12:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000e16:	bf0c      	ite	eq
 8000e18:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000e1a:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000e1c:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000e1e:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e20:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000e24:	bf0c      	ite	eq
 8000e26:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000e28:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000e2a:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000e2c:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e2e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000e32:	bf0c      	ite	eq
 8000e34:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000e36:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000e38:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000e3a:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e3c:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8000e3e:	bf54      	ite	pl
 8000e40:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000e42:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000e44:	60d6      	str	r6, [r2, #12]
    position++;
 8000e46:	3301      	adds	r3, #1
 8000e48:	e757      	b.n	8000cfa <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	e7da      	b.n	8000e04 <HAL_GPIO_Init+0x120>
 8000e4e:	2601      	movs	r6, #1
 8000e50:	e7d8      	b.n	8000e04 <HAL_GPIO_Init+0x120>
 8000e52:	2602      	movs	r6, #2
 8000e54:	e7d6      	b.n	8000e04 <HAL_GPIO_Init+0x120>
 8000e56:	bf00      	nop
 8000e58:	40010400 	.word	0x40010400
 8000e5c:	48000400 	.word	0x48000400
 8000e60:	40021000 	.word	0x40021000

08000e64 <LL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Force and Release reset on clock of GPIOx Port */
  if (GPIOx == GPIOA)
 8000e64:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8000e68:	d10a      	bne.n	8000e80 <LL_GPIO_DeInit+0x1c>
  SET_BIT(RCC->AHBRSTR, Periphs);
 8000e6a:	4b24      	ldr	r3, [pc, #144]	; (8000efc <LL_GPIO_DeInit+0x98>)
 8000e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e6e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000e72:	629a      	str	r2, [r3, #40]	; 0x28
  CLEAR_BIT(RCC->AHBRSTR, Periphs);
 8000e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e76:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000e7a:	629a      	str	r2, [r3, #40]	; 0x28
  ErrorStatus status = SUCCESS;
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	4770      	bx	lr
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOA);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOA);
  }
  else if (GPIOx == GPIOB)
 8000e80:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <LL_GPIO_DeInit+0x9c>)
 8000e82:	4298      	cmp	r0, r3
 8000e84:	d10b      	bne.n	8000e9e <LL_GPIO_DeInit+0x3a>
  SET_BIT(RCC->AHBRSTR, Periphs);
 8000e86:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000e8a:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8000e8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e90:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000e94:	629a      	str	r2, [r3, #40]	; 0x28
  CLEAR_BIT(RCC->AHBRSTR, Periphs);
 8000e96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e9c:	e7ed      	b.n	8000e7a <LL_GPIO_DeInit+0x16>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOB);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOB);
  }
  else if (GPIOx == GPIOC)
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <LL_GPIO_DeInit+0xa0>)
 8000ea0:	4298      	cmp	r0, r3
 8000ea2:	d10b      	bne.n	8000ebc <LL_GPIO_DeInit+0x58>
  SET_BIT(RCC->AHBRSTR, Periphs);
 8000ea4:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000ea8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8000eac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000eae:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000eb2:	629a      	str	r2, [r3, #40]	; 0x28
  CLEAR_BIT(RCC->AHBRSTR, Periphs);
 8000eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000eb6:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8000eba:	e7de      	b.n	8000e7a <LL_GPIO_DeInit+0x16>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOC);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOC);
  }
#if defined(GPIOD)
  else if (GPIOx == GPIOD)
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <LL_GPIO_DeInit+0xa4>)
 8000ebe:	4298      	cmp	r0, r3
 8000ec0:	d10b      	bne.n	8000eda <LL_GPIO_DeInit+0x76>
  SET_BIT(RCC->AHBRSTR, Periphs);
 8000ec2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000ec6:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8000eca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ecc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000ed0:	629a      	str	r2, [r3, #40]	; 0x28
  CLEAR_BIT(RCC->AHBRSTR, Periphs);
 8000ed2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ed4:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000ed8:	e7cf      	b.n	8000e7a <LL_GPIO_DeInit+0x16>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOE);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOE);
  }
#endif /* GPIOE */
#if defined(GPIOF)
  else if (GPIOx == GPIOF)
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <LL_GPIO_DeInit+0xa8>)
 8000edc:	4298      	cmp	r0, r3
 8000ede:	d10b      	bne.n	8000ef8 <LL_GPIO_DeInit+0x94>
  SET_BIT(RCC->AHBRSTR, Periphs);
 8000ee0:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000ee4:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8000ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000eea:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
  CLEAR_BIT(RCC->AHBRSTR, Periphs);
 8000ef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ef2:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000ef6:	e7c0      	b.n	8000e7a <LL_GPIO_DeInit+0x16>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOH);
  }
#endif /* GPIOH */
  else
  {
    status = ERROR;
 8000ef8:	2001      	movs	r0, #1
  }

  return (status);
}
 8000efa:	4770      	bx	lr
 8000efc:	40021000 	.word	0x40021000
 8000f00:	48000400 	.word	0x48000400
 8000f04:	48000800 	.word	0x48000800
 8000f08:	48000c00 	.word	0x48000c00
 8000f0c:	48001400 	.word	0x48001400

08000f10 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f14:	4602      	mov	r2, r0
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000f16:	680d      	ldr	r5, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f18:	fa95 f4a5 	rbit	r4, r5

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000f1c:	f04f 0e01 	mov.w	lr, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000f20:	fab4 f484 	clz	r4, r4
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000f24:	2603      	movs	r6, #3
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000f26:	f04f 0c0f 	mov.w	ip, #15
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000f2a:	ea6f 0805 	mvn.w	r8, r5
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000f2e:	fa35 f004 	lsrs.w	r0, r5, r4
 8000f32:	d101      	bne.n	8000f38 <LL_GPIO_Init+0x28>
    }
    pinpos++;
  }

  return (SUCCESS);
}
 8000f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000f38:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin != 0x00u)
 8000f3c:	402b      	ands	r3, r5
 8000f3e:	d06c      	beq.n	800101a <LL_GPIO_Init+0x10a>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000f40:	6848      	ldr	r0, [r1, #4]
 8000f42:	1e47      	subs	r7, r0, #1
 8000f44:	2f01      	cmp	r7, #1
 8000f46:	d81e      	bhi.n	8000f86 <LL_GPIO_Init+0x76>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000f48:	6897      	ldr	r7, [r2, #8]
 8000f4a:	fa93 f9a3 	rbit	r9, r3
 8000f4e:	fab9 f989 	clz	r9, r9
 8000f52:	fa93 faa3 	rbit	sl, r3
 8000f56:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8000f5a:	fa06 f909 	lsl.w	r9, r6, r9
 8000f5e:	ea27 0909 	bic.w	r9, r7, r9
 8000f62:	faba fa8a 	clz	sl, sl
 8000f66:	688f      	ldr	r7, [r1, #8]
 8000f68:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8000f6c:	fa07 f70a 	lsl.w	r7, r7, sl
 8000f70:	ea49 0707 	orr.w	r7, r9, r7
 8000f74:	6097      	str	r7, [r2, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000f76:	6857      	ldr	r7, [r2, #4]
 8000f78:	ea08 0907 	and.w	r9, r8, r7
 8000f7c:	68cf      	ldr	r7, [r1, #12]
 8000f7e:	436f      	muls	r7, r5
 8000f80:	ea49 0707 	orr.w	r7, r9, r7
 8000f84:	6057      	str	r7, [r2, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000f86:	68d7      	ldr	r7, [r2, #12]
 8000f88:	fa93 f9a3 	rbit	r9, r3
 8000f8c:	fab9 f989 	clz	r9, r9
 8000f90:	fa93 faa3 	rbit	sl, r3
 8000f94:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8000f98:	fa06 f909 	lsl.w	r9, r6, r9
 8000f9c:	ea27 0909 	bic.w	r9, r7, r9
 8000fa0:	faba fa8a 	clz	sl, sl
 8000fa4:	690f      	ldr	r7, [r1, #16]
 8000fa6:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8000faa:	fa07 f70a 	lsl.w	r7, r7, sl
 8000fae:	ea49 0707 	orr.w	r7, r9, r7
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000fb2:	2802      	cmp	r0, #2
 8000fb4:	60d7      	str	r7, [r2, #12]
 8000fb6:	d11d      	bne.n	8000ff4 <LL_GPIO_Init+0xe4>
 8000fb8:	fa93 f7a3 	rbit	r7, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000fbc:	fab7 f787 	clz	r7, r7
 8000fc0:	2f07      	cmp	r7, #7
 8000fc2:	f8d1 a014 	ldr.w	sl, [r1, #20]
 8000fc6:	dc2a      	bgt.n	800101e <LL_GPIO_Init+0x10e>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000fc8:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8000fcc:	fa93 f7a3 	rbit	r7, r3
 8000fd0:	fab7 f787 	clz	r7, r7
 8000fd4:	fa93 f9a3 	rbit	r9, r3
 8000fd8:	fab9 f989 	clz	r9, r9
 8000fdc:	00bf      	lsls	r7, r7, #2
 8000fde:	fa0c f707 	lsl.w	r7, ip, r7
 8000fe2:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8000fe6:	ea2b 0707 	bic.w	r7, fp, r7
 8000fea:	fa0a fa09 	lsl.w	sl, sl, r9
 8000fee:	ea47 070a 	orr.w	r7, r7, sl
 8000ff2:	6217      	str	r7, [r2, #32]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000ff4:	f8d2 9000 	ldr.w	r9, [r2]
 8000ff8:	fa93 f7a3 	rbit	r7, r3
 8000ffc:	fab7 f787 	clz	r7, r7
 8001000:	fa93 f3a3 	rbit	r3, r3
 8001004:	fab3 f383 	clz	r3, r3
 8001008:	007f      	lsls	r7, r7, #1
 800100a:	fa06 f707 	lsl.w	r7, r6, r7
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	ea29 0707 	bic.w	r7, r9, r7
 8001014:	4098      	lsls	r0, r3
 8001016:	4307      	orrs	r7, r0
 8001018:	6017      	str	r7, [r2, #0]
    pinpos++;
 800101a:	3401      	adds	r4, #1
 800101c:	e787      	b.n	8000f2e <LL_GPIO_Init+0x1e>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800101e:	f8d2 b024 	ldr.w	fp, [r2, #36]	; 0x24
 8001022:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8001026:	fa99 f7a9 	rbit	r7, r9
 800102a:	fab7 f787 	clz	r7, r7
 800102e:	fa99 f9a9 	rbit	r9, r9
 8001032:	fab9 f989 	clz	r9, r9
 8001036:	00bf      	lsls	r7, r7, #2
 8001038:	fa0c f707 	lsl.w	r7, ip, r7
 800103c:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8001040:	ea2b 0707 	bic.w	r7, fp, r7
 8001044:	fa0a fa09 	lsl.w	sl, sl, r9
 8001048:	ea47 070a 	orr.w	r7, r7, sl
 800104c:	6257      	str	r7, [r2, #36]	; 0x24
 800104e:	e7d1      	b.n	8000ff4 <LL_GPIO_Init+0xe4>

08001050 <LL_RCC_DeInit>:
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001050:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <LL_RCC_DeInit+0x7c>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	f042 0201 	orr.w	r2, r2, #1
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RCC registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_RCC_DeInit(void)
{
 8001058:	b082      	sub	sp, #8
 800105a:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800105c:	681a      	ldr	r2, [r3, #0]

  /* Set HSION bit */
  LL_RCC_HSI_Enable();

  /* Wait for HSI READY bit */
  while(LL_RCC_HSI_IsReady() != 1U)
 800105e:	0792      	lsls	r2, r2, #30
 8001060:	d5fc      	bpl.n	800105c <LL_RCC_DeInit+0xc>
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001068:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800106c:	601a      	str	r2, [r3, #0]

  /* Set HSITRIM bits to the reset value*/
  LL_RCC_HSI_SetCalibTrimming(0x10U);

  /* Reset SW, HPRE, PPRE and MCOSEL bits */
  vl_mask = 0xFFFFFFFFU;
 800106e:	f04f 32ff 	mov.w	r2, #4294967295
 8001072:	9201      	str	r2, [sp, #4]
  CLEAR_BIT(vl_mask, (RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE1 |\
 8001074:	9901      	ldr	r1, [sp, #4]
 8001076:	4a16      	ldr	r2, [pc, #88]	; (80010d0 <LL_RCC_DeInit+0x80>)
 8001078:	400a      	ands	r2, r1
 800107a:	9201      	str	r2, [sp, #4]
                      RCC_CFGR_PPRE2 | RCC_CFGR_MCOSEL));
 
  /* Write new value in CFGR register */
  LL_RCC_WriteReg(CFGR, vl_mask);
 800107c:	9a01      	ldr	r2, [sp, #4]
 800107e:	605a      	str	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001080:	685a      	ldr	r2, [r3, #4]

  /* Wait till system clock source is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001082:	f012 0f0c 	tst.w	r2, #12
 8001086:	d1fb      	bne.n	8001080 <LL_RCC_DeInit+0x30>
  {}

  /* Read CR register */
  vl_mask = LL_RCC_ReadReg(CR);
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	9201      	str	r2, [sp, #4]
  
  /* Reset HSEON, CSSON, PLLON bits */
  CLEAR_BIT(vl_mask, (RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON));
 800108c:	9a01      	ldr	r2, [sp, #4]
 800108e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001092:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001096:	9201      	str	r2, [sp, #4]
 
   /* Write new value in CR register */
  LL_RCC_WriteReg(CR, vl_mask);
 8001098:	9a01      	ldr	r2, [sp, #4]
 800109a:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800109c:	6818      	ldr	r0, [r3, #0]

  /* Wait for PLL READY bit to be reset */
  while(LL_RCC_PLL_IsReady() != 0U)
 800109e:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80010a2:	d1fb      	bne.n	800109c <LL_RCC_DeInit+0x4c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010aa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR3 register */
  LL_RCC_WriteReg(CFGR3, 0x00000000U);

  /* Clear pending flags */
  vl_mask = (LL_RCC_CIR_LSIRDYC | LL_RCC_CIR_LSERDYC | LL_RCC_CIR_HSIRDYC |\
 80010ac:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
  LL_RCC_WriteReg(CFGR, 0x00000000U);
 80010b0:	6058      	str	r0, [r3, #4]
  LL_RCC_WriteReg(CFGR2, 0x00000000U);
 80010b2:	62d8      	str	r0, [r3, #44]	; 0x2c
  LL_RCC_WriteReg(CFGR3, 0x00000000U);
 80010b4:	6318      	str	r0, [r3, #48]	; 0x30
  vl_mask = (LL_RCC_CIR_LSIRDYC | LL_RCC_CIR_LSERDYC | LL_RCC_CIR_HSIRDYC |\
 80010b6:	9201      	str	r2, [sp, #4]
             LL_RCC_CIR_HSERDYC | LL_RCC_CIR_PLLRDYC | LL_RCC_CIR_CSSC);

  /* Write new value in CIR register */
  LL_RCC_WriteReg(CIR, vl_mask);
 80010b8:	9a01      	ldr	r2, [sp, #4]
 80010ba:	609a      	str	r2, [r3, #8]

  /* Disable all interrupts */
  LL_RCC_WriteReg(CIR, 0x00000000U);
 80010bc:	6098      	str	r0, [r3, #8]
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80010be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010c0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear reset flags */
  LL_RCC_ClearResetFlags();

  return SUCCESS;
}
 80010c6:	b002      	add	sp, #8
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	f8ffc00c 	.word	0xf8ffc00c

080010d4 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <RCC_GetHCLKClockFreq+0x14>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010de:	5cd3      	ldrb	r3, [r2, r3]
}
 80010e0:	40d8      	lsrs	r0, r3
 80010e2:	4770      	bx	lr
 80010e4:	40021000 	.word	0x40021000
 80010e8:	08001bec 	.word	0x08001bec

080010ec <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <RCC_GetPCLK1ClockFreq+0x14>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80010f6:	5cd3      	ldrb	r3, [r2, r3]
}
 80010f8:	40d8      	lsrs	r0, r3
 80010fa:	4770      	bx	lr
 80010fc:	40021000 	.word	0x40021000
 8001100:	08001bfc 	.word	0x08001bfc

08001104 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001106:	4a04      	ldr	r2, [pc, #16]	; (8001118 <RCC_GetPCLK2ClockFreq+0x14>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800110e:	5cd3      	ldrb	r3, [r2, r3]
}
 8001110:	40d8      	lsrs	r0, r3
 8001112:	4770      	bx	lr
 8001114:	40021000 	.word	0x40021000
 8001118:	08001bfc 	.word	0x08001bfc

0800111c <RCC_PLL_GetFreqDomain_SYS>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800111c:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <RCC_PLL_GetFreqDomain_SYS+0x38>)
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800111e:	490e      	ldr	r1, [pc, #56]	; (8001158 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	480e      	ldr	r0, [pc, #56]	; (800115c <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8001124:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8001128:	2a00      	cmp	r2, #0
 800112a:	bf08      	it	eq
 800112c:	4608      	moveq	r0, r1
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 800112e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001136:	fa92 f2a2 	rbit	r2, r2
      break;
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800113a:	fab2 f282 	clz	r2, r2
 800113e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001142:	40d3      	lsrs	r3, r2
 8001144:	3302      	adds	r3, #2
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001146:	f001 010f 	and.w	r1, r1, #15
 800114a:	3101      	adds	r1, #1
 800114c:	fbb0 f0f1 	udiv	r0, r0, r1
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001150:	4358      	muls	r0, r3
 8001152:	4770      	bx	lr
 8001154:	40021000 	.word	0x40021000
 8001158:	003d0900 	.word	0x003d0900
 800115c:	007a1200 	.word	0x007a1200

08001160 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <RCC_GetSystemClockFreq+0x14>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8001168:	2b08      	cmp	r3, #8
 800116a:	d101      	bne.n	8001170 <RCC_GetSystemClockFreq+0x10>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800116c:	f7ff bfd6 	b.w	800111c <RCC_PLL_GetFreqDomain_SYS>
}
 8001170:	4801      	ldr	r0, [pc, #4]	; (8001178 <RCC_GetSystemClockFreq+0x18>)
 8001172:	4770      	bx	lr
 8001174:	40021000 	.word	0x40021000
 8001178:	007a1200 	.word	0x007a1200

0800117c <LL_RCC_GetSystemClocksFreq>:
{
 800117c:	b510      	push	{r4, lr}
 800117e:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001180:	f7ff ffee 	bl	8001160 <RCC_GetSystemClockFreq>
 8001184:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001186:	f7ff ffa5 	bl	80010d4 <RCC_GetHCLKClockFreq>
 800118a:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800118c:	f7ff ffae 	bl	80010ec <RCC_GetPCLK1ClockFreq>
 8001190:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001192:	6860      	ldr	r0, [r4, #4]
 8001194:	f7ff ffb6 	bl	8001104 <RCC_GetPCLK2ClockFreq>
 8001198:	60e0      	str	r0, [r4, #12]
}
 800119a:	bd10      	pop	{r4, pc}

0800119c <LL_RCC_GetUSARTClockFreq>:
{
 800119c:	b508      	push	{r3, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800119e:	bb18      	cbnz	r0, 80011e8 <LL_RCC_GetUSARTClockFreq+0x4c>
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80011a0:	4a12      	ldr	r2, [pc, #72]	; (80011ec <LL_RCC_GetUSARTClockFreq+0x50>)
 80011a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011a4:	f003 0303 	and.w	r3, r3, #3
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d00e      	beq.n	80011ca <LL_RCC_GetUSARTClockFreq+0x2e>
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d005      	beq.n	80011bc <LL_RCC_GetUSARTClockFreq+0x20>
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d111      	bne.n	80011d8 <LL_RCC_GetUSARTClockFreq+0x3c>
}
 80011b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usart_frequency = RCC_GetSystemClockFreq();
 80011b8:	f7ff bfd2 	b.w	8001160 <RCC_GetSystemClockFreq>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80011bc:	6813      	ldr	r3, [r2, #0]
        if (LL_RCC_HSI_IsReady())
 80011be:	f013 0f02 	tst.w	r3, #2
          usart_frequency = HSI_VALUE;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <LL_RCC_GetUSARTClockFreq+0x54>)
 80011c4:	bf18      	it	ne
 80011c6:	4618      	movne	r0, r3
}
 80011c8:	bd08      	pop	{r3, pc}
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80011ca:	6a13      	ldr	r3, [r2, #32]
        if (LL_RCC_LSE_IsReady())
 80011cc:	f013 0f02 	tst.w	r3, #2
          usart_frequency = LSE_VALUE;
 80011d0:	bf18      	it	ne
 80011d2:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 80011d6:	e7f7      	b.n	80011c8 <LL_RCC_GetUSARTClockFreq+0x2c>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80011d8:	f7ff ffc2 	bl	8001160 <RCC_GetSystemClockFreq>
 80011dc:	f7ff ff7a 	bl	80010d4 <RCC_GetHCLKClockFreq>
}
 80011e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80011e4:	f7ff bf82 	b.w	80010ec <RCC_GetPCLK1ClockFreq>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80011e8:	2000      	movs	r0, #0
 80011ea:	e7ed      	b.n	80011c8 <LL_RCC_GetUSARTClockFreq+0x2c>
 80011ec:	40021000 	.word	0x40021000
 80011f0:	007a1200 	.word	0x007a1200

080011f4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80011f4:	b530      	push	{r4, r5, lr}
 80011f6:	4604      	mov	r4, r0
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80011f8:	6800      	ldr	r0, [r0, #0]
 80011fa:	f010 0001 	ands.w	r0, r0, #1
 80011fe:	b085      	sub	sp, #20
 8001200:	460d      	mov	r5, r1
 8001202:	d002      	beq.n	800120a <LL_USART_Init+0x16>
  ErrorStatus status = ERROR;
 8001204:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8001206:	b005      	add	sp, #20
 8001208:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 800120a:	68ea      	ldr	r2, [r5, #12]
 800120c:	686b      	ldr	r3, [r5, #4]
 800120e:	6821      	ldr	r1, [r4, #0]
 8001210:	4313      	orrs	r3, r2
 8001212:	692a      	ldr	r2, [r5, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	69aa      	ldr	r2, [r5, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	4a1f      	ldr	r2, [pc, #124]	; (8001298 <LL_USART_Init+0xa4>)
 800121c:	400a      	ands	r2, r1
 800121e:	4313      	orrs	r3, r2
 8001220:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001222:	6863      	ldr	r3, [r4, #4]
 8001224:	68aa      	ldr	r2, [r5, #8]
 8001226:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800122a:	4313      	orrs	r3, r2
 800122c:	6063      	str	r3, [r4, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800122e:	68a3      	ldr	r3, [r4, #8]
 8001230:	696a      	ldr	r2, [r5, #20]
 8001232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001236:	4313      	orrs	r3, r2
 8001238:	60a3      	str	r3, [r4, #8]
    if (USARTx == USART1)
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <LL_USART_Init+0xa8>)
 800123c:	429c      	cmp	r4, r3
 800123e:	d119      	bne.n	8001274 <LL_USART_Init+0x80>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001240:	f7ff ffac 	bl	800119c <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001244:	2800      	cmp	r0, #0
 8001246:	d0dd      	beq.n	8001204 <LL_USART_Init+0x10>
        && (USART_InitStruct->BaudRate != 0U))
 8001248:	682a      	ldr	r2, [r5, #0]
 800124a:	2a00      	cmp	r2, #0
 800124c:	d0da      	beq.n	8001204 <LL_USART_Init+0x10>
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800124e:	69a9      	ldr	r1, [r5, #24]
 8001250:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001254:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8001258:	d118      	bne.n	800128c <LL_USART_Init+0x98>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800125a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800125e:	fbb3 f3f2 	udiv	r3, r3, r2
    brrtemp = usartdiv & 0xFFF0U;
 8001262:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001266:	401a      	ands	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001268:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800126c:	4313      	orrs	r3, r2
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800126e:	60e3      	str	r3, [r4, #12]
      status = SUCCESS;
 8001270:	2000      	movs	r0, #0
 8001272:	e7c8      	b.n	8001206 <LL_USART_Init+0x12>
    else if (USARTx == USART2)
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <LL_USART_Init+0xac>)
 8001276:	429c      	cmp	r4, r3
 8001278:	d104      	bne.n	8001284 <LL_USART_Init+0x90>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800127a:	4668      	mov	r0, sp
 800127c:	f7ff ff7e 	bl	800117c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001280:	9802      	ldr	r0, [sp, #8]
 8001282:	e7df      	b.n	8001244 <LL_USART_Init+0x50>
    else if (USARTx == USART3)
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <LL_USART_Init+0xb0>)
 8001286:	429c      	cmp	r4, r3
 8001288:	d1bc      	bne.n	8001204 <LL_USART_Init+0x10>
 800128a:	e7f6      	b.n	800127a <LL_USART_Init+0x86>
 800128c:	4403      	add	r3, r0
 800128e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001292:	b29b      	uxth	r3, r3
 8001294:	e7eb      	b.n	800126e <LL_USART_Init+0x7a>
 8001296:	bf00      	nop
 8001298:	efff69f3 	.word	0xefff69f3
 800129c:	40013800 	.word	0x40013800
 80012a0:	40004400 	.word	0x40004400
 80012a4:	40004800 	.word	0x40004800

080012a8 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80012a8:	4b01      	ldr	r3, [pc, #4]	; (80012b0 <LL_SetSystemCoreClock+0x8>)
 80012aa:	6018      	str	r0, [r3, #0]
}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000000 	.word	0x20000000

080012b4 <CpuIrqDisable>:
** \return    none.
**
****************************************************************************************/
void CpuIrqDisable(void)
{
  __asm volatile ("cpsid i");
 80012b4:	b672      	cpsid	i
} /*** end of CpuIrqDisable ***/
 80012b6:	4770      	bx	lr

080012b8 <CpuIrqEnable>:
** \return    none.
**
****************************************************************************************/
void CpuIrqEnable(void)
{
  __asm volatile ("cpsie i");
 80012b8:	b662      	cpsie	i
} /*** end of CpuIrqEnable ***/
 80012ba:	4770      	bx	lr

080012bc <CanInit>:
** \brief     Initializes the CAN controller and synchronizes it to the CAN bus.
** \return    none.
**
****************************************************************************************/
void CanInit(void)
{
 80012bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012be:	b08b      	sub	sp, #44	; 0x2c
  LL_RCC_GetSystemClocksFreq(&rccClocks);
 80012c0:	4668      	mov	r0, sp
 80012c2:	f7ff ff5b 	bl	800117c <LL_RCC_GetSystemClocksFreq>
    if ((canClockFreqkHz % (baud*(canTiming[cnt].tseg1+canTiming[cnt].tseg2+1))) == 0)
 80012c6:	4d2a      	ldr	r5, [pc, #168]	; (8001370 <CanInit+0xb4>)
  canClockFreqkHz = rccClocks.PCLK1_Frequency / 1000u;
 80012c8:	9c02      	ldr	r4, [sp, #8]
 80012ca:	2100      	movs	r1, #0
  blt_int16u prescaler = 0;
 80012cc:	460e      	mov	r6, r1
    if ((canClockFreqkHz % (baud*(canTiming[cnt].tseg1+canTiming[cnt].tseg2+1))) == 0)
 80012ce:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
  canClockFreqkHz = rccClocks.PCLK1_Frequency / 1000u;
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	fbb4 f4f3 	udiv	r4, r4, r3
    if ((canClockFreqkHz % (baud*(canTiming[cnt].tseg1+canTiming[cnt].tseg2+1))) == 0)
 80012da:	186b      	adds	r3, r5, r1
 80012dc:	5d4a      	ldrb	r2, [r1, r5]
 80012de:	785b      	ldrb	r3, [r3, #1]
 80012e0:	18d0      	adds	r0, r2, r3
 80012e2:	fb00 7007 	mla	r0, r0, r7, r7
 80012e6:	fbb4 fcf0 	udiv	ip, r4, r0
 80012ea:	fb00 401c 	mls	r0, r0, ip, r4
 80012ee:	b928      	cbnz	r0, 80012fc <CanInit+0x40>
      *prescaler = canClockFreqkHz/(baud*(canTiming[cnt].tseg1+canTiming[cnt].tseg2+1));
 80012f0:	fa1f f68c 	uxth.w	r6, ip
      if ((*prescaler > 0) && (*prescaler <= 1024))
 80012f4:	1e70      	subs	r0, r6, #1
 80012f6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80012fa:	d308      	bcc.n	800130e <CanInit+0x52>
 80012fc:	3102      	adds	r1, #2
  for (cnt=0; cnt < sizeof(canTiming)/sizeof(canTiming[0]); cnt++)
 80012fe:	2924      	cmp	r1, #36	; 0x24
 8001300:	d1eb      	bne.n	80012da <CanInit+0x1e>
     * clock configuration. Verify the following settings in blt_conf.h:
     *   - BOOT_COM_CAN_BAUDRATE
     *   - BOOT_CPU_XTAL_SPEED_KHZ
     *   - BOOT_CPU_SYSTEM_SPEED_KHZ
     */
    ASSERT_RT(BLT_FALSE);
 8001302:	21af      	movs	r1, #175	; 0xaf
 8001304:	481b      	ldr	r0, [pc, #108]	; (8001374 <CanInit+0xb8>)
 8001306:	f000 fa65 	bl	80017d4 <AssertFailure>
  blt_int8u  tseg1 = 0, tseg2 = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	461a      	mov	r2, r3
  }

  /* set the CAN controller configuration. */
  canHandle.Instance = CAN_CHANNEL;
 800130e:	4c1a      	ldr	r4, [pc, #104]	; (8001378 <CanInit+0xbc>)
 8001310:	491a      	ldr	r1, [pc, #104]	; (800137c <CanInit+0xc0>)
 8001312:	6021      	str	r1, [r4, #0]
  canHandle.Init.AutoRetransmission = ENABLE;
  canHandle.Init.ReceiveFifoLocked = DISABLE;
  canHandle.Init.TransmitFifoPriority = DISABLE;
  canHandle.Init.Mode = CAN_MODE_NORMAL;
  canHandle.Init.SyncJumpWidth = CAN_SJW_1TQ;
  canHandle.Init.TimeSeg1 = ((blt_int32u)tseg1 - 1) << CAN_BTR_TS1_Pos;
 8001314:	3a01      	subs	r2, #1
  canHandle.Init.TimeSeg2 = ((blt_int32u)tseg2 - 1) << CAN_BTR_TS2_Pos;
 8001316:	3b01      	subs	r3, #1
  canHandle.Init.TimeTriggeredMode = DISABLE;
 8001318:	2500      	movs	r5, #0
  canHandle.Init.AutoRetransmission = ENABLE;
 800131a:	2701      	movs	r7, #1
  canHandle.Init.TimeSeg1 = ((blt_int32u)tseg1 - 1) << CAN_BTR_TS1_Pos;
 800131c:	0412      	lsls	r2, r2, #16
  canHandle.Init.TimeSeg2 = ((blt_int32u)tseg2 - 1) << CAN_BTR_TS2_Pos;
 800131e:	051b      	lsls	r3, r3, #20
  canHandle.Init.Prescaler = prescaler;
  /* initialize the CAN controller. this only fails if the CAN controller hardware is
   * faulty. no need to evaluate the return value as there is nothing we can do about
   * a faulty CAN controller.
   */
  (void)HAL_CAN_Init(&canHandle);
 8001320:	4620      	mov	r0, r4
  canHandle.Init.TimeSeg1 = ((blt_int32u)tseg1 - 1) << CAN_BTR_TS1_Pos;
 8001322:	6122      	str	r2, [r4, #16]
  canHandle.Init.TimeSeg2 = ((blt_int32u)tseg2 - 1) << CAN_BTR_TS2_Pos;
 8001324:	6163      	str	r3, [r4, #20]
  canHandle.Init.TimeTriggeredMode = DISABLE;
 8001326:	7625      	strb	r5, [r4, #24]
  canHandle.Init.AutoBusOff = DISABLE;
 8001328:	7665      	strb	r5, [r4, #25]
  canHandle.Init.AutoWakeUp = DISABLE;
 800132a:	76a5      	strb	r5, [r4, #26]
  canHandle.Init.AutoRetransmission = ENABLE;
 800132c:	76e7      	strb	r7, [r4, #27]
  canHandle.Init.ReceiveFifoLocked = DISABLE;
 800132e:	7725      	strb	r5, [r4, #28]
  canHandle.Init.TransmitFifoPriority = DISABLE;
 8001330:	7765      	strb	r5, [r4, #29]
  canHandle.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001332:	e9c4 5502 	strd	r5, r5, [r4, #8]
  canHandle.Init.Prescaler = prescaler;
 8001336:	6066      	str	r6, [r4, #4]
  (void)HAL_CAN_Init(&canHandle);
 8001338:	f7ff f972 	bl	8000620 <HAL_CAN_Init>
   */
  /* filter 0 is the first filter assigned to the bxCAN master (CAN1) */
  filterConfig.FilterBank = 0;
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
  filterConfig.FilterIdHigh = (rxFilterId >> 16) & 0x0000FFFFu;
 800133c:	f64c 43e0 	movw	r3, #52448	; 0xcce0
  filterConfig.FilterIdLow = rxFilterId & 0x0000FFFFu;
  filterConfig.FilterMaskIdHigh = (rxFilterMask >> 16) & 0x0000FFFFu;
  filterConfig.FilterMaskIdLow = rxFilterMask & 0x0000FFFFu;
 8001340:	f64f 72e0 	movw	r2, #65504	; 0xffe0
  filterConfig.FilterIdLow = rxFilterId & 0x0000FFFFu;
 8001344:	e9cd 3500 	strd	r3, r5, [sp]
  filterConfig.FilterMaskIdLow = rxFilterMask & 0x0000FFFFu;
 8001348:	2304      	movs	r3, #4
 800134a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  filterConfig.FilterActivation = ENABLE;
  /* select the start slave bank number (for CAN1). this configuration assigns filter
   * banks 0..13 to CAN1 and 14..27 to CAN2.
   */
  filterConfig.SlaveStartFilterBank = 14;
  (void)HAL_CAN_ConfigFilter(&canHandle, &filterConfig);
 800134e:	4669      	mov	r1, sp
  filterConfig.SlaveStartFilterBank = 14;
 8001350:	230e      	movs	r3, #14
  (void)HAL_CAN_ConfigFilter(&canHandle, &filterConfig);
 8001352:	4620      	mov	r0, r4
  filterConfig.SlaveStartFilterBank = 14;
 8001354:	9309      	str	r3, [sp, #36]	; 0x24
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001356:	e9cd 5505 	strd	r5, r5, [sp, #20]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800135a:	9707      	str	r7, [sp, #28]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800135c:	9504      	str	r5, [sp, #16]
  filterConfig.FilterActivation = ENABLE;
 800135e:	9708      	str	r7, [sp, #32]
  (void)HAL_CAN_ConfigFilter(&canHandle, &filterConfig);
 8001360:	f7ff f9d9 	bl	8000716 <HAL_CAN_ConfigFilter>
  /* start the CAN peripheral. no need to evaluate the return value as there is nothing
   * we can do about a faulty CAN controller. */
  (void)HAL_CAN_Start(&canHandle);
 8001364:	4620      	mov	r0, r4
 8001366:	f7ff fa42 	bl	80007ee <HAL_CAN_Start>
} /*** end of CanInit ***/
 800136a:	b00b      	add	sp, #44	; 0x2c
 800136c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800136e:	bf00      	nop
 8001370:	08001c47 	.word	0x08001c47
 8001374:	08001c04 	.word	0x08001c04
 8001378:	20000034 	.word	0x20000034
 800137c:	40006400 	.word	0x40006400

08001380 <CanTransmitPacket>:
** \param     len  Number of bytes that are to be transmitted.
** \return    none.
**
****************************************************************************************/
void CanTransmitPacket(blt_int8u *data, blt_int8u len)
{
 8001380:	b530      	push	{r4, r5, lr}
 8001382:	b089      	sub	sp, #36	; 0x24

  /* configure the message that should be transmitted. */
  if ((txMsgId & 0x80000000) == 0)
  {
    /* set the 11-bit CAN identifier. */
    txMsgHeader.StdId = txMsgId;
 8001384:	f240 73e1 	movw	r3, #2017	; 0x7e1
 8001388:	9302      	str	r3, [sp, #8]
    txMsgHeader.IDE = CAN_ID_STD;
 800138a:	2300      	movs	r3, #0
    txMsgId &= ~0x80000000;
    /* set the 29-bit CAN identifier. */
    txMsgHeader.ExtId = txMsgId;
    txMsgHeader.IDE = CAN_ID_EXT;
  }
  txMsgHeader.RTR = CAN_RTR_DATA;
 800138c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  txMsgHeader.DLC = len;
 8001390:	9106      	str	r1, [sp, #24]

  /* submit the message for transmission. */
  txStatus = HAL_CAN_AddTxMessage(&canHandle, &txMsgHeader, data,
 8001392:	4602      	mov	r2, r0
 8001394:	ab01      	add	r3, sp, #4
 8001396:	a902      	add	r1, sp, #8
 8001398:	480a      	ldr	r0, [pc, #40]	; (80013c4 <CanTransmitPacket+0x44>)
 800139a:	f7ff fa53 	bl	8000844 <HAL_CAN_AddTxMessage>
                                  (uint32_t *)&txMsgMailbox);
  if (txStatus == HAL_OK)
 800139e:	b978      	cbnz	r0, 80013c0 <CanTransmitPacket+0x40>
  {
    /* determine timeout time for the transmit completion. */
    timeout = TimerGet() + CAN_MSG_TX_TIMEOUT_MS;
 80013a0:	f000 fa08 	bl	80017b4 <TimerGet>
    /* poll for completion of the transmit operation. */
    while (HAL_CAN_IsTxMessagePending(&canHandle, txMsgMailbox) != 0)
 80013a4:	4c07      	ldr	r4, [pc, #28]	; (80013c4 <CanTransmitPacket+0x44>)
    timeout = TimerGet() + CAN_MSG_TX_TIMEOUT_MS;
 80013a6:	f100 0532 	add.w	r5, r0, #50	; 0x32
    while (HAL_CAN_IsTxMessagePending(&canHandle, txMsgMailbox) != 0)
 80013aa:	9901      	ldr	r1, [sp, #4]
 80013ac:	4620      	mov	r0, r4
 80013ae:	f7ff fa96 	bl	80008de <HAL_CAN_IsTxMessagePending>
 80013b2:	b128      	cbz	r0, 80013c0 <CanTransmitPacket+0x40>
    {
      /* service the watchdog. */
      CopService();
 80013b4:	f000 fab3 	bl	800191e <CopService>
      /* break loop upon timeout. this would indicate a hardware failure or no other
       * nodes connected to the bus.
       */
      if (TimerGet() > timeout)
 80013b8:	f000 f9fc 	bl	80017b4 <TimerGet>
 80013bc:	42a8      	cmp	r0, r5
 80013be:	d9f4      	bls.n	80013aa <CanTransmitPacket+0x2a>
      {
        break;
      }
    }
  }
} /*** end of CanTransmitPacket ***/
 80013c0:	b009      	add	sp, #36	; 0x24
 80013c2:	bd30      	pop	{r4, r5, pc}
 80013c4:	20000034 	.word	0x20000034

080013c8 <CanReceivePacket>:
** \param     len Pointer where the length of the packet is to be stored.
** \return    BLT_TRUE is a packet was received, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool CanReceivePacket(blt_int8u *data, blt_int8u *len)
{
 80013c8:	b510      	push	{r4, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	460c      	mov	r4, r1
  blt_int32u rxMsgId = BOOT_COM_CAN_RX_MSG_ID;
  blt_bool result = BLT_FALSE;
  CAN_RxHeaderTypeDef rxMsgHeader;

  if (HAL_CAN_GetRxMessage(&canHandle, CAN_RX_FIFO0, &rxMsgHeader, data) == HAL_OK)
 80013ce:	4603      	mov	r3, r0
 80013d0:	aa01      	add	r2, sp, #4
 80013d2:	2100      	movs	r1, #0
 80013d4:	4808      	ldr	r0, [pc, #32]	; (80013f8 <CanReceivePacket+0x30>)
 80013d6:	f7ff fa92 	bl	80008fe <HAL_CAN_GetRxMessage>
 80013da:	b958      	cbnz	r0, 80013f4 <CanReceivePacket+0x2c>
  {
    /* check if this message has the configured CAN packet identifier. */
    if ((rxMsgId & 0x80000000) == 0)
    {
      /* was an 11-bit CAN message received that matches? */
      if ( (rxMsgHeader.StdId == rxMsgId) &&
 80013dc:	9a01      	ldr	r2, [sp, #4]
 80013de:	f240 6367 	movw	r3, #1639	; 0x667
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d104      	bne.n	80013f0 <CanReceivePacket+0x28>
 80013e6:	9b03      	ldr	r3, [sp, #12]
 80013e8:	b913      	cbnz	r3, 80013f0 <CanReceivePacket+0x28>
    }
  }
  /* store the data length. */
  if (result == BLT_TRUE)
  {
    *len = rxMsgHeader.DLC;
 80013ea:	9b05      	ldr	r3, [sp, #20]
 80013ec:	7023      	strb	r3, [r4, #0]
        result = BLT_TRUE;
 80013ee:	2001      	movs	r0, #1
  }
  /* Give the result back to the caller. */
  return result;
} /*** end of CanReceivePacket ***/
 80013f0:	b008      	add	sp, #32
 80013f2:	bd10      	pop	{r4, pc}
  blt_bool result = BLT_FALSE;
 80013f4:	2000      	movs	r0, #0
 80013f6:	e7fb      	b.n	80013f0 <CanReceivePacket+0x28>
 80013f8:	20000034 	.word	0x20000034

080013fc <CpuInit>:
  /* bootloader runs in polling mode so disable the global interrupts. this is done for
   * safety reasons. if the bootloader was started from a running user program, it could 
   * be that the user program did not properly disable the interrupt generation of 
   * peripherals.
   */
  CpuIrqDisable();
 80013fc:	f7ff bf5a 	b.w	80012b4 <CpuIrqDisable>

08001400 <CpuStartUserProgram>:
**            does not return.
** \return    none.
**
****************************************************************************************/
void CpuStartUserProgram(void)
{
 8001400:	b510      	push	{r4, lr}
  void (*pProgResetHandler)(void);

  /* check if a user program is present by verifying the checksum */
  if (NvmVerifyChecksum() == BLT_FALSE)
 8001402:	f000 f9a1 	bl	8001748 <NvmVerifyChecksum>
 8001406:	b1c8      	cbz	r0, 800143c <CpuStartUserProgram+0x3c>
    /* not a valid user program so it cannot be started */
    return;
  }
#if (BOOT_CPU_USER_PROGRAM_START_HOOK > 0)
  /* invoke callback */
  if (CpuUserProgramStartHook() == BLT_FALSE)
 8001408:	f7fe fee2 	bl	80001d0 <CpuUserProgramStartHook>
 800140c:	b1b0      	cbz	r0, 800143c <CpuStartUserProgram+0x3c>
    return;
  }
#endif
#if (BOOT_COM_ENABLE > 0)
  /* release the communication interface */
  ComFree();
 800140e:	f000 fa5d 	bl	80018cc <ComFree>
#endif
  /* reset the HAL */
  HAL_DeInit();
 8001412:	f7ff f8b1 	bl	8000578 <HAL_DeInit>
  /* reset the timer */
  TimerReset();
 8001416:	f000 f9a5 	bl	8001764 <TimerReset>
  /* remap user program's vector table */
  SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x1FFFFF80;
 800141a:	f000 f997 	bl	800174c <NvmGetUserProgBaseAddress>
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <CpuStartUserProgram+0x40>)
 8001420:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8001424:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 8001428:	6098      	str	r0, [r3, #8]
  /* set the address where the bootloader needs to jump to. this is the address of
   * the 2nd entry in the user program's vector table. this address points to the
   * user program's reset handler.
   */
  pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 800142a:	f000 f98f 	bl	800174c <NvmGetUserProgBaseAddress>
 800142e:	6844      	ldr	r4, [r0, #4]
  /* The Cortex-M4 core has interrupts enabled out of reset. the bootloader
   * explicitly disables these for security reasons. Enable them here again, so it does 
   * not have to be done by the user program.
   */
  CpuIrqEnable();
 8001430:	f7ff ff42 	bl	80012b8 <CpuIrqEnable>
  /* start the user program by activating its reset interrupt service routine */
  pProgResetHandler();
 8001434:	4623      	mov	r3, r4
   * for whatever reason, make sure all communication interfaces are initialized so that
   * firmware updates can be started.
   */
  ComDeferredInit();
#endif
} /*** end of CpuStartUserProgram ***/
 8001436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pProgResetHandler();
 800143a:	4718      	bx	r3
} /*** end of CpuStartUserProgram ***/
 800143c:	bd10      	pop	{r4, pc}
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <CpuMemCopy>:
** \param     len  length of the data in bytes.
** \return    none.
**
****************************************************************************************/
void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
{
 8001444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001446:	4614      	mov	r4, r2
 8001448:	1a46      	subs	r6, r0, r1
  /* set casted pointers */
  from = (blt_int8u *)src;
  to = (blt_int8u *)dest;

  /* copy all bytes from source address to destination address */
  while (len-- > 0)
 800144a:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800144e:	3c01      	subs	r4, #1
 8001450:	b2a4      	uxth	r4, r4
 8001452:	42ac      	cmp	r4, r5
 8001454:	d100      	bne.n	8001458 <CpuMemCopy+0x14>
    /* store byte value from source to destination */
    *to++ = *from++;
    /* keep the watchdog happy */
    CopService();
  }
} /*** end of CpuMemCopy ***/
 8001456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *to++ = *from++;
 8001458:	780b      	ldrb	r3, [r1, #0]
 800145a:	558b      	strb	r3, [r1, r6]
 800145c:	1c4f      	adds	r7, r1, #1
    CopService();
 800145e:	f000 fa5e 	bl	800191e <CopService>
    *to++ = *from++;
 8001462:	4639      	mov	r1, r7
 8001464:	e7f3      	b.n	800144e <CpuMemCopy+0xa>

08001466 <FlashWriteBlock>:
** \param     block   Pointer to flash block info structure to operate on.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashWriteBlock(tFlashBlockInfo *block)
{
 8001466:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800146a:	4605      	mov	r5, r0
    }
  }
#endif

  /* unlock the flash peripheral to enable the flash control register access. */
  HAL_FLASH_Unlock();
 800146c:	f7ff fb36 	bl	8000adc <HAL_FLASH_Unlock>
 8001470:	2400      	movs	r4, #0
 8001472:	f105 0804 	add.w	r8, r5, #4

  /* program all words in the block one by one */
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
  {
    prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 8001476:	682f      	ldr	r7, [r5, #0]
    prog_data = *(volatile blt_int32u *)(&block->data[word_cnt * sizeof(blt_int32u)]);
 8001478:	f858 6004 	ldr.w	r6, [r8, r4]
    prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 800147c:	eb04 0907 	add.w	r9, r4, r7
    /* keep the watchdog happy */
    CopService();
 8001480:	f000 fa4d 	bl	800191e <CopService>
    /* program the word */
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, prog_addr, prog_data) != HAL_OK)
 8001484:	4632      	mov	r2, r6
 8001486:	2300      	movs	r3, #0
 8001488:	4649      	mov	r1, r9
 800148a:	2002      	movs	r0, #2
 800148c:	f7ff fb6a 	bl	8000b64 <HAL_FLASH_Program>
 8001490:	b960      	cbnz	r0, 80014ac <FlashWriteBlock+0x46>
    {
      result = BLT_FALSE;
      break;
    }
    /* verify that the written data is actually there */
    if (*(volatile blt_int32u *)prog_addr != prog_data)
 8001492:	59e3      	ldr	r3, [r4, r7]
 8001494:	42b3      	cmp	r3, r6
 8001496:	d10b      	bne.n	80014b0 <FlashWriteBlock+0x4a>
 8001498:	3404      	adds	r4, #4
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 800149a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800149e:	d1ea      	bne.n	8001476 <FlashWriteBlock+0x10>
  blt_bool   result = BLT_TRUE;
 80014a0:	2401      	movs	r4, #1
      break;
    }
  }

  /* lock the flash peripheral to disable the flash control register access. */
  HAL_FLASH_Lock();
 80014a2:	f7ff fb2d 	bl	8000b00 <HAL_FLASH_Lock>

  /* Give the result back to the caller. */
  return result;
} /*** end of FlashWriteBlock ***/
 80014a6:	4620      	mov	r0, r4
 80014a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      result = BLT_FALSE;
 80014ac:	2400      	movs	r4, #0
 80014ae:	e7f8      	b.n	80014a2 <FlashWriteBlock+0x3c>
 80014b0:	4604      	mov	r4, r0
 80014b2:	e7f6      	b.n	80014a2 <FlashWriteBlock+0x3c>

080014b4 <FlashSwitchBlock>:
{
 80014b4:	b538      	push	{r3, r4, r5, lr}
  if (block == &bootBlockInfo)
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <FlashSwitchBlock+0x3c>)
 80014b8:	4298      	cmp	r0, r3
{
 80014ba:	4604      	mov	r4, r0
 80014bc:	460d      	mov	r5, r1
  if (block == &bootBlockInfo)
 80014be:	d007      	beq.n	80014d0 <FlashSwitchBlock+0x1c>
  else if (base_addr == flashLayout[0].sector_start)
 80014c0:	4a0c      	ldr	r2, [pc, #48]	; (80014f4 <FlashSwitchBlock+0x40>)
 80014c2:	4291      	cmp	r1, r2
 80014c4:	d012      	beq.n	80014ec <FlashSwitchBlock+0x38>
    if (FlashWriteBlock(block) == BLT_FALSE)
 80014c6:	f7ff ffce 	bl	8001466 <FlashWriteBlock>
 80014ca:	b910      	cbnz	r0, 80014d2 <FlashSwitchBlock+0x1e>
      return BLT_NULL;
 80014cc:	4604      	mov	r4, r0
 80014ce:	e00b      	b.n	80014e8 <FlashSwitchBlock+0x34>
    block = &blockInfo;
 80014d0:	4c09      	ldr	r4, [pc, #36]	; (80014f8 <FlashSwitchBlock+0x44>)
  if (block->base_addr == address)
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	429d      	cmp	r5, r3
 80014d6:	d007      	beq.n	80014e8 <FlashSwitchBlock+0x34>
  block->base_addr = address;
 80014d8:	4620      	mov	r0, r4
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 80014da:	f44f 7200 	mov.w	r2, #512	; 0x200
  block->base_addr = address;
 80014de:	f840 5b04 	str.w	r5, [r0], #4
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 80014e2:	4629      	mov	r1, r5
 80014e4:	f7ff ffae 	bl	8001444 <CpuMemCopy>
} /*** end of FlashSwitchBlock ***/
 80014e8:	4620      	mov	r0, r4
 80014ea:	bd38      	pop	{r3, r4, r5, pc}
    block = &bootBlockInfo;
 80014ec:	461c      	mov	r4, r3
 80014ee:	e7f0      	b.n	80014d2 <FlashSwitchBlock+0x1e>
 80014f0:	20000260 	.word	0x20000260
 80014f4:	08002000 	.word	0x08002000
 80014f8:	2000005c 	.word	0x2000005c

080014fc <FlashAddToBlock>:
{
 80014fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001500:	4698      	mov	r8, r3
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 8001502:	6803      	ldr	r3, [r0, #0]
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8001504:	f421 76ff 	bic.w	r6, r1, #510	; 0x1fe
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 8001508:	3301      	adds	r3, #1
{
 800150a:	4604      	mov	r4, r0
 800150c:	460d      	mov	r5, r1
 800150e:	4617      	mov	r7, r2
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8001510:	f026 0601 	bic.w	r6, r6, #1
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 8001514:	d106      	bne.n	8001524 <FlashAddToBlock+0x28>
  block->base_addr = address;
 8001516:	f840 6b04 	str.w	r6, [r0], #4
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 800151a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800151e:	4631      	mov	r1, r6
 8001520:	f7ff ff90 	bl	8001444 <CpuMemCopy>
  if (block->base_addr != current_base_addr)
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	42b3      	cmp	r3, r6
 8001528:	d005      	beq.n	8001536 <FlashAddToBlock+0x3a>
    block = FlashSwitchBlock(block, current_base_addr);
 800152a:	4620      	mov	r0, r4
 800152c:	4631      	mov	r1, r6
 800152e:	f7ff ffc1 	bl	80014b4 <FlashSwitchBlock>
    if (block == BLT_NULL)
 8001532:	4604      	mov	r4, r0
 8001534:	b1e8      	cbz	r0, 8001572 <FlashAddToBlock+0x76>
  dst = &(block->data[address - block->base_addr]);
 8001536:	6823      	ldr	r3, [r4, #0]
 8001538:	3504      	adds	r5, #4
 800153a:	1aed      	subs	r5, r5, r3
 800153c:	4425      	add	r5, r4
      block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 800153e:	f506 7600 	add.w	r6, r6, #512	; 0x200
  while (len > 0);
 8001542:	44b8      	add	r8, r7
    CopService();
 8001544:	f000 f9eb 	bl	800191e <CopService>
    if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 8001548:	1d23      	adds	r3, r4, #4
 800154a:	1aeb      	subs	r3, r5, r3
 800154c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001550:	d306      	bcc.n	8001560 <FlashAddToBlock+0x64>
      block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 8001552:	4620      	mov	r0, r4
 8001554:	4631      	mov	r1, r6
 8001556:	f7ff ffad 	bl	80014b4 <FlashSwitchBlock>
      if (block == BLT_NULL)
 800155a:	4604      	mov	r4, r0
 800155c:	b148      	cbz	r0, 8001572 <FlashAddToBlock+0x76>
      dst = &(block->data[0]);
 800155e:	1d05      	adds	r5, r0, #4
    *dst = *src;
 8001560:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001564:	f805 3b01 	strb.w	r3, [r5], #1
  while (len > 0);
 8001568:	4547      	cmp	r7, r8
 800156a:	d1eb      	bne.n	8001544 <FlashAddToBlock+0x48>
  return BLT_TRUE;
 800156c:	2001      	movs	r0, #1
} /*** end of FlashAddToBlock ***/
 800156e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return BLT_FALSE;
 8001572:	2000      	movs	r0, #0
 8001574:	e7fb      	b.n	800156e <FlashAddToBlock+0x72>
	...

08001578 <FlashInit>:
  blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8001578:	4a03      	ldr	r2, [pc, #12]	; (8001588 <FlashInit+0x10>)
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	6013      	str	r3, [r2, #0]
  bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8001580:	4a02      	ldr	r2, [pc, #8]	; (800158c <FlashInit+0x14>)
 8001582:	6013      	str	r3, [r2, #0]
} /*** end of FlashInit ***/
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	2000005c 	.word	0x2000005c
 800158c:	20000260 	.word	0x20000260

08001590 <FlashWrite>:
{
 8001590:	b430      	push	{r4, r5}
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8001592:	4c0e      	ldr	r4, [pc, #56]	; (80015cc <FlashWrite+0x3c>)
 8001594:	1e4d      	subs	r5, r1, #1
{
 8001596:	460b      	mov	r3, r1
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8001598:	1a21      	subs	r1, r4, r0
 800159a:	428d      	cmp	r5, r1
 800159c:	d813      	bhi.n	80015c6 <FlashWrite+0x36>
  if ((addr < FLASH_START_ADDRESS) || ((addr+len-1) > FLASH_END_ADDRESS))
 800159e:	490c      	ldr	r1, [pc, #48]	; (80015d0 <FlashWrite+0x40>)
 80015a0:	4288      	cmp	r0, r1
 80015a2:	d910      	bls.n	80015c6 <FlashWrite+0x36>
 80015a4:	1e41      	subs	r1, r0, #1
 80015a6:	4419      	add	r1, r3
 80015a8:	42a1      	cmp	r1, r4
 80015aa:	d80c      	bhi.n	80015c6 <FlashWrite+0x36>
  base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 80015ac:	f420 71ff 	bic.w	r1, r0, #510	; 0x1fe
  if (base_addr == flashLayout[0].sector_start)
 80015b0:	4c08      	ldr	r4, [pc, #32]	; (80015d4 <FlashWrite+0x44>)
  base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 80015b2:	f021 0101 	bic.w	r1, r1, #1
  if (base_addr == flashLayout[0].sector_start)
 80015b6:	42a1      	cmp	r1, r4
    return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 80015b8:	4601      	mov	r1, r0
} /*** end of FlashWrite ***/
 80015ba:	bc30      	pop	{r4, r5}
    return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 80015bc:	bf0c      	ite	eq
 80015be:	4806      	ldreq	r0, [pc, #24]	; (80015d8 <FlashWrite+0x48>)
  return FlashAddToBlock(&blockInfo, addr, data, len);
 80015c0:	4806      	ldrne	r0, [pc, #24]	; (80015dc <FlashWrite+0x4c>)
 80015c2:	f7ff bf9b 	b.w	80014fc <FlashAddToBlock>
} /*** end of FlashWrite ***/
 80015c6:	2000      	movs	r0, #0
 80015c8:	bc30      	pop	{r4, r5}
 80015ca:	4770      	bx	lr
 80015cc:	0800ffff 	.word	0x0800ffff
 80015d0:	08001fff 	.word	0x08001fff
 80015d4:	08002000 	.word	0x08002000
 80015d8:	20000260 	.word	0x20000260
 80015dc:	2000005c 	.word	0x2000005c

080015e0 <FlashErase>:
{
 80015e0:	b530      	push	{r4, r5, lr}
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 80015e2:	4d1d      	ldr	r5, [pc, #116]	; (8001658 <FlashErase+0x78>)
{
 80015e4:	b085      	sub	sp, #20
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 80015e6:	1e4a      	subs	r2, r1, #1
 80015e8:	1a2b      	subs	r3, r5, r0
  blt_int32u pageError = 0;
 80015ea:	2400      	movs	r4, #0
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 80015ec:	429a      	cmp	r2, r3
  blt_int32u pageError = 0;
 80015ee:	9400      	str	r4, [sp, #0]
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 80015f0:	d820      	bhi.n	8001634 <FlashErase+0x54>
  erase_base_addr = (addr/FLASH_ERASE_SECTOR_SIZE)*FLASH_ERASE_SECTOR_SIZE;
 80015f2:	f420 63ff 	bic.w	r3, r0, #2040	; 0x7f8
  if ((erase_base_addr < FLASH_START_ADDRESS) || ((addr+len-1) > FLASH_END_ADDRESS))
 80015f6:	4a19      	ldr	r2, [pc, #100]	; (800165c <FlashErase+0x7c>)
  erase_base_addr = (addr/FLASH_ERASE_SECTOR_SIZE)*FLASH_ERASE_SECTOR_SIZE;
 80015f8:	f023 0307 	bic.w	r3, r3, #7
  if ((erase_base_addr < FLASH_START_ADDRESS) || ((addr+len-1) > FLASH_END_ADDRESS))
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d919      	bls.n	8001634 <FlashErase+0x54>
 8001600:	1e42      	subs	r2, r0, #1
 8001602:	440a      	add	r2, r1
 8001604:	42aa      	cmp	r2, r5
 8001606:	d815      	bhi.n	8001634 <FlashErase+0x54>
  total_erase_len = len + (addr - erase_base_addr);
 8001608:	4401      	add	r1, r0
 800160a:	1ac9      	subs	r1, r1, r3
  nr_of_erase_sectors = (blt_int16u)(total_erase_len / FLASH_ERASE_SECTOR_SIZE);
 800160c:	f3c1 25cf 	ubfx	r5, r1, #11, #16
  if ((total_erase_len % FLASH_ERASE_SECTOR_SIZE) > 0)
 8001610:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8001614:	b109      	cbz	r1, 800161a <FlashErase+0x3a>
    nr_of_erase_sectors++;
 8001616:	3501      	adds	r5, #1
 8001618:	b2ad      	uxth	r5, r5
  eraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800161a:	2400      	movs	r4, #0
  eraseInitStruct.PageAddress = erase_base_addr;
 800161c:	e9cd 4301 	strd	r4, r3, [sp, #4]
  eraseInitStruct.NbPages     = 1;
 8001620:	2301      	movs	r3, #1
 8001622:	9303      	str	r3, [sp, #12]
  HAL_FLASH_Unlock();
 8001624:	f7ff fa5a 	bl	8000adc <HAL_FLASH_Unlock>
  for (sector_idx = 0; sector_idx < nr_of_erase_sectors; sector_idx++)
 8001628:	b2a3      	uxth	r3, r4
 800162a:	42ab      	cmp	r3, r5
 800162c:	d305      	bcc.n	800163a <FlashErase+0x5a>
  blt_bool result = BLT_TRUE;
 800162e:	2401      	movs	r4, #1
  HAL_FLASH_Lock();
 8001630:	f7ff fa66 	bl	8000b00 <HAL_FLASH_Lock>
} /*** end of FlashErase ***/
 8001634:	4620      	mov	r0, r4
 8001636:	b005      	add	sp, #20
 8001638:	bd30      	pop	{r4, r5, pc}
    CopService();
 800163a:	f000 f970 	bl	800191e <CopService>
    if (HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&pageError) != HAL_OK)
 800163e:	4669      	mov	r1, sp
 8001640:	a801      	add	r0, sp, #4
 8001642:	f7ff fb03 	bl	8000c4c <HAL_FLASHEx_Erase>
 8001646:	3401      	adds	r4, #1
 8001648:	b920      	cbnz	r0, 8001654 <FlashErase+0x74>
    eraseInitStruct.PageAddress += FLASH_ERASE_SECTOR_SIZE;
 800164a:	9b02      	ldr	r3, [sp, #8]
 800164c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001650:	9302      	str	r3, [sp, #8]
 8001652:	e7e9      	b.n	8001628 <FlashErase+0x48>
      result = BLT_FALSE;
 8001654:	2400      	movs	r4, #0
 8001656:	e7eb      	b.n	8001630 <FlashErase+0x50>
 8001658:	0800ffff 	.word	0x0800ffff
 800165c:	08001fff 	.word	0x08001fff

08001660 <FlashWriteChecksum>:
{
 8001660:	b507      	push	{r0, r1, r2, lr}
  if (bootBlockInfo.base_addr == FLASH_INVALID_ADDRESS)
 8001662:	4a0f      	ldr	r2, [pc, #60]	; (80016a0 <FlashWriteChecksum+0x40>)
 8001664:	6813      	ldr	r3, [r2, #0]
 8001666:	3301      	adds	r3, #1
 8001668:	d017      	beq.n	800169a <FlashWriteChecksum+0x3a>
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 800166a:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
 800166e:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 8001670:	68d1      	ldr	r1, [r2, #12]
  return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 8001672:	480c      	ldr	r0, [pc, #48]	; (80016a4 <FlashWriteChecksum+0x44>)
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 8001674:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 8001676:	6911      	ldr	r1, [r2, #16]
 8001678:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 800167a:	6951      	ldr	r1, [r2, #20]
 800167c:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 800167e:	6991      	ldr	r1, [r2, #24]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 8001680:	69d2      	ldr	r2, [r2, #28]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 8001682:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 8001684:	4413      	add	r3, r2
  signature_checksum += 1; /* two's complement */
 8001686:	aa02      	add	r2, sp, #8
 8001688:	425b      	negs	r3, r3
 800168a:	f842 3d04 	str.w	r3, [r2, #-4]!
  return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 800168e:	2104      	movs	r1, #4
 8001690:	f7ff ff7e 	bl	8001590 <FlashWrite>
} /*** end of FlashWriteChecksum ***/
 8001694:	b003      	add	sp, #12
 8001696:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLT_TRUE;
 800169a:	2001      	movs	r0, #1
 800169c:	e7fa      	b.n	8001694 <FlashWriteChecksum+0x34>
 800169e:	bf00      	nop
 80016a0:	20000260 	.word	0x20000260
 80016a4:	08002188 	.word	0x08002188

080016a8 <FlashVerifyChecksum>:
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 80016a8:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <FlashVerifyChecksum+0x38>)
 80016aa:	4a0e      	ldr	r2, [pc, #56]	; (80016e4 <FlashVerifyChecksum+0x3c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 80016b2:	4a0d      	ldr	r2, [pc, #52]	; (80016e8 <FlashVerifyChecksum+0x40>)
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 80016b8:	4a0c      	ldr	r2, [pc, #48]	; (80016ec <FlashVerifyChecksum+0x44>)
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 80016be:	4a0c      	ldr	r2, [pc, #48]	; (80016f0 <FlashVerifyChecksum+0x48>)
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 80016c4:	4a0b      	ldr	r2, [pc, #44]	; (80016f4 <FlashVerifyChecksum+0x4c>)
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 80016ca:	4a0b      	ldr	r2, [pc, #44]	; (80016f8 <FlashVerifyChecksum+0x50>)
 80016cc:	6812      	ldr	r2, [r2, #0]
 80016ce:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET));
 80016d0:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <FlashVerifyChecksum+0x54>)
 80016d2:	6812      	ldr	r2, [r2, #0]
  if (signature_checksum == 0)
 80016d4:	42d3      	cmn	r3, r2
} /*** end of FlashVerifyChecksum ***/
 80016d6:	bf0c      	ite	eq
 80016d8:	2001      	moveq	r0, #1
 80016da:	2000      	movne	r0, #0
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	08002000 	.word	0x08002000
 80016e4:	08002004 	.word	0x08002004
 80016e8:	08002008 	.word	0x08002008
 80016ec:	0800200c 	.word	0x0800200c
 80016f0:	08002010 	.word	0x08002010
 80016f4:	08002014 	.word	0x08002014
 80016f8:	08002018 	.word	0x08002018
 80016fc:	08002188 	.word	0x08002188

08001700 <FlashDone>:
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8001700:	480a      	ldr	r0, [pc, #40]	; (800172c <FlashDone+0x2c>)
{
 8001702:	b508      	push	{r3, lr}
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8001704:	6803      	ldr	r3, [r0, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	d105      	bne.n	8001716 <FlashDone+0x16>
  if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 800170a:	4809      	ldr	r0, [pc, #36]	; (8001730 <FlashDone+0x30>)
 800170c:	6803      	ldr	r3, [r0, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	d106      	bne.n	8001720 <FlashDone+0x20>
  return BLT_TRUE;
 8001712:	2001      	movs	r0, #1
} /*** end of FlashDone ***/
 8001714:	bd08      	pop	{r3, pc}
    if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 8001716:	f7ff fea6 	bl	8001466 <FlashWriteBlock>
 800171a:	2800      	cmp	r0, #0
 800171c:	d1f5      	bne.n	800170a <FlashDone+0xa>
 800171e:	e7f9      	b.n	8001714 <FlashDone+0x14>
    if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 8001720:	f7ff fea1 	bl	8001466 <FlashWriteBlock>
      return BLT_FALSE;
 8001724:	3000      	adds	r0, #0
 8001726:	bf18      	it	ne
 8001728:	2001      	movne	r0, #1
 800172a:	e7f3      	b.n	8001714 <FlashDone+0x14>
 800172c:	20000260 	.word	0x20000260
 8001730:	2000005c 	.word	0x2000005c

08001734 <FlashGetUserProgBaseAddress>:
} /*** end of FlashGetUserProgBaseAddress ***/
 8001734:	4800      	ldr	r0, [pc, #0]	; (8001738 <FlashGetUserProgBaseAddress+0x4>)
 8001736:	4770      	bx	lr
 8001738:	08002000 	.word	0x08002000

0800173c <NvmInit>:
   */
  NvmInitHook();
#endif

  /* init the internal driver */
  FlashInit();
 800173c:	f7ff bf1c 	b.w	8001578 <FlashInit>

08001740 <NvmWrite>:
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the program operation */
  return FlashWrite(addr, len, data);
 8001740:	f7ff bf26 	b.w	8001590 <FlashWrite>

08001744 <NvmErase>:
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the erase operation */
  return FlashErase(addr, len);
 8001744:	f7ff bf4c 	b.w	80015e0 <FlashErase>

08001748 <NvmVerifyChecksum>:
#if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE > 0)
  /* check checksum using the application specific method. */
  return NvmVerifyChecksumHook();
#else
  /* check checksum using the interally supported method. */
  return FlashVerifyChecksum();
 8001748:	f7ff bfae 	b.w	80016a8 <FlashVerifyChecksum>

0800174c <NvmGetUserProgBaseAddress>:
** \return    Base address.
**
****************************************************************************************/
blt_addr NvmGetUserProgBaseAddress(void)
{
  return FlashGetUserProgBaseAddress();
 800174c:	f7ff bff2 	b.w	8001734 <FlashGetUserProgBaseAddress>

08001750 <NvmDone>:
**            to determine if a valid user program is present in flash.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmDone(void)
{
 8001750:	b508      	push	{r3, lr}
  {
    return BLT_FALSE;
  }
#else
  /* compute and write checksum, which is programmed by the internal driver. */
  if (FlashWriteChecksum() == BLT_FALSE)
 8001752:	f7ff ff85 	bl	8001660 <FlashWriteChecksum>
 8001756:	b118      	cbz	r0, 8001760 <NvmDone+0x10>
  }
#endif

  /* finish up internal driver operations */
  return FlashDone();
} /*** end of NvmDone ***/
 8001758:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return FlashDone();
 800175c:	f7ff bfd0 	b.w	8001700 <FlashDone>
} /*** end of NvmDone ***/
 8001760:	bd08      	pop	{r3, pc}
	...

08001764 <TimerReset>:
**
****************************************************************************************/
void TimerReset(void)
{
  /* Set the systick's registers back into the default reset value. */
  SysTick->CTRL = 0;
 8001764:	4b02      	ldr	r3, [pc, #8]	; (8001770 <TimerReset+0xc>)
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 800176a:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 800176c:	609a      	str	r2, [r3, #8]
} /* end of TimerReset */
 800176e:	4770      	bx	lr
 8001770:	e000e010 	.word	0xe000e010

08001774 <TimerInit>:
{
 8001774:	b508      	push	{r3, lr}
  TimerReset();
 8001776:	f7ff fff5 	bl	8001764 <TimerReset>
  SysTick->LOAD = BOOT_CPU_SYSTEM_SPEED_KHZ - 1;
 800177a:	4b05      	ldr	r3, [pc, #20]	; (8001790 <TimerInit+0x1c>)
 800177c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001780:	605a      	str	r2, [r3, #4]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 8001782:	2105      	movs	r1, #5
  SysTick->VAL = 0;
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 8001788:	6019      	str	r1, [r3, #0]
  millisecond_counter = 0;
 800178a:	4b02      	ldr	r3, [pc, #8]	; (8001794 <TimerInit+0x20>)
 800178c:	601a      	str	r2, [r3, #0]
} /*** end of TimerInit ***/
 800178e:	bd08      	pop	{r3, pc}
 8001790:	e000e010 	.word	0xe000e010
 8001794:	20000464 	.word	0x20000464

08001798 <TimerUpdate>:
**
****************************************************************************************/
void TimerUpdate(void)
{
  /* Check if the millisecond event occurred. */
  if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <TimerUpdate+0x14>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	03db      	lsls	r3, r3, #15
  {
    /* Increment the millisecond counter. */
    millisecond_counter++;
 800179e:	bf41      	itttt	mi
 80017a0:	4a03      	ldrmi	r2, [pc, #12]	; (80017b0 <TimerUpdate+0x18>)
 80017a2:	6813      	ldrmi	r3, [r2, #0]
 80017a4:	3301      	addmi	r3, #1
 80017a6:	6013      	strmi	r3, [r2, #0]
  }
} /*** end of TimerUpdate ***/
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000e010 	.word	0xe000e010
 80017b0:	20000464 	.word	0x20000464

080017b4 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
blt_int32u TimerGet(void)
{
 80017b4:	b508      	push	{r3, lr}
  /* Updating timer here allows this function to be called in a loop with timeout
   * detection.
   */
  TimerUpdate();
 80017b6:	f7ff ffef 	bl	8001798 <TimerUpdate>
  /* Read and return the amount of milliseconds that passed since initialization. */
  return millisecond_counter;
} /*** end of TimerGet ***/
 80017ba:	4b01      	ldr	r3, [pc, #4]	; (80017c0 <TimerGet+0xc>)
 80017bc:	6818      	ldr	r0, [r3, #0]
 80017be:	bd08      	pop	{r3, pc}
 80017c0:	20000464 	.word	0x20000464

080017c4 <HAL_GetTick>:
**            tick functionality works in polling mode.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
uint32_t HAL_GetTick(void)
{
 80017c4:	b508      	push	{r3, lr}
  TimerUpdate();
 80017c6:	f7ff ffe7 	bl	8001798 <TimerUpdate>
  /* Link to the bootloader's 1ms timer. */
  return TimerGet();
} /*** end of HAL_GetTick ***/
 80017ca:	4b01      	ldr	r3, [pc, #4]	; (80017d0 <HAL_GetTick+0xc>)
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	bd08      	pop	{r3, pc}
 80017d0:	20000464 	.word	0x20000464

080017d4 <AssertFailure>:
** \param     line   Linenumber in the source file where the assertion occurred.
** \return    none
**
****************************************************************************************/
void AssertFailure(blt_char *file, blt_int32u line)
{
 80017d4:	b508      	push	{r3, lr}
  /* hang the software so that it requires a hard reset */
  for (;;)
  {
    /* keep servicing the watchdog so that this one does not cause a reset */
    CopService();
 80017d6:	f000 f8a2 	bl	800191e <CopService>
 80017da:	e7fc      	b.n	80017d6 <AssertFailure+0x2>

080017dc <BackDoorCheck>:
**            controls the opening/closing of the backdoor.
** \return    none
**
****************************************************************************************/
void BackDoorCheck(void)
{
 80017dc:	b510      	push	{r4, lr}
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
#if (BOOT_COM_ENABLE > 0)
  /* check if a connection with the host was already established. in this case the
   * backdoor stays open anyway, so no need to check if it needs to be closed.
   */
  if (ComIsConnected() == BLT_TRUE)
 80017de:	f000 f895 	bl	800190c <ComIsConnected>
 80017e2:	2801      	cmp	r0, #1
 80017e4:	d014      	beq.n	8001810 <BackDoorCheck+0x34>
    return;
  }
#endif

  /* when the backdoor is still open, check if it's time to close it */
  if (backdoorOpen == BLT_TRUE)
 80017e6:	4c0b      	ldr	r4, [pc, #44]	; (8001814 <BackDoorCheck+0x38>)
 80017e8:	7823      	ldrb	r3, [r4, #0]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d110      	bne.n	8001810 <BackDoorCheck+0x34>
  {
    /* check if the backdoor entry time window elapsed */
    if (TimerGet() >= (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime))
 80017ee:	f7ff ffe1 	bl	80017b4 <TimerGet>
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <BackDoorCheck+0x3c>)
 80017f4:	4a09      	ldr	r2, [pc, #36]	; (800181c <BackDoorCheck+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6812      	ldr	r2, [r2, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001800:	4298      	cmp	r0, r3
 8001802:	d305      	bcc.n	8001810 <BackDoorCheck+0x34>
    {
      /* close the backdoor */
      backdoorOpen = BLT_FALSE;
 8001804:	2300      	movs	r3, #0
 8001806:	7023      	strb	r3, [r4, #0]
        CpuStartUserProgram();
      }
    }
  }
#endif
} /*** end of BackDoorCheck ***/
 8001808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        CpuStartUserProgram();
 800180c:	f7ff bdf8 	b.w	8001400 <CpuStartUserProgram>
} /*** end of BackDoorCheck ***/
 8001810:	bd10      	pop	{r4, pc}
 8001812:	bf00      	nop
 8001814:	2000046c 	.word	0x2000046c
 8001818:	20000468 	.word	0x20000468
 800181c:	20000470 	.word	0x20000470

08001820 <BackDoorRestartTimer>:
**            called.
** \return    none
**
****************************************************************************************/
void BackDoorRestartTimer(void)
{
 8001820:	b508      	push	{r3, lr}
  /* only restart the time if the backdoor is actually still open */
  if (backdoorOpen == BLT_TRUE)
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <BackDoorRestartTimer+0x14>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d103      	bne.n	8001832 <BackDoorRestartTimer+0x12>
  {
    backdoorOpenTime = TimerGet();
 800182a:	f7ff ffc3 	bl	80017b4 <TimerGet>
 800182e:	4b02      	ldr	r3, [pc, #8]	; (8001838 <BackDoorRestartTimer+0x18>)
 8001830:	6018      	str	r0, [r3, #0]
  }
} /*** end of BackDoorRestartTimer ***/
 8001832:	bd08      	pop	{r3, pc}
 8001834:	2000046c 	.word	0x2000046c
 8001838:	20000470 	.word	0x20000470

0800183c <BackDoorInit>:
{
 800183c:	b508      	push	{r3, lr}
  backdoorOpen = BLT_TRUE;
 800183e:	4b04      	ldr	r3, [pc, #16]	; (8001850 <BackDoorInit+0x14>)
 8001840:	2201      	movs	r2, #1
 8001842:	701a      	strb	r2, [r3, #0]
  BackDoorRestartTimer();
 8001844:	f7ff ffec 	bl	8001820 <BackDoorRestartTimer>
} /*** end of BackDoorInit ***/
 8001848:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BackDoorCheck();
 800184c:	f7ff bfc6 	b.w	80017dc <BackDoorCheck>
 8001850:	2000046c 	.word	0x2000046c

08001854 <BootInit>:
** \brief     Initializes the bootloader core.
** \return    none
**
****************************************************************************************/
void BootInit(void)
{
 8001854:	b508      	push	{r3, lr}
  /* initialize the CPU */
  CpuInit();
 8001856:	f7ff fdd1 	bl	80013fc <CpuInit>
  /* initialize the watchdog */
  CopInit();
 800185a:	f000 f85e 	bl	800191a <CopInit>
  /* initialize the millisecond timer */
  TimerInit();
 800185e:	f7ff ff89 	bl	8001774 <TimerInit>
  /* initialize the non-volatile memory driver */
  NvmInit();
 8001862:	f7ff ff6b 	bl	800173c <NvmInit>
  /* initialize the file system module */
  FileInit();
#endif
#if (BOOT_COM_ENABLE > 0)
  /* initialize the communication module */
  ComInit();
 8001866:	f000 f80f 	bl	8001888 <ComInit>
  /* initialize the gateway module */
  GatewayInit();
#endif
  /* initialize the backdoor entry */
  BackDoorInit();
} /*** end of BootInit ***/
 800186a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BackDoorInit();
 800186e:	f7ff bfe5 	b.w	800183c <BackDoorInit>

08001872 <BootTask>:
** \brief     Task function of the bootloader core that drives the program.
** \return    none
**
****************************************************************************************/
void BootTask(void)
{
 8001872:	b508      	push	{r3, lr}
  /* service the watchdog */
  CopService();
 8001874:	f000 f853 	bl	800191e <CopService>
  /* update the millisecond timer */
  TimerUpdate();
 8001878:	f7ff ff8e 	bl	8001798 <TimerUpdate>
  /* call worker task for updating firmware from locally attached file storage */
  FileTask();
#endif /* BOOT_FILE_SYS_ENABLE > 0 */
#if (BOOT_COM_ENABLE > 0)
  /* process possibly pending communication data */
  ComTask();
 800187c:	f000 f810 	bl	80018a0 <ComTask>
  /* run the gateway */
  GatewayTask();
#endif
  /* control the backdoor */
  BackDoorCheck();
} /*** end of BootTask ***/
 8001880:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BackDoorCheck();
 8001884:	f7ff bfaa 	b.w	80017dc <BackDoorCheck>

08001888 <ComInit>:
**            the communication.
** \return    none
**
****************************************************************************************/
void ComInit(void)
{
 8001888:	b508      	push	{r3, lr}
  /* initialize the XCP communication protocol */
  XcpInit();
 800188a:	f000 f855 	bl	8001938 <XcpInit>
#if (BOOT_COM_CAN_ENABLE > 0)
  /* initialize the CAN controller */
  CanInit();
 800188e:	f7ff fd15 	bl	80012bc <CanInit>
  /* set it as active */
  comActiveInterface = COM_IF_CAN;
 8001892:	4b02      	ldr	r3, [pc, #8]	; (800189c <ComInit+0x14>)
 8001894:	2201      	movs	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]
  NetInit();
  /* set it as active */
  comActiveInterface = COM_IF_NET;
  #endif
#endif
} /*** end of ComInit ***/
 8001898:	bd08      	pop	{r3, pc}
 800189a:	bf00      	nop
 800189c:	2000000c 	.word	0x2000000c

080018a0 <ComTask>:
**            and submitting the request to process newly received data.
** \return    none
**
****************************************************************************************/
void ComTask(void)
{
 80018a0:	b507      	push	{r0, r1, r2, lr}
  blt_int8u xcpPacketLen;
  /* make xcpCtoReqPacket static for runtime efficiency */
  static blt_int8u xcpCtoReqPacket[BOOT_COM_RX_MAX_DATA];

#if (BOOT_COM_CAN_ENABLE > 0)
  if (CanReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 80018a2:	4808      	ldr	r0, [pc, #32]	; (80018c4 <ComTask+0x24>)
 80018a4:	f10d 0107 	add.w	r1, sp, #7
 80018a8:	f7ff fd8e 	bl	80013c8 <CanReceivePacket>
 80018ac:	2801      	cmp	r0, #1
 80018ae:	d106      	bne.n	80018be <ComTask+0x1e>
  {
    /* make this the active interface */
    comActiveInterface = COM_IF_CAN;
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <ComTask+0x28>)
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 80018b2:	f89d 1007 	ldrb.w	r1, [sp, #7]
    comActiveInterface = COM_IF_CAN;
 80018b6:	7018      	strb	r0, [r3, #0]
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <ComTask+0x24>)
 80018ba:	f000 f859 	bl	8001970 <XcpPacketReceived>
    comActiveInterface = COM_IF_NET;
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
} /*** end of ComTask ***/
 80018be:	b003      	add	sp, #12
 80018c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80018c4:	20000474 	.word	0x20000474
 80018c8:	2000000c 	.word	0x2000000c

080018cc <ComFree>:
{
#if (BOOT_COM_USB_ENABLE > 0)
  /* disconnect the usb device from the usb host */
  UsbFree();
#endif
} /*** end of ComFree ***/
 80018cc:	4770      	bx	lr
	...

080018d0 <ComTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
void ComTransmitPacket(blt_int8u *data, blt_int16u len)
{
 80018d0:	b508      	push	{r3, lr}
#if (BOOT_COM_CAN_ENABLE > 0)
  /* transmit the packet. note that len is limited to 8 in the plausibility check,
   * so cast is okay.
   */
  if (comActiveInterface == COM_IF_CAN)
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <ComTransmitPacket+0x18>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d102      	bne.n	80018e0 <ComTransmitPacket+0x10>
  {
    CanTransmitPacket(data, (blt_int8u)len);
 80018da:	b2c9      	uxtb	r1, r1
 80018dc:	f7ff fd50 	bl	8001380 <CanTransmitPacket>
  }
#endif

  /* send signal that the packet was transmitted */
  XcpPacketTransmitted();
} /*** end of ComTransmitPacket ***/
 80018e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  XcpPacketTransmitted();
 80018e4:	f000 b83c 	b.w	8001960 <XcpPacketTransmitted>
 80018e8:	2000000c 	.word	0x2000000c

080018ec <ComGetActiveInterfaceMaxRxLen>:
blt_int16u ComGetActiveInterfaceMaxRxLen(void)
{
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <ComGetActiveInterfaceMaxRxLen+0x14>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	bf9a      	itte	ls
 80018f8:	4a02      	ldrls	r2, [pc, #8]	; (8001904 <ComGetActiveInterfaceMaxRxLen+0x18>)
 80018fa:	5cd0      	ldrbls	r0, [r2, r3]
 80018fc:	2040      	movhi	r0, #64	; 0x40
      result = BOOT_COM_RX_MAX_DATA;
      break;
  }

  return result;
} /*** end of ComGetActiveInterfaceMaxRxLen ***/
 80018fe:	4770      	bx	lr
 8001900:	2000000c 	.word	0x2000000c
 8001904:	08001c6b 	.word	0x08001c6b

08001908 <ComGetActiveInterfaceMaxTxLen>:
 8001908:	f7ff bff0 	b.w	80018ec <ComGetActiveInterfaceMaxRxLen>

0800190c <ComIsConnected>:
** \brief     This function obtains the XCP connection state.
** \return    BLT_TRUE when an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool ComIsConnected(void)
{
 800190c:	b508      	push	{r3, lr}
  blt_bool result = BLT_FALSE;

  /* Is there an active XCP connection? This indicates that the communication interface
   * is in the connection state. 
   */  
  if (XcpIsConnected())
 800190e:	f000 f81f 	bl	8001950 <XcpIsConnected>
    result = BLT_TRUE;
  }
#endif
  /* give the result back to the caller. */
  return result;
} /*** end of ComIsConnected ***/
 8001912:	3000      	adds	r0, #0
 8001914:	bf18      	it	ne
 8001916:	2001      	movne	r0, #1
 8001918:	bd08      	pop	{r3, pc}

0800191a <CopInit>:
**
****************************************************************************************/
void CopInit(void)
{
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopInitHook();
 800191a:	f7fe bc64 	b.w	80001e6 <CopInitHook>

0800191e <CopService>:
**
****************************************************************************************/
void CopService(void)
{
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopServiceHook();
 800191e:	f7fe bc65 	b.w	80001ec <CopServiceHook>
	...

08001924 <XcpSetCtoError>:
**
****************************************************************************************/
static void XcpSetCtoError(blt_int8u error)
{
  /* prepare the error packet */
  xcpInfo.ctoData[0] = XCP_PID_ERR;
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <XcpSetCtoError+0x10>)
 8001926:	22fe      	movs	r2, #254	; 0xfe
 8001928:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[1] = error;
  xcpInfo.ctoLen = 2;
 800192a:	2202      	movs	r2, #2
  xcpInfo.ctoData[1] = error;
 800192c:	7118      	strb	r0, [r3, #4]
  xcpInfo.ctoLen = 2;
 800192e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpSetCtoError ***/
 8001932:	4770      	bx	lr
 8001934:	200004b4 	.word	0x200004b4

08001938 <XcpInit>:
  xcpInfo.mta = 0;
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <XcpInit+0x14>)
 800193a:	2200      	movs	r2, #0
 800193c:	649a      	str	r2, [r3, #72]	; 0x48
  xcpInfo.ctoPending = 0;
 800193e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  xcpInfo.ctoLen = 0;
 8001942:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  xcpInfo.connected = 0;
 8001946:	801a      	strh	r2, [r3, #0]
  xcpInfo.protection = 0;
 8001948:	709a      	strb	r2, [r3, #2]
} /*** end of XcpInit ***/
 800194a:	4770      	bx	lr
 800194c:	200004b4 	.word	0x200004b4

08001950 <XcpIsConnected>:
  if (xcpInfo.connected == 0)
 8001950:	4b02      	ldr	r3, [pc, #8]	; (800195c <XcpIsConnected+0xc>)
 8001952:	7818      	ldrb	r0, [r3, #0]
} /*** end of XcpIsConnected ***/
 8001954:	3000      	adds	r0, #0
 8001956:	bf18      	it	ne
 8001958:	2001      	movne	r0, #1
 800195a:	4770      	bx	lr
 800195c:	200004b4 	.word	0x200004b4

08001960 <XcpPacketTransmitted>:
  xcpInfo.ctoPending = 0;
 8001960:	4b02      	ldr	r3, [pc, #8]	; (800196c <XcpPacketTransmitted+0xc>)
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
} /*** end of XcpPacketTransmitted ***/
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	200004b4 	.word	0x200004b4

08001970 <XcpPacketReceived>:
{
 8001970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (data[0] == XCP_CMD_CONNECT)
 8001972:	7803      	ldrb	r3, [r0, #0]
 8001974:	4c7e      	ldr	r4, [pc, #504]	; (8001b70 <XcpPacketReceived+0x200>)
 8001976:	2bff      	cmp	r3, #255	; 0xff
{
 8001978:	4605      	mov	r5, r0
  if (data[0] == XCP_CMD_CONNECT)
 800197a:	d12c      	bne.n	80019d6 <XcpPacketReceived+0x66>

  /* indicate that the connection is established */
  xcpInfo.connected = 1;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800197c:	70e3      	strb	r3, [r4, #3]
#if (XCP_RES_PAGING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_CALPAG;
#endif

#if (XCP_RES_PROGRAMMING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_PGM;
 800197e:	2310      	movs	r3, #16
  xcpInfo.connected = 1;
 8001980:	2501      	movs	r5, #1
  xcpInfo.ctoData[1] |= XCP_RES_PGM;
 8001982:	7123      	strb	r3, [r4, #4]
#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_STIM;
#endif

  /* report communication mode info. only byte granularity is supported */
  xcpInfo.ctoData[2] = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	7163      	strb	r3, [r4, #5]
  xcpInfo.connected = 1;
 8001988:	8025      	strh	r5, [r4, #0]
  /* configure for motorola or intel byte ordering */
  xcpInfo.ctoData[2] |= XCP_MOTOROLA_FORMAT;

  /* report max cto data length */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 800198a:	f7ff ffaf 	bl	80018ec <ComGetActiveInterfaceMaxRxLen>
 800198e:	71a0      	strb	r0, [r4, #6]

  /* report max dto data length */
#if (XCP_MOTOROLA_FORMAT == 0)
  xcpInfo.ctoData[4] = (blt_int8u)XCP_DTO_PACKET_LEN;
 8001990:	f7ff ffba 	bl	8001908 <ComGetActiveInterfaceMaxTxLen>
 8001994:	71e0      	strb	r0, [r4, #7]
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 8001996:	f7ff ffb7 	bl	8001908 <ComGetActiveInterfaceMaxTxLen>

  /* report msb of transport layer version number */
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;

  /* set packet length */
  xcpInfo.ctoLen = 8;
 800199a:	2308      	movs	r3, #8
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 800199c:	0a00      	lsrs	r0, r0, #8
 800199e:	7220      	strb	r0, [r4, #8]
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 80019a0:	7265      	strb	r5, [r4, #9]
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;
 80019a2:	72a5      	strb	r5, [r4, #10]
  xcpInfo.ctoLen = 8;
 80019a4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44

  /* reinit the NVM driver because a new firmware update is about the start */
  NvmInit();
 80019a8:	f7ff fec8 	bl	800173c <NvmInit>
  if (xcpInfo.ctoPending == 1)
 80019ac:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d102      	bne.n	80019ba <XcpPacketReceived+0x4a>
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 80019b4:	2010      	movs	r0, #16
 80019b6:	f7ff ffb5 	bl	8001924 <XcpSetCtoError>
  if (xcpInfo.ctoLen > 0)
 80019ba:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
 80019be:	2900      	cmp	r1, #0
 80019c0:	f340 80d4 	ble.w	8001b6c <XcpPacketReceived+0x1fc>
    xcpInfo.ctoPending = 1;
 80019c4:	2301      	movs	r3, #1
 80019c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  ComTransmitPacket(data, len);
 80019ca:	b289      	uxth	r1, r1
 80019cc:	4869      	ldr	r0, [pc, #420]	; (8001b74 <XcpPacketReceived+0x204>)
} /*** end of XcpPacketReceived ***/
 80019ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  ComTransmitPacket(data, len);
 80019d2:	f7ff bf7d 	b.w	80018d0 <ComTransmitPacket>
  else if (xcpInfo.connected == 1)
 80019d6:	7826      	ldrb	r6, [r4, #0]
 80019d8:	2e01      	cmp	r6, #1
 80019da:	f040 80c7 	bne.w	8001b6c <XcpPacketReceived+0x1fc>
    switch (data[0])
 80019de:	2bf3      	cmp	r3, #243	; 0xf3
 80019e0:	d058      	beq.n	8001a94 <XcpPacketReceived+0x124>
 80019e2:	d81f      	bhi.n	8001a24 <XcpPacketReceived+0xb4>
 80019e4:	2bcf      	cmp	r3, #207	; 0xcf
 80019e6:	f000 80be 	beq.w	8001b66 <XcpPacketReceived+0x1f6>
 80019ea:	d807      	bhi.n	80019fc <XcpPacketReceived+0x8c>
 80019ec:	2bc9      	cmp	r3, #201	; 0xc9
 80019ee:	f000 8083 	beq.w	8001af8 <XcpPacketReceived+0x188>
 80019f2:	2bcc      	cmp	r3, #204	; 0xcc
 80019f4:	f000 8089 	beq.w	8001b0a <XcpPacketReceived+0x19a>
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 80019f8:	2020      	movs	r0, #32
 80019fa:	e030      	b.n	8001a5e <XcpPacketReceived+0xee>
    switch (data[0])
 80019fc:	2bd1      	cmp	r3, #209	; 0xd1
 80019fe:	f000 80ab 	beq.w	8001b58 <XcpPacketReceived+0x1e8>
 8001a02:	f0c0 808c 	bcc.w	8001b1e <XcpPacketReceived+0x1ae>
 8001a06:	2bd2      	cmp	r3, #210	; 0xd2
 8001a08:	d1f6      	bne.n	80019f8 <XcpPacketReceived+0x88>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;

  /* initialize reserved parameter */
  xcpInfo.ctoData[1] = 0;
 8001a0a:	2500      	movs	r5, #0
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001a0c:	23ff      	movs	r3, #255	; 0xff
 8001a0e:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] = 0;
 8001a10:	7125      	strb	r5, [r4, #4]

  /* no special communication mode supported during programming */
  xcpInfo.ctoData[2] = 0;
 8001a12:	7165      	strb	r5, [r4, #5]

  /* cto packet length stays the same during programming */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8001a14:	f7ff ff6a 	bl	80018ec <ComGetActiveInterfaceMaxRxLen>

  /* no block size, st-min time, or queue size supported */
  xcpInfo.ctoData[4] = 0;
 8001a18:	71e5      	strb	r5, [r4, #7]
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8001a1a:	71a0      	strb	r0, [r4, #6]
  xcpInfo.ctoData[5] = 0;
 8001a1c:	7225      	strb	r5, [r4, #8]
  xcpInfo.ctoData[6] = 0;
 8001a1e:	7265      	strb	r5, [r4, #9]

  /* set packet length */
  xcpInfo.ctoLen = 7;
 8001a20:	2307      	movs	r3, #7
 8001a22:	e02b      	b.n	8001a7c <XcpPacketReceived+0x10c>
    switch (data[0])
 8001a24:	2bfa      	cmp	r3, #250	; 0xfa
 8001a26:	d04c      	beq.n	8001ac2 <XcpPacketReceived+0x152>
 8001a28:	d80b      	bhi.n	8001a42 <XcpPacketReceived+0xd2>
 8001a2a:	2bf5      	cmp	r3, #245	; 0xf5
 8001a2c:	d011      	beq.n	8001a52 <XcpPacketReceived+0xe2>
 8001a2e:	d328      	bcc.n	8001a82 <XcpPacketReceived+0x112>
 8001a30:	2bf6      	cmp	r3, #246	; 0xf6
 8001a32:	d1e1      	bne.n	80019f8 <XcpPacketReceived+0x88>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001a34:	23ff      	movs	r3, #255	; 0xff
 8001a36:	70e3      	strb	r3, [r4, #3]
  xcpInfo.mta = *(blt_int32u *)&data[4];
 8001a38:	6843      	ldr	r3, [r0, #4]

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;

  /* post increment the mta */
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 8001a3a:	64a3      	str	r3, [r4, #72]	; 0x48

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001a3c:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
 8001a40:	e7b4      	b.n	80019ac <XcpPacketReceived+0x3c>
    switch (data[0])
 8001a42:	2bfd      	cmp	r3, #253	; 0xfd
 8001a44:	d049      	beq.n	8001ada <XcpPacketReceived+0x16a>
 8001a46:	2bfe      	cmp	r3, #254	; 0xfe
 8001a48:	d051      	beq.n	8001aee <XcpPacketReceived+0x17e>
 8001a4a:	2bfc      	cmp	r3, #252	; 0xfc
 8001a4c:	d1d4      	bne.n	80019f8 <XcpPacketReceived+0x88>
  XcpSetCtoError(XCP_ERR_CMD_SYNCH);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	e005      	b.n	8001a5e <XcpPacketReceived+0xee>
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8001a52:	f7ff ff4b 	bl	80018ec <ComGetActiveInterfaceMaxRxLen>
 8001a56:	786a      	ldrb	r2, [r5, #1]
 8001a58:	4290      	cmp	r0, r2
 8001a5a:	d803      	bhi.n	8001a64 <XcpPacketReceived+0xf4>
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8001a5c:	2022      	movs	r0, #34	; 0x22
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 8001a5e:	f7ff ff61 	bl	8001924 <XcpSetCtoError>
        break;
 8001a62:	e7a3      	b.n	80019ac <XcpPacketReceived+0x3c>
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8001a64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8001a66:	1d20      	adds	r0, r4, #4
 8001a68:	f7ff fcec 	bl	8001444 <CpuMemCopy>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001a6c:	23ff      	movs	r3, #255	; 0xff
 8001a6e:	70e3      	strb	r3, [r4, #3]
  xcpInfo.mta += data[1];
 8001a70:	786a      	ldrb	r2, [r5, #1]
 8001a72:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a74:	4413      	add	r3, r2
 8001a76:	64a3      	str	r3, [r4, #72]	; 0x48
  xcpInfo.ctoLen = data[1]+1;
 8001a78:	786b      	ldrb	r3, [r5, #1]
 8001a7a:	3301      	adds	r3, #1
  xcpInfo.ctoLen = 7;
 8001a7c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 8001a80:	e794      	b.n	80019ac <XcpPacketReceived+0x3c>
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8001a82:	f7ff ff33 	bl	80018ec <ComGetActiveInterfaceMaxRxLen>
 8001a86:	786b      	ldrb	r3, [r5, #1]
 8001a88:	4283      	cmp	r3, r0
 8001a8a:	d2e7      	bcs.n	8001a5c <XcpPacketReceived+0xec>
  xcpInfo.mta = *(blt_int32u *)&data[4];
 8001a8c:	6869      	ldr	r1, [r5, #4]
 8001a8e:	64a1      	str	r1, [r4, #72]	; 0x48
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8001a90:	786a      	ldrb	r2, [r5, #1]
 8001a92:	e7e8      	b.n	8001a66 <XcpPacketReceived+0xf6>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001a94:	23ff      	movs	r3, #255	; 0xff
 8001a96:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] = XcpComputeChecksum(xcpInfo.mta, *(blt_int32u *)&data[4],
 8001a98:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8001a9a:	6847      	ldr	r7, [r0, #4]
  blt_int8u cs = 0;
 8001a9c:	2500      	movs	r5, #0
 8001a9e:	4437      	add	r7, r6
  while (length-- > 0)
 8001aa0:	42be      	cmp	r6, r7
 8001aa2:	d107      	bne.n	8001ab4 <XcpPacketReceived+0x144>
  xcpInfo.ctoData[1] = XcpComputeChecksum(xcpInfo.mta, *(blt_int32u *)&data[4],
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	80a3      	strh	r3, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8001aa8:	2300      	movs	r3, #0
  *checksum = cs;
 8001aaa:	f8c4 5007 	str.w	r5, [r4, #7]
  xcpInfo.ctoData[2] = 0;
 8001aae:	71a3      	strb	r3, [r4, #6]
  xcpInfo.ctoLen = 8;
 8001ab0:	2308      	movs	r3, #8
 8001ab2:	e7e3      	b.n	8001a7c <XcpPacketReceived+0x10c>
    cs += *((blt_int8u *)(blt_addr)address);
 8001ab4:	f816 3b01 	ldrb.w	r3, [r6], #1
 8001ab8:	441d      	add	r5, r3
 8001aba:	b2ed      	uxtb	r5, r5
    CopService();
 8001abc:	f7ff ff2f 	bl	800191e <CopService>
 8001ac0:	e7ee      	b.n	8001aa0 <XcpPacketReceived+0x130>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001ac2:	23ff      	movs	r3, #255	; 0xff
 8001ac4:	70e3      	strb	r3, [r4, #3]
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 8001ac6:	4b2c      	ldr	r3, [pc, #176]	; (8001b78 <XcpPacketReceived+0x208>)
 8001ac8:	64a3      	str	r3, [r4, #72]	; 0x48
  xcpInfo.ctoData[1] = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	7123      	strb	r3, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8001ace:	7163      	strb	r3, [r4, #5]
  xcpInfo.ctoData[3] = 0;
 8001ad0:	71a3      	strb	r3, [r4, #6]
  *(blt_int32u *)&xcpInfo.ctoData[4] = (sizeof(xcpStationId)/sizeof(xcpStationId[0])) - 1;
 8001ad2:	2307      	movs	r3, #7
 8001ad4:	f8c4 3007 	str.w	r3, [r4, #7]
 8001ad8:	e7ea      	b.n	8001ab0 <XcpPacketReceived+0x140>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001ada:	23ff      	movs	r3, #255	; 0xff
 8001adc:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[2] = xcpInfo.protection;
 8001ade:	7862      	ldrb	r2, [r4, #1]
 8001ae0:	7162      	strb	r2, [r4, #5]
  xcpInfo.ctoData[1] = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	7123      	strb	r3, [r4, #4]
  xcpInfo.ctoData[3] = 0;
 8001ae6:	80e3      	strh	r3, [r4, #6]
  xcpInfo.ctoData[4] = 0;
 8001ae8:	7223      	strb	r3, [r4, #8]
  xcpInfo.ctoLen = 6;
 8001aea:	2306      	movs	r3, #6
 8001aec:	e7c6      	b.n	8001a7c <XcpPacketReceived+0x10c>
  xcpInfo.connected = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	8023      	strh	r3, [r4, #0]
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001af2:	23ff      	movs	r3, #255	; 0xff
 8001af4:	70e3      	strb	r3, [r4, #3]
 8001af6:	e7a1      	b.n	8001a3c <XcpPacketReceived+0xcc>
  if (NvmWrite((blt_addr)xcpInfo.mta, XCP_CTO_PACKET_LEN-1, &data[1]) == BLT_FALSE)
 8001af8:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8001afa:	f7ff fef7 	bl	80018ec <ComGetActiveInterfaceMaxRxLen>
 8001afe:	1c6a      	adds	r2, r5, #1
 8001b00:	1e41      	subs	r1, r0, #1
 8001b02:	4638      	mov	r0, r7
 8001b04:	f7ff fe1c 	bl	8001740 <NvmWrite>
 8001b08:	b908      	cbnz	r0, 8001b0e <XcpPacketReceived+0x19e>
    return;
  }
#endif

  /* programming with kernel currently not needed and therefore not supported */
  XcpSetCtoError(XCP_ERR_GENERIC);
 8001b0a:	2031      	movs	r0, #49	; 0x31
 8001b0c:	e7a7      	b.n	8001a5e <XcpPacketReceived+0xee>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001b0e:	23ff      	movs	r3, #255	; 0xff
 8001b10:	70e3      	strb	r3, [r4, #3]
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 8001b12:	f7ff feeb 	bl	80018ec <ComGetActiveInterfaceMaxRxLen>
 8001b16:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001b18:	3801      	subs	r0, #1
 8001b1a:	4403      	add	r3, r0
 8001b1c:	e78d      	b.n	8001a3a <XcpPacketReceived+0xca>
  if (data[1] > (XCP_CTO_PACKET_LEN-2))
 8001b1e:	f7ff fee5 	bl	80018ec <ComGetActiveInterfaceMaxRxLen>
 8001b22:	786b      	ldrb	r3, [r5, #1]
 8001b24:	3801      	subs	r0, #1
 8001b26:	4298      	cmp	r0, r3
 8001b28:	dd98      	ble.n	8001a5c <XcpPacketReceived+0xec>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001b2a:	23ff      	movs	r3, #255	; 0xff
 8001b2c:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoLen = 1;
 8001b2e:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  if (data[1] == 0)
 8001b32:	7869      	ldrb	r1, [r5, #1]
 8001b34:	b929      	cbnz	r1, 8001b42 <XcpPacketReceived+0x1d2>
    if (NvmDone() == BLT_FALSE)
 8001b36:	f7ff fe0b 	bl	8001750 <NvmDone>
 8001b3a:	2800      	cmp	r0, #0
 8001b3c:	f47f af36 	bne.w	80019ac <XcpPacketReceived+0x3c>
 8001b40:	e7e3      	b.n	8001b0a <XcpPacketReceived+0x19a>
  if (NvmWrite((blt_addr)xcpInfo.mta, data[1], &data[2]) == BLT_FALSE)
 8001b42:	1caa      	adds	r2, r5, #2
 8001b44:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001b46:	f7ff fdfb 	bl	8001740 <NvmWrite>
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	d0dd      	beq.n	8001b0a <XcpPacketReceived+0x19a>
  xcpInfo.mta += data[1];
 8001b4e:	786a      	ldrb	r2, [r5, #1]
 8001b50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001b52:	4413      	add	r3, r2
 8001b54:	64a3      	str	r3, [r4, #72]	; 0x48
 8001b56:	e729      	b.n	80019ac <XcpPacketReceived+0x3c>
  if (NvmErase((blt_addr)xcpInfo.mta, *(blt_int32u *)&data[4]) == BLT_FALSE)
 8001b58:	6841      	ldr	r1, [r0, #4]
 8001b5a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001b5c:	f7ff fdf2 	bl	8001744 <NvmErase>
 8001b60:	2800      	cmp	r0, #0
 8001b62:	d1c6      	bne.n	8001af2 <XcpPacketReceived+0x182>
 8001b64:	e7d1      	b.n	8001b0a <XcpPacketReceived+0x19a>
  CpuStartUserProgram();
 8001b66:	f7ff fc4b 	bl	8001400 <CpuStartUserProgram>
 8001b6a:	e7c2      	b.n	8001af2 <XcpPacketReceived+0x182>
} /*** end of XcpPacketReceived ***/
 8001b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200004b4 	.word	0x200004b4
 8001b74:	200004b7 	.word	0x200004b7
 8001b78:	08001c6e 	.word	0x08001c6e

08001b7c <__libc_init_array>:
 8001b7c:	b570      	push	{r4, r5, r6, lr}
 8001b7e:	4e0d      	ldr	r6, [pc, #52]	; (8001bb4 <__libc_init_array+0x38>)
 8001b80:	4c0d      	ldr	r4, [pc, #52]	; (8001bb8 <__libc_init_array+0x3c>)
 8001b82:	1ba4      	subs	r4, r4, r6
 8001b84:	10a4      	asrs	r4, r4, #2
 8001b86:	2500      	movs	r5, #0
 8001b88:	42a5      	cmp	r5, r4
 8001b8a:	d109      	bne.n	8001ba0 <__libc_init_array+0x24>
 8001b8c:	4e0b      	ldr	r6, [pc, #44]	; (8001bbc <__libc_init_array+0x40>)
 8001b8e:	4c0c      	ldr	r4, [pc, #48]	; (8001bc0 <__libc_init_array+0x44>)
 8001b90:	f000 f820 	bl	8001bd4 <_init>
 8001b94:	1ba4      	subs	r4, r4, r6
 8001b96:	10a4      	asrs	r4, r4, #2
 8001b98:	2500      	movs	r5, #0
 8001b9a:	42a5      	cmp	r5, r4
 8001b9c:	d105      	bne.n	8001baa <__libc_init_array+0x2e>
 8001b9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ba0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ba4:	4798      	blx	r3
 8001ba6:	3501      	adds	r5, #1
 8001ba8:	e7ee      	b.n	8001b88 <__libc_init_array+0xc>
 8001baa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bae:	4798      	blx	r3
 8001bb0:	3501      	adds	r5, #1
 8001bb2:	e7f2      	b.n	8001b9a <__libc_init_array+0x1e>
 8001bb4:	08001c78 	.word	0x08001c78
 8001bb8:	08001c78 	.word	0x08001c78
 8001bbc:	08001c78 	.word	0x08001c78
 8001bc0:	08001c7c 	.word	0x08001c7c

08001bc4 <memset>:
 8001bc4:	4402      	add	r2, r0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d100      	bne.n	8001bce <memset+0xa>
 8001bcc:	4770      	bx	lr
 8001bce:	f803 1b01 	strb.w	r1, [r3], #1
 8001bd2:	e7f9      	b.n	8001bc8 <memset+0x4>

08001bd4 <_init>:
 8001bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd6:	bf00      	nop
 8001bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bda:	bc08      	pop	{r3}
 8001bdc:	469e      	mov	lr, r3
 8001bde:	4770      	bx	lr

08001be0 <_fini>:
 8001be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be2:	bf00      	nop
 8001be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001be6:	bc08      	pop	{r3}
 8001be8:	469e      	mov	lr, r3
 8001bea:	4770      	bx	lr
